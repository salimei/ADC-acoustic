
project acoustic camera - ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f14  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  080080a0  080080a0  000180a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084c4  080084c4  00020260  2**0
                  CONTENTS
  4 .ARM          00000008  080084c4  080084c4  000184c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084cc  080084cc  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084cc  080084cc  000184cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084d0  080084d0  000184d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  080084d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  20000260  08008734  00020260  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  08008734  000206c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c45b  00000000  00000000  00020289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ee  00000000  00000000  0002c6e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0002e8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002f258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020dc2  00000000  00000000  0002fb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae99  00000000  00000000  000508d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c12c2  00000000  00000000  0005b76b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011ca2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a6c  00000000  00000000  0011ca80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000260 	.word	0x20000260
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008084 	.word	0x08008084

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000264 	.word	0x20000264
 80001c4:	08008084 	.word	0x08008084

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__gesf2>:
 800105c:	f04f 3cff 	mov.w	ip, #4294967295
 8001060:	e006      	b.n	8001070 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__lesf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	e002      	b.n	8001070 <__cmpsf2+0x4>
 800106a:	bf00      	nop

0800106c <__cmpsf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001074:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001078:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800107c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001080:	bf18      	it	ne
 8001082:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001086:	d011      	beq.n	80010ac <__cmpsf2+0x40>
 8001088:	b001      	add	sp, #4
 800108a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800108e:	bf18      	it	ne
 8001090:	ea90 0f01 	teqne	r0, r1
 8001094:	bf58      	it	pl
 8001096:	ebb2 0003 	subspl.w	r0, r2, r3
 800109a:	bf88      	it	hi
 800109c:	17c8      	asrhi	r0, r1, #31
 800109e:	bf38      	it	cc
 80010a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010a4:	bf18      	it	ne
 80010a6:	f040 0001 	orrne.w	r0, r0, #1
 80010aa:	4770      	bx	lr
 80010ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b0:	d102      	bne.n	80010b8 <__cmpsf2+0x4c>
 80010b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010b6:	d105      	bne.n	80010c4 <__cmpsf2+0x58>
 80010b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010bc:	d1e4      	bne.n	8001088 <__cmpsf2+0x1c>
 80010be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010c2:	d0e1      	beq.n	8001088 <__cmpsf2+0x1c>
 80010c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <__aeabi_cfrcmple>:
 80010cc:	4684      	mov	ip, r0
 80010ce:	4608      	mov	r0, r1
 80010d0:	4661      	mov	r1, ip
 80010d2:	e7ff      	b.n	80010d4 <__aeabi_cfcmpeq>

080010d4 <__aeabi_cfcmpeq>:
 80010d4:	b50f      	push	{r0, r1, r2, r3, lr}
 80010d6:	f7ff ffc9 	bl	800106c <__cmpsf2>
 80010da:	2800      	cmp	r0, #0
 80010dc:	bf48      	it	mi
 80010de:	f110 0f00 	cmnmi.w	r0, #0
 80010e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010e4 <__aeabi_fcmpeq>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff fff4 	bl	80010d4 <__aeabi_cfcmpeq>
 80010ec:	bf0c      	ite	eq
 80010ee:	2001      	moveq	r0, #1
 80010f0:	2000      	movne	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmplt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffea 	bl	80010d4 <__aeabi_cfcmpeq>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmple>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffe0 	bl	80010d4 <__aeabi_cfcmpeq>
 8001114:	bf94      	ite	ls
 8001116:	2001      	movls	r0, #1
 8001118:	2000      	movhi	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_fcmpge>:
 8001120:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001124:	f7ff ffd2 	bl	80010cc <__aeabi_cfrcmple>
 8001128:	bf94      	ite	ls
 800112a:	2001      	movls	r0, #1
 800112c:	2000      	movhi	r0, #0
 800112e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001132:	bf00      	nop

08001134 <__aeabi_fcmpgt>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff ffc8 	bl	80010cc <__aeabi_cfrcmple>
 800113c:	bf34      	ite	cc
 800113e:	2001      	movcc	r0, #1
 8001140:	2000      	movcs	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <__aeabi_f2iz>:
 8001148:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800114c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001150:	d30f      	bcc.n	8001172 <__aeabi_f2iz+0x2a>
 8001152:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001156:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115a:	d90d      	bls.n	8001178 <__aeabi_f2iz+0x30>
 800115c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001164:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001168:	fa23 f002 	lsr.w	r0, r3, r2
 800116c:	bf18      	it	ne
 800116e:	4240      	negne	r0, r0
 8001170:	4770      	bx	lr
 8001172:	f04f 0000 	mov.w	r0, #0
 8001176:	4770      	bx	lr
 8001178:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800117c:	d101      	bne.n	8001182 <__aeabi_f2iz+0x3a>
 800117e:	0242      	lsls	r2, r0, #9
 8001180:	d105      	bne.n	800118e <__aeabi_f2iz+0x46>
 8001182:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001186:	bf08      	it	eq
 8001188:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800118c:	4770      	bx	lr
 800118e:	f04f 0000 	mov.w	r0, #0
 8001192:	4770      	bx	lr

08001194 <__aeabi_uldivmod>:
 8001194:	b953      	cbnz	r3, 80011ac <__aeabi_uldivmod+0x18>
 8001196:	b94a      	cbnz	r2, 80011ac <__aeabi_uldivmod+0x18>
 8001198:	2900      	cmp	r1, #0
 800119a:	bf08      	it	eq
 800119c:	2800      	cmpeq	r0, #0
 800119e:	bf1c      	itt	ne
 80011a0:	f04f 31ff 	movne.w	r1, #4294967295
 80011a4:	f04f 30ff 	movne.w	r0, #4294967295
 80011a8:	f000 b96e 	b.w	8001488 <__aeabi_idiv0>
 80011ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80011b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011b4:	f000 f806 	bl	80011c4 <__udivmoddi4>
 80011b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011c0:	b004      	add	sp, #16
 80011c2:	4770      	bx	lr

080011c4 <__udivmoddi4>:
 80011c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011c8:	9e08      	ldr	r6, [sp, #32]
 80011ca:	460d      	mov	r5, r1
 80011cc:	4604      	mov	r4, r0
 80011ce:	468e      	mov	lr, r1
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f040 8083 	bne.w	80012dc <__udivmoddi4+0x118>
 80011d6:	428a      	cmp	r2, r1
 80011d8:	4617      	mov	r7, r2
 80011da:	d947      	bls.n	800126c <__udivmoddi4+0xa8>
 80011dc:	fab2 f382 	clz	r3, r2
 80011e0:	b14b      	cbz	r3, 80011f6 <__udivmoddi4+0x32>
 80011e2:	f1c3 0120 	rsb	r1, r3, #32
 80011e6:	fa05 fe03 	lsl.w	lr, r5, r3
 80011ea:	fa20 f101 	lsr.w	r1, r0, r1
 80011ee:	409f      	lsls	r7, r3
 80011f0:	ea41 0e0e 	orr.w	lr, r1, lr
 80011f4:	409c      	lsls	r4, r3
 80011f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80011fa:	fbbe fcf8 	udiv	ip, lr, r8
 80011fe:	fa1f f987 	uxth.w	r9, r7
 8001202:	fb08 e21c 	mls	r2, r8, ip, lr
 8001206:	fb0c f009 	mul.w	r0, ip, r9
 800120a:	0c21      	lsrs	r1, r4, #16
 800120c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001210:	4290      	cmp	r0, r2
 8001212:	d90a      	bls.n	800122a <__udivmoddi4+0x66>
 8001214:	18ba      	adds	r2, r7, r2
 8001216:	f10c 31ff 	add.w	r1, ip, #4294967295
 800121a:	f080 8118 	bcs.w	800144e <__udivmoddi4+0x28a>
 800121e:	4290      	cmp	r0, r2
 8001220:	f240 8115 	bls.w	800144e <__udivmoddi4+0x28a>
 8001224:	f1ac 0c02 	sub.w	ip, ip, #2
 8001228:	443a      	add	r2, r7
 800122a:	1a12      	subs	r2, r2, r0
 800122c:	fbb2 f0f8 	udiv	r0, r2, r8
 8001230:	fb08 2210 	mls	r2, r8, r0, r2
 8001234:	fb00 f109 	mul.w	r1, r0, r9
 8001238:	b2a4      	uxth	r4, r4
 800123a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800123e:	42a1      	cmp	r1, r4
 8001240:	d909      	bls.n	8001256 <__udivmoddi4+0x92>
 8001242:	193c      	adds	r4, r7, r4
 8001244:	f100 32ff 	add.w	r2, r0, #4294967295
 8001248:	f080 8103 	bcs.w	8001452 <__udivmoddi4+0x28e>
 800124c:	42a1      	cmp	r1, r4
 800124e:	f240 8100 	bls.w	8001452 <__udivmoddi4+0x28e>
 8001252:	3802      	subs	r0, #2
 8001254:	443c      	add	r4, r7
 8001256:	1a64      	subs	r4, r4, r1
 8001258:	2100      	movs	r1, #0
 800125a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800125e:	b11e      	cbz	r6, 8001268 <__udivmoddi4+0xa4>
 8001260:	2200      	movs	r2, #0
 8001262:	40dc      	lsrs	r4, r3
 8001264:	e9c6 4200 	strd	r4, r2, [r6]
 8001268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800126c:	b902      	cbnz	r2, 8001270 <__udivmoddi4+0xac>
 800126e:	deff      	udf	#255	; 0xff
 8001270:	fab2 f382 	clz	r3, r2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d14f      	bne.n	8001318 <__udivmoddi4+0x154>
 8001278:	1a8d      	subs	r5, r1, r2
 800127a:	2101      	movs	r1, #1
 800127c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001280:	fa1f f882 	uxth.w	r8, r2
 8001284:	fbb5 fcfe 	udiv	ip, r5, lr
 8001288:	fb0e 551c 	mls	r5, lr, ip, r5
 800128c:	fb08 f00c 	mul.w	r0, r8, ip
 8001290:	0c22      	lsrs	r2, r4, #16
 8001292:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001296:	42a8      	cmp	r0, r5
 8001298:	d907      	bls.n	80012aa <__udivmoddi4+0xe6>
 800129a:	197d      	adds	r5, r7, r5
 800129c:	f10c 32ff 	add.w	r2, ip, #4294967295
 80012a0:	d202      	bcs.n	80012a8 <__udivmoddi4+0xe4>
 80012a2:	42a8      	cmp	r0, r5
 80012a4:	f200 80e9 	bhi.w	800147a <__udivmoddi4+0x2b6>
 80012a8:	4694      	mov	ip, r2
 80012aa:	1a2d      	subs	r5, r5, r0
 80012ac:	fbb5 f0fe 	udiv	r0, r5, lr
 80012b0:	fb0e 5510 	mls	r5, lr, r0, r5
 80012b4:	fb08 f800 	mul.w	r8, r8, r0
 80012b8:	b2a4      	uxth	r4, r4
 80012ba:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012be:	45a0      	cmp	r8, r4
 80012c0:	d907      	bls.n	80012d2 <__udivmoddi4+0x10e>
 80012c2:	193c      	adds	r4, r7, r4
 80012c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80012c8:	d202      	bcs.n	80012d0 <__udivmoddi4+0x10c>
 80012ca:	45a0      	cmp	r8, r4
 80012cc:	f200 80d9 	bhi.w	8001482 <__udivmoddi4+0x2be>
 80012d0:	4610      	mov	r0, r2
 80012d2:	eba4 0408 	sub.w	r4, r4, r8
 80012d6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80012da:	e7c0      	b.n	800125e <__udivmoddi4+0x9a>
 80012dc:	428b      	cmp	r3, r1
 80012de:	d908      	bls.n	80012f2 <__udivmoddi4+0x12e>
 80012e0:	2e00      	cmp	r6, #0
 80012e2:	f000 80b1 	beq.w	8001448 <__udivmoddi4+0x284>
 80012e6:	2100      	movs	r1, #0
 80012e8:	e9c6 0500 	strd	r0, r5, [r6]
 80012ec:	4608      	mov	r0, r1
 80012ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012f2:	fab3 f183 	clz	r1, r3
 80012f6:	2900      	cmp	r1, #0
 80012f8:	d14b      	bne.n	8001392 <__udivmoddi4+0x1ce>
 80012fa:	42ab      	cmp	r3, r5
 80012fc:	d302      	bcc.n	8001304 <__udivmoddi4+0x140>
 80012fe:	4282      	cmp	r2, r0
 8001300:	f200 80b9 	bhi.w	8001476 <__udivmoddi4+0x2b2>
 8001304:	1a84      	subs	r4, r0, r2
 8001306:	eb65 0303 	sbc.w	r3, r5, r3
 800130a:	2001      	movs	r0, #1
 800130c:	469e      	mov	lr, r3
 800130e:	2e00      	cmp	r6, #0
 8001310:	d0aa      	beq.n	8001268 <__udivmoddi4+0xa4>
 8001312:	e9c6 4e00 	strd	r4, lr, [r6]
 8001316:	e7a7      	b.n	8001268 <__udivmoddi4+0xa4>
 8001318:	409f      	lsls	r7, r3
 800131a:	f1c3 0220 	rsb	r2, r3, #32
 800131e:	40d1      	lsrs	r1, r2
 8001320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001324:	fbb1 f0fe 	udiv	r0, r1, lr
 8001328:	fa1f f887 	uxth.w	r8, r7
 800132c:	fb0e 1110 	mls	r1, lr, r0, r1
 8001330:	fa24 f202 	lsr.w	r2, r4, r2
 8001334:	409d      	lsls	r5, r3
 8001336:	fb00 fc08 	mul.w	ip, r0, r8
 800133a:	432a      	orrs	r2, r5
 800133c:	0c15      	lsrs	r5, r2, #16
 800133e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001342:	45ac      	cmp	ip, r5
 8001344:	fa04 f403 	lsl.w	r4, r4, r3
 8001348:	d909      	bls.n	800135e <__udivmoddi4+0x19a>
 800134a:	197d      	adds	r5, r7, r5
 800134c:	f100 31ff 	add.w	r1, r0, #4294967295
 8001350:	f080 808f 	bcs.w	8001472 <__udivmoddi4+0x2ae>
 8001354:	45ac      	cmp	ip, r5
 8001356:	f240 808c 	bls.w	8001472 <__udivmoddi4+0x2ae>
 800135a:	3802      	subs	r0, #2
 800135c:	443d      	add	r5, r7
 800135e:	eba5 050c 	sub.w	r5, r5, ip
 8001362:	fbb5 f1fe 	udiv	r1, r5, lr
 8001366:	fb0e 5c11 	mls	ip, lr, r1, r5
 800136a:	fb01 f908 	mul.w	r9, r1, r8
 800136e:	b295      	uxth	r5, r2
 8001370:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001374:	45a9      	cmp	r9, r5
 8001376:	d907      	bls.n	8001388 <__udivmoddi4+0x1c4>
 8001378:	197d      	adds	r5, r7, r5
 800137a:	f101 32ff 	add.w	r2, r1, #4294967295
 800137e:	d274      	bcs.n	800146a <__udivmoddi4+0x2a6>
 8001380:	45a9      	cmp	r9, r5
 8001382:	d972      	bls.n	800146a <__udivmoddi4+0x2a6>
 8001384:	3902      	subs	r1, #2
 8001386:	443d      	add	r5, r7
 8001388:	eba5 0509 	sub.w	r5, r5, r9
 800138c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001390:	e778      	b.n	8001284 <__udivmoddi4+0xc0>
 8001392:	f1c1 0720 	rsb	r7, r1, #32
 8001396:	408b      	lsls	r3, r1
 8001398:	fa22 fc07 	lsr.w	ip, r2, r7
 800139c:	ea4c 0c03 	orr.w	ip, ip, r3
 80013a0:	fa25 f407 	lsr.w	r4, r5, r7
 80013a4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80013a8:	fbb4 f9fe 	udiv	r9, r4, lr
 80013ac:	fa1f f88c 	uxth.w	r8, ip
 80013b0:	fb0e 4419 	mls	r4, lr, r9, r4
 80013b4:	fa20 f307 	lsr.w	r3, r0, r7
 80013b8:	fb09 fa08 	mul.w	sl, r9, r8
 80013bc:	408d      	lsls	r5, r1
 80013be:	431d      	orrs	r5, r3
 80013c0:	0c2b      	lsrs	r3, r5, #16
 80013c2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80013c6:	45a2      	cmp	sl, r4
 80013c8:	fa02 f201 	lsl.w	r2, r2, r1
 80013cc:	fa00 f301 	lsl.w	r3, r0, r1
 80013d0:	d909      	bls.n	80013e6 <__udivmoddi4+0x222>
 80013d2:	eb1c 0404 	adds.w	r4, ip, r4
 80013d6:	f109 30ff 	add.w	r0, r9, #4294967295
 80013da:	d248      	bcs.n	800146e <__udivmoddi4+0x2aa>
 80013dc:	45a2      	cmp	sl, r4
 80013de:	d946      	bls.n	800146e <__udivmoddi4+0x2aa>
 80013e0:	f1a9 0902 	sub.w	r9, r9, #2
 80013e4:	4464      	add	r4, ip
 80013e6:	eba4 040a 	sub.w	r4, r4, sl
 80013ea:	fbb4 f0fe 	udiv	r0, r4, lr
 80013ee:	fb0e 4410 	mls	r4, lr, r0, r4
 80013f2:	fb00 fa08 	mul.w	sl, r0, r8
 80013f6:	b2ad      	uxth	r5, r5
 80013f8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80013fc:	45a2      	cmp	sl, r4
 80013fe:	d908      	bls.n	8001412 <__udivmoddi4+0x24e>
 8001400:	eb1c 0404 	adds.w	r4, ip, r4
 8001404:	f100 35ff 	add.w	r5, r0, #4294967295
 8001408:	d22d      	bcs.n	8001466 <__udivmoddi4+0x2a2>
 800140a:	45a2      	cmp	sl, r4
 800140c:	d92b      	bls.n	8001466 <__udivmoddi4+0x2a2>
 800140e:	3802      	subs	r0, #2
 8001410:	4464      	add	r4, ip
 8001412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001416:	fba0 8902 	umull	r8, r9, r0, r2
 800141a:	eba4 040a 	sub.w	r4, r4, sl
 800141e:	454c      	cmp	r4, r9
 8001420:	46c6      	mov	lr, r8
 8001422:	464d      	mov	r5, r9
 8001424:	d319      	bcc.n	800145a <__udivmoddi4+0x296>
 8001426:	d016      	beq.n	8001456 <__udivmoddi4+0x292>
 8001428:	b15e      	cbz	r6, 8001442 <__udivmoddi4+0x27e>
 800142a:	ebb3 020e 	subs.w	r2, r3, lr
 800142e:	eb64 0405 	sbc.w	r4, r4, r5
 8001432:	fa04 f707 	lsl.w	r7, r4, r7
 8001436:	fa22 f301 	lsr.w	r3, r2, r1
 800143a:	431f      	orrs	r7, r3
 800143c:	40cc      	lsrs	r4, r1
 800143e:	e9c6 7400 	strd	r7, r4, [r6]
 8001442:	2100      	movs	r1, #0
 8001444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001448:	4631      	mov	r1, r6
 800144a:	4630      	mov	r0, r6
 800144c:	e70c      	b.n	8001268 <__udivmoddi4+0xa4>
 800144e:	468c      	mov	ip, r1
 8001450:	e6eb      	b.n	800122a <__udivmoddi4+0x66>
 8001452:	4610      	mov	r0, r2
 8001454:	e6ff      	b.n	8001256 <__udivmoddi4+0x92>
 8001456:	4543      	cmp	r3, r8
 8001458:	d2e6      	bcs.n	8001428 <__udivmoddi4+0x264>
 800145a:	ebb8 0e02 	subs.w	lr, r8, r2
 800145e:	eb69 050c 	sbc.w	r5, r9, ip
 8001462:	3801      	subs	r0, #1
 8001464:	e7e0      	b.n	8001428 <__udivmoddi4+0x264>
 8001466:	4628      	mov	r0, r5
 8001468:	e7d3      	b.n	8001412 <__udivmoddi4+0x24e>
 800146a:	4611      	mov	r1, r2
 800146c:	e78c      	b.n	8001388 <__udivmoddi4+0x1c4>
 800146e:	4681      	mov	r9, r0
 8001470:	e7b9      	b.n	80013e6 <__udivmoddi4+0x222>
 8001472:	4608      	mov	r0, r1
 8001474:	e773      	b.n	800135e <__udivmoddi4+0x19a>
 8001476:	4608      	mov	r0, r1
 8001478:	e749      	b.n	800130e <__udivmoddi4+0x14a>
 800147a:	f1ac 0c02 	sub.w	ip, ip, #2
 800147e:	443d      	add	r5, r7
 8001480:	e713      	b.n	80012aa <__udivmoddi4+0xe6>
 8001482:	3802      	subs	r0, #2
 8001484:	443c      	add	r4, r7
 8001486:	e724      	b.n	80012d2 <__udivmoddi4+0x10e>

08001488 <__aeabi_idiv0>:
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop

0800148c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800148c:	b5b0      	push	{r4, r5, r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001492:	f000 fe4b 	bl	800212c <HAL_Init>

  /* USER CODE BEGIN Init */
  elyoya1 = 0;
 8001496:	4b56      	ldr	r3, [pc, #344]	; (80015f0 <main+0x164>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
  elyoya2 = 0;
 800149c:	4b55      	ldr	r3, [pc, #340]	; (80015f4 <main+0x168>)
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a2:	f000 f8c9 	bl	8001638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a6:	f000 fa0d 	bl	80018c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80014aa:	f000 f9f3 	bl	8001894 <MX_DMA_Init>
  MX_ADC1_Init();
 80014ae:	f000 f923 	bl	80016f8 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80014b2:	f000 f9c5 	bl	8001840 <MX_USART3_UART_Init>
  MX_ADC2_Init();
 80014b6:	f000 f971 	bl	800179c <MX_ADC2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80014ba:	f000 f8f8 	bl	80016ae <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  char str[1];
  str[0] = 0x41;
 80014be:	2341      	movs	r3, #65	; 0x41
 80014c0:	713b      	strb	r3, [r7, #4]

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)signal_1, ADC_BUF_LEN );
 80014c2:	2220      	movs	r2, #32
 80014c4:	494c      	ldr	r1, [pc, #304]	; (80015f8 <main+0x16c>)
 80014c6:	484d      	ldr	r0, [pc, #308]	; (80015fc <main+0x170>)
 80014c8:	f001 f846 	bl	8002558 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)signal_2, ADC_BUF_LEN );
 80014cc:	2220      	movs	r2, #32
 80014ce:	494c      	ldr	r1, [pc, #304]	; (8001600 <main+0x174>)
 80014d0:	484c      	ldr	r0, [pc, #304]	; (8001604 <main+0x178>)
 80014d2:	f001 f841 	bl	8002558 <HAL_ADC_Start_DMA>


  HAL_UART_Transmit(&huart3, (uint8_t*)str, sizeof(str), HAL_MAX_DELAY ); // just to debug
 80014d6:	1d39      	adds	r1, r7, #4
 80014d8:	f04f 33ff 	mov.w	r3, #4294967295
 80014dc:	2201      	movs	r2, #1
 80014de:	484a      	ldr	r0, [pc, #296]	; (8001608 <main+0x17c>)
 80014e0:	f002 ff25 	bl	800432e <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)signal_1, ADC_BUF_LEN );
 80014e4:	2220      	movs	r2, #32
 80014e6:	4944      	ldr	r1, [pc, #272]	; (80015f8 <main+0x16c>)
 80014e8:	4844      	ldr	r0, [pc, #272]	; (80015fc <main+0x170>)
 80014ea:	f001 f835 	bl	8002558 <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)signal_2, ADC_BUF_LEN );
 80014ee:	2220      	movs	r2, #32
 80014f0:	4943      	ldr	r1, [pc, #268]	; (8001600 <main+0x174>)
 80014f2:	4844      	ldr	r0, [pc, #272]	; (8001604 <main+0x178>)
 80014f4:	f001 f830 	bl	8002558 <HAL_ADC_Start_DMA>
	  if (elyoya1 ==1) {
 80014f8:	4b3d      	ldr	r3, [pc, #244]	; (80015f0 <main+0x164>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d1f1      	bne.n	80014e4 <main+0x58>


		  HAL_Delay(100);
 8001500:	2064      	movs	r0, #100	; 0x64
 8001502:	f000 fe81 	bl	8002208 <HAL_Delay>
		  char test[1] = {0x48};  // used for debugging
 8001506:	2348      	movs	r3, #72	; 0x48
 8001508:	703b      	strb	r3, [r7, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t*)test, sizeof(test), HAL_MAX_DELAY );
 800150a:	4639      	mov	r1, r7
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
 8001510:	2201      	movs	r2, #1
 8001512:	483d      	ldr	r0, [pc, #244]	; (8001608 <main+0x17c>)
 8001514:	f002 ff0b 	bl	800432e <HAL_UART_Transmit>


			// here we call the filtering and cross-correlation algorithms
		  p_1 = FIRFilter_Init();
 8001518:	f000 fa00 	bl	800191c <FIRFilter_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	4a3b      	ldr	r2, [pc, #236]	; (800160c <main+0x180>)
 8001520:	6013      	str	r3, [r2, #0]
		  p_2 = FIRFilter_Init();
 8001522:	f000 f9fb 	bl	800191c <FIRFilter_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	4a39      	ldr	r2, [pc, #228]	; (8001610 <main+0x184>)
 800152a:	6013      	str	r3, [r2, #0]

		  p_1 = FIRFilter_Filter(lowpassfilter, signal_1);
 800152c:	4932      	ldr	r1, [pc, #200]	; (80015f8 <main+0x16c>)
 800152e:	4839      	ldr	r0, [pc, #228]	; (8001614 <main+0x188>)
 8001530:	f000 fa0e 	bl	8001950 <FIRFilter_Filter>
 8001534:	4603      	mov	r3, r0
 8001536:	4a35      	ldr	r2, [pc, #212]	; (800160c <main+0x180>)
 8001538:	6013      	str	r3, [r2, #0]
		  p_2 = FIRFilter_Filter(lowpassfilter, signal_2);
 800153a:	4931      	ldr	r1, [pc, #196]	; (8001600 <main+0x174>)
 800153c:	4835      	ldr	r0, [pc, #212]	; (8001614 <main+0x188>)
 800153e:	f000 fa07 	bl	8001950 <FIRFilter_Filter>
 8001542:	4603      	mov	r3, r0
 8001544:	4a32      	ldr	r2, [pc, #200]	; (8001610 <main+0x184>)
 8001546:	6013      	str	r3, [r2, #0]

		  phi = CrossCorrelation(p_1, p_2, p_sum, sum); //computes phi from the 2 signals
 8001548:	4b30      	ldr	r3, [pc, #192]	; (800160c <main+0x180>)
 800154a:	6818      	ldr	r0, [r3, #0]
 800154c:	4b30      	ldr	r3, [pc, #192]	; (8001610 <main+0x184>)
 800154e:	6819      	ldr	r1, [r3, #0]
 8001550:	4b31      	ldr	r3, [pc, #196]	; (8001618 <main+0x18c>)
 8001552:	4a32      	ldr	r2, [pc, #200]	; (800161c <main+0x190>)
 8001554:	f000 fa4c 	bl	80019f0 <CrossCorrelation>
 8001558:	4603      	mov	r3, r0
 800155a:	4a31      	ldr	r2, [pc, #196]	; (8001620 <main+0x194>)
 800155c:	6013      	str	r3, [r2, #0]
		  theta = Theta(phi);  // computes theta from phi
 800155e:	4b30      	ldr	r3, [pc, #192]	; (8001620 <main+0x194>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fa24 	bl	80019b0 <Theta>
 8001568:	4603      	mov	r3, r0
 800156a:	4a2e      	ldr	r2, [pc, #184]	; (8001624 <main+0x198>)
 800156c:	6013      	str	r3, [r2, #0]
		  phi = 0.0f; // reset phi
 800156e:	4b2c      	ldr	r3, [pc, #176]	; (8001620 <main+0x194>)
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	601a      	str	r2, [r3, #0]

		  a[0] = theta;
 8001576:	4b2b      	ldr	r3, [pc, #172]	; (8001624 <main+0x198>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a2b      	ldr	r2, [pc, #172]	; (8001628 <main+0x19c>)
 800157c:	6013      	str	r3, [r2, #0]

			//sprintf(b, "%f", theta);
		  sprintf(b,"%d.%02u", (int) theta, (int) fabs(((theta - (int) theta ) * 100)));
 800157e:	4b29      	ldr	r3, [pc, #164]	; (8001624 <main+0x198>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fde0 	bl	8001148 <__aeabi_f2iz>
 8001588:	4605      	mov	r5, r0
 800158a:	4b26      	ldr	r3, [pc, #152]	; (8001624 <main+0x198>)
 800158c:	681c      	ldr	r4, [r3, #0]
 800158e:	4b25      	ldr	r3, [pc, #148]	; (8001624 <main+0x198>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fdd8 	bl	8001148 <__aeabi_f2iz>
 8001598:	4603      	mov	r3, r0
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fbba 	bl	8000d14 <__aeabi_i2f>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4619      	mov	r1, r3
 80015a4:	4620      	mov	r0, r4
 80015a6:	f7ff faff 	bl	8000ba8 <__aeabi_fsub>
 80015aa:	4603      	mov	r3, r0
 80015ac:	491f      	ldr	r1, [pc, #124]	; (800162c <main+0x1a0>)
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fc04 	bl	8000dbc <__aeabi_fmul>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fdc4 	bl	8001148 <__aeabi_f2iz>
 80015c0:	4603      	mov	r3, r0
 80015c2:	462a      	mov	r2, r5
 80015c4:	491a      	ldr	r1, [pc, #104]	; (8001630 <main+0x1a4>)
 80015c6:	481b      	ldr	r0, [pc, #108]	; (8001634 <main+0x1a8>)
 80015c8:	f004 f844 	bl	8005654 <siprintf>

		  HAL_UART_Transmit(&huart3, (uint8_t*)b, sizeof(b), HAL_MAX_DELAY );
 80015cc:	f04f 33ff 	mov.w	r3, #4294967295
 80015d0:	2214      	movs	r2, #20
 80015d2:	4918      	ldr	r1, [pc, #96]	; (8001634 <main+0x1a8>)
 80015d4:	480c      	ldr	r0, [pc, #48]	; (8001608 <main+0x17c>)
 80015d6:	f002 feaa 	bl	800432e <HAL_UART_Transmit>

		  elyoya1 = 0;
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <main+0x164>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
		  elyoya2 = 0;
 80015e0:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <main+0x168>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]

		  HAL_Delay(500);
 80015e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015ea:	f000 fe0d 	bl	8002208 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)signal_1, ADC_BUF_LEN );
 80015ee:	e779      	b.n	80014e4 <main+0x58>
 80015f0:	2000027c 	.word	0x2000027c
 80015f4:	20000280 	.word	0x20000280
 80015f8:	20000630 	.word	0x20000630
 80015fc:	20000520 	.word	0x20000520
 8001600:	20000430 	.word	0x20000430
 8001604:	200003e8 	.word	0x200003e8
 8001608:	200003a4 	.word	0x200003a4
 800160c:	200005c8 	.word	0x200005c8
 8001610:	200004f8 	.word	0x200004f8
 8001614:	20000000 	.word	0x20000000
 8001618:	200004b0 	.word	0x200004b0
 800161c:	200004fc 	.word	0x200004fc
 8001620:	200004f4 	.word	0x200004f4
 8001624:	2000051c 	.word	0x2000051c
 8001628:	2000062c 	.word	0x2000062c
 800162c:	42c80000 	.word	0x42c80000
 8001630:	080080a0 	.word	0x080080a0
 8001634:	20000390 	.word	0x20000390

08001638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b092      	sub	sp, #72	; 0x48
 800163c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163e:	f107 0318 	add.w	r3, r7, #24
 8001642:	2230      	movs	r2, #48	; 0x30
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f003 fb84 	bl	8004d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
 8001658:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800165a:	2302      	movs	r3, #2
 800165c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800165e:	2301      	movs	r3, #1
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001662:	2310      	movs	r3, #16
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001666:	2300      	movs	r3, #0
 8001668:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166a:	f107 0318 	add.w	r3, r7, #24
 800166e:	4618      	mov	r0, r3
 8001670:	f002 f9d0 	bl	8003a14 <HAL_RCC_OscConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800167a:	f000 f949 	bl	8001910 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167e:	230f      	movs	r3, #15
 8001680:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f002 fc0c 	bl	8003eb4 <HAL_RCC_ClockConfig>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80016a2:	f000 f935 	bl	8001910 <Error_Handler>
  }
}
 80016a6:	bf00      	nop
 80016a8:	3748      	adds	r7, #72	; 0x48
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	af00      	add	r7, sp, #0
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2102      	movs	r1, #2
 80016b6:	203a      	movs	r0, #58	; 0x3a
 80016b8:	f001 fbd9 	bl	8002e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80016bc:	203a      	movs	r0, #58	; 0x3a
 80016be:	f001 fbf2 	bl	8002ea6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2102      	movs	r1, #2
 80016c6:	2038      	movs	r0, #56	; 0x38
 80016c8:	f001 fbd1 	bl	8002e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016cc:	2038      	movs	r0, #56	; 0x38
 80016ce:	f001 fbea 	bl	8002ea6 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2101      	movs	r1, #1
 80016d6:	2027      	movs	r0, #39	; 0x27
 80016d8:	f001 fbc9 	bl	8002e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016dc:	2027      	movs	r0, #39	; 0x27
 80016de:	f001 fbe2 	bl	8002ea6 <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 3, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2103      	movs	r1, #3
 80016e6:	2012      	movs	r0, #18
 80016e8:	f001 fbc1 	bl	8002e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 80016ec:	2012      	movs	r0, #18
 80016ee:	f001 fbda 	bl	8002ea6 <HAL_NVIC_EnableIRQ>
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016fe:	463b      	mov	r3, r7
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800170a:	4b21      	ldr	r3, [pc, #132]	; (8001790 <MX_ADC1_Init+0x98>)
 800170c:	4a21      	ldr	r2, [pc, #132]	; (8001794 <MX_ADC1_Init+0x9c>)
 800170e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001710:	4b1f      	ldr	r3, [pc, #124]	; (8001790 <MX_ADC1_Init+0x98>)
 8001712:	2200      	movs	r2, #0
 8001714:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001716:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <MX_ADC1_Init+0x98>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800171c:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <MX_ADC1_Init+0x98>)
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <MX_ADC1_Init+0x98>)
 8001724:	2201      	movs	r2, #1
 8001726:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001728:	4b19      	ldr	r3, [pc, #100]	; (8001790 <MX_ADC1_Init+0x98>)
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001730:	4b17      	ldr	r3, [pc, #92]	; (8001790 <MX_ADC1_Init+0x98>)
 8001732:	2200      	movs	r2, #0
 8001734:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001736:	4b16      	ldr	r3, [pc, #88]	; (8001790 <MX_ADC1_Init+0x98>)
 8001738:	4a17      	ldr	r2, [pc, #92]	; (8001798 <MX_ADC1_Init+0xa0>)
 800173a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <MX_ADC1_Init+0x98>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <MX_ADC1_Init+0x98>)
 8001744:	2201      	movs	r2, #1
 8001746:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <MX_ADC1_Init+0x98>)
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <MX_ADC1_Init+0x98>)
 8001752:	2201      	movs	r2, #1
 8001754:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001756:	480e      	ldr	r0, [pc, #56]	; (8001790 <MX_ADC1_Init+0x98>)
 8001758:	f000 fd7a 	bl	8002250 <HAL_ADC_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001762:	f000 f8d5 	bl	8001910 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001766:	2300      	movs	r3, #0
 8001768:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800176a:	2301      	movs	r3, #1
 800176c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001772:	463b      	mov	r3, r7
 8001774:	4619      	mov	r1, r3
 8001776:	4806      	ldr	r0, [pc, #24]	; (8001790 <MX_ADC1_Init+0x98>)
 8001778:	f000 fff0 	bl	800275c <HAL_ADC_ConfigChannel>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001782:	f000 f8c5 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000520 	.word	0x20000520
 8001794:	40012000 	.word	0x40012000
 8001798:	0f000001 	.word	0x0f000001

0800179c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017a2:	463b      	mov	r3, r7
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80017ae:	4b21      	ldr	r3, [pc, #132]	; (8001834 <MX_ADC2_Init+0x98>)
 80017b0:	4a21      	ldr	r2, [pc, #132]	; (8001838 <MX_ADC2_Init+0x9c>)
 80017b2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017b4:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <MX_ADC2_Init+0x98>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80017ba:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <MX_ADC2_Init+0x98>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80017c0:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <MX_ADC2_Init+0x98>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80017c6:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <MX_ADC2_Init+0x98>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <MX_ADC2_Init+0x98>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017d4:	4b17      	ldr	r3, [pc, #92]	; (8001834 <MX_ADC2_Init+0x98>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <MX_ADC2_Init+0x98>)
 80017dc:	4a17      	ldr	r2, [pc, #92]	; (800183c <MX_ADC2_Init+0xa0>)
 80017de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <MX_ADC2_Init+0x98>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80017e6:	4b13      	ldr	r3, [pc, #76]	; (8001834 <MX_ADC2_Init+0x98>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <MX_ADC2_Init+0x98>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <MX_ADC2_Init+0x98>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80017fa:	480e      	ldr	r0, [pc, #56]	; (8001834 <MX_ADC2_Init+0x98>)
 80017fc:	f000 fd28 	bl	8002250 <HAL_ADC_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001806:	f000 f883 	bl	8001910 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800180a:	2303      	movs	r3, #3
 800180c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800180e:	2301      	movs	r3, #1
 8001810:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001816:	463b      	mov	r3, r7
 8001818:	4619      	mov	r1, r3
 800181a:	4806      	ldr	r0, [pc, #24]	; (8001834 <MX_ADC2_Init+0x98>)
 800181c:	f000 ff9e 	bl	800275c <HAL_ADC_ConfigChannel>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001826:	f000 f873 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200003e8 	.word	0x200003e8
 8001838:	40012100 	.word	0x40012100
 800183c:	0f000001 	.word	0x0f000001

08001840 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <MX_USART3_UART_Init+0x4c>)
 8001846:	4a12      	ldr	r2, [pc, #72]	; (8001890 <MX_USART3_UART_Init+0x50>)
 8001848:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <MX_USART3_UART_Init+0x4c>)
 800184c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001850:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <MX_USART3_UART_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <MX_USART3_UART_Init+0x4c>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <MX_USART3_UART_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <MX_USART3_UART_Init+0x4c>)
 8001866:	220c      	movs	r2, #12
 8001868:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <MX_USART3_UART_Init+0x4c>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <MX_USART3_UART_Init+0x4c>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_USART3_UART_Init+0x4c>)
 8001878:	f002 fd0c 	bl	8004294 <HAL_UART_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001882:	f000 f845 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200003a4 	.word	0x200003a4
 8001890:	40004800 	.word	0x40004800

08001894 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <MX_DMA_Init+0x2c>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <MX_DMA_Init+0x2c>)
 80018a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <MX_DMA_Init+0x2c>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]

}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	40023800 	.word	0x40023800

080018c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <MX_GPIO_Init+0x48>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a0e      	ldr	r2, [pc, #56]	; (800190c <MX_GPIO_Init+0x48>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_GPIO_Init+0x48>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <MX_GPIO_Init+0x48>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a07      	ldr	r2, [pc, #28]	; (800190c <MX_GPIO_Init+0x48>)
 80018f0:	f043 0308 	orr.w	r3, r3, #8
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <MX_GPIO_Init+0x48>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	683b      	ldr	r3, [r7, #0]

}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	40023800 	.word	0x40023800

08001910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <FIRFilter_Init>:
#include <stdint.h>

//when changing the size of the buffer, make sure you change the size of the arrays in FIRFilter_Init and
//FIRFilter_Filter, in pipy.h change the half_period

float* FIRFilter_Init() {
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0

	static float filtered_output[32];

	for (uint8_t n=0; n< 32; n++) { // clear filter buffer
 8001922:	2300      	movs	r3, #0
 8001924:	71fb      	strb	r3, [r7, #7]
 8001926:	e008      	b.n	800193a <FIRFilter_Init+0x1e>
		filtered_output[n] = 0.0f;
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	4a08      	ldr	r2, [pc, #32]	; (800194c <FIRFilter_Init+0x30>)
 800192c:	f04f 0100 	mov.w	r1, #0
 8001930:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint8_t n=0; n< 32; n++) { // clear filter buffer
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	3301      	adds	r3, #1
 8001938:	71fb      	strb	r3, [r7, #7]
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	2b1f      	cmp	r3, #31
 800193e:	d9f3      	bls.n	8001928 <FIRFilter_Init+0xc>
	}
	return filtered_output;
 8001940:	4b02      	ldr	r3, [pc, #8]	; (800194c <FIRFilter_Init+0x30>)
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	20000284 	.word	0x20000284

08001950 <FIRFilter_Filter>:


float* FIRFilter_Filter(float filter[], float raw_data[]) {
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]

	int n = 32;
 800195a:	2320      	movs	r3, #32
 800195c:	60fb      	str	r3, [r7, #12]
	static float filtered_output[32];

	for (uint8_t j = 0; j< 32; j++) {
 800195e:	2300      	movs	r3, #0
 8001960:	72fb      	strb	r3, [r7, #11]
 8001962:	e01a      	b.n	800199a <FIRFilter_Filter+0x4a>

		filtered_output[j] = filter[j] * raw_data[n-j];
 8001964:	7afb      	ldrb	r3, [r7, #11]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	4413      	add	r3, r2
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	7afb      	ldrb	r3, [r7, #11]
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	4413      	add	r3, r2
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	7afc      	ldrb	r4, [r7, #11]
 800197e:	4619      	mov	r1, r3
 8001980:	f7ff fa1c 	bl	8000dbc <__aeabi_fmul>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <FIRFilter_Filter+0x5c>)
 800198a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		n--;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	3b01      	subs	r3, #1
 8001992:	60fb      	str	r3, [r7, #12]
	for (uint8_t j = 0; j< 32; j++) {
 8001994:	7afb      	ldrb	r3, [r7, #11]
 8001996:	3301      	adds	r3, #1
 8001998:	72fb      	strb	r3, [r7, #11]
 800199a:	7afb      	ldrb	r3, [r7, #11]
 800199c:	2b1f      	cmp	r3, #31
 800199e:	d9e1      	bls.n	8001964 <FIRFilter_Filter+0x14>
	}
	return filtered_output;
 80019a0:	4b02      	ldr	r3, [pc, #8]	; (80019ac <FIRFilter_Filter+0x5c>)
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd90      	pop	{r4, r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000304 	.word	0x20000304

080019b0 <Theta>:


float Theta(float phi) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

	return asin(phi/pi);
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <Theta+0x3c>)
 80019ba:	4619      	mov	r1, r3
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff fab1 	bl	8000f24 <__aeabi_fdiv>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fd6b 	bl	80004a0 <__aeabi_f2d>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4610      	mov	r0, r2
 80019d0:	4619      	mov	r1, r3
 80019d2:	f006 f877 	bl	8007ac4 <asin>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	f7ff f88f 	bl	8000b00 <__aeabi_d2f>
 80019e2:	4603      	mov	r3, r0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40490fd8 	.word	0x40490fd8

080019f0 <CrossCorrelation>:

// cross correlation
float CrossCorrelation(float signal_1[], float signal_2[],float p_sum[], float sum[]) {
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b08d      	sub	sp, #52	; 0x34
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
 80019fc:	603b      	str	r3, [r7, #0]
	int n = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	62fb      	str	r3, [r7, #44]	; 0x2c
	int r = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
	float part_total=0;     // product of two samples
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
	float total = 0;        // sum of all products in a batch
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
	float phase_shift = 0; //phase shift in rads
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
	float samples_p_cycle = 2 * half_period; //samples per cycle (2* half_period)
 8001a18:	2308      	movs	r3, #8
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff f979 	bl	8000d14 <__aeabi_i2f>
 8001a22:	4603      	mov	r3, r0
 8001a24:	61bb      	str	r3, [r7, #24]
	int maxIdx = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]

	printf(" %s \n", "Here are the totals");
 8001a2a:	4937      	ldr	r1, [pc, #220]	; (8001b08 <CrossCorrelation+0x118>)
 8001a2c:	4837      	ldr	r0, [pc, #220]	; (8001b0c <CrossCorrelation+0x11c>)
 8001a2e:	f003 fdf9 	bl	8005624 <iprintf>
	while (r <= (len_signal - half_period )) {   // shift the first signal and cross-correlate
 8001a32:	e036      	b.n	8001aa2 <CrossCorrelation+0xb2>
		while (n <=  half_period) {  // cycle over each pair of samples, multiply, and store
			part_total = signal_1[n] * signal_2[n+r];
 8001a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	6818      	ldr	r0, [r3, #0]
 8001a3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a42:	4413      	add	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	4413      	add	r3, r2
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f7ff f9b5 	bl	8000dbc <__aeabi_fmul>
 8001a52:	4603      	mov	r3, r0
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
			p_sum[n+r*(half_period+1)] = part_total;
 8001a56:	2308      	movs	r3, #8
 8001a58:	3301      	adds	r3, #1
 8001a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a5c:	fb02 f203 	mul.w	r2, r2, r3
 8001a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a62:	4413      	add	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a6c:	601a      	str	r2, [r3, #0]
			n++;
 8001a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a70:	3301      	adds	r3, #1
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
		while (n <=  half_period) {  // cycle over each pair of samples, multiply, and store
 8001a74:	2208      	movs	r2, #8
 8001a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	dddb      	ble.n	8001a34 <CrossCorrelation+0x44>
		}

		total = DoSum(r, p_sum); // adds all the terms in p_sum
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a80:	f000 f848 	bl	8001b14 <DoSum>
 8001a84:	6238      	str	r0, [r7, #32]
		sum[r] = total ;// store the total
 8001a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	6a3a      	ldr	r2, [r7, #32]
 8001a90:	601a      	str	r2, [r3, #0]

		total = 0;
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	623b      	str	r3, [r7, #32]
		n = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
		r++;
 8001a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	62bb      	str	r3, [r7, #40]	; 0x28
	while (r <= (len_signal - half_period )) {   // shift the first signal and cross-correlate
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	2308      	movs	r3, #8
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	dde2      	ble.n	8001a74 <CrossCorrelation+0x84>
		}

	float max_so_far = FindMax(sum);
 8001aae:	6838      	ldr	r0, [r7, #0]
 8001ab0:	f000 f858 	bl	8001b64 <FindMax>
 8001ab4:	6138      	str	r0, [r7, #16]

	maxIdx = IndexFind(sum, max_so_far );  // find its index
 8001ab6:	6939      	ldr	r1, [r7, #16]
 8001ab8:	6838      	ldr	r0, [r7, #0]
 8001aba:	f000 f87d 	bl	8001bb8 <IndexFind>
 8001abe:	6178      	str	r0, [r7, #20]

	phase_shift = 2*pi- (maxIdx * 2 * pi)/samples_p_cycle;
 8001ac0:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <CrossCorrelation+0x120>)
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff f871 	bl	8000bac <__addsf3>
 8001aca:	4603      	mov	r3, r0
 8001acc:	461c      	mov	r4, r3
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff f91e 	bl	8000d14 <__aeabi_i2f>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4a0d      	ldr	r2, [pc, #52]	; (8001b10 <CrossCorrelation+0x120>)
 8001adc:	4611      	mov	r1, r2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff f96c 	bl	8000dbc <__aeabi_fmul>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	69b9      	ldr	r1, [r7, #24]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fa1b 	bl	8000f24 <__aeabi_fdiv>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4619      	mov	r1, r3
 8001af2:	4620      	mov	r0, r4
 8001af4:	f7ff f858 	bl	8000ba8 <__aeabi_fsub>
 8001af8:	4603      	mov	r3, r0
 8001afa:	61fb      	str	r3, [r7, #28]
	return phase_shift;
 8001afc:	69fb      	ldr	r3, [r7, #28]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3734      	adds	r7, #52	; 0x34
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd90      	pop	{r4, r7, pc}
 8001b06:	bf00      	nop
 8001b08:	080080a8 	.word	0x080080a8
 8001b0c:	080080bc 	.word	0x080080bc
 8001b10:	40490fd8 	.word	0x40490fd8

08001b14 <DoSum>:


float DoSum(int r, float p_sum[]) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
	float total =0;
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
	int n = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]
	while ( n <= half_period) {
 8001b28:	e013      	b.n	8001b52 <DoSum+0x3e>
		total = total + p_sum[n+r*(half_period+1)];
 8001b2a:	2308      	movs	r3, #8
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	fb02 f203 	mul.w	r2, r2, r3
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	4413      	add	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4619      	mov	r1, r3
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f7ff f832 	bl	8000bac <__addsf3>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	60fb      	str	r3, [r7, #12]
		n++;
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	60bb      	str	r3, [r7, #8]
	while ( n <= half_period) {
 8001b52:	2208      	movs	r2, #8
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	4293      	cmp	r3, r2
 8001b58:	dde7      	ble.n	8001b2a <DoSum+0x16>
	}
	return total;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <FindMax>:

float FindMax(float sum[]){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	int n = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]
	float max_so_far = sum[0];
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60bb      	str	r3, [r7, #8]

	while ( n < len_signal - half_period+1 ) {
 8001b76:	e014      	b.n	8001ba2 <FindMax+0x3e>

				if ( max_so_far < sum[n]) { // compares this node with max_so_far
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	4413      	add	r3, r2
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4619      	mov	r1, r3
 8001b84:	68b8      	ldr	r0, [r7, #8]
 8001b86:	f7ff fab7 	bl	80010f8 <__aeabi_fcmplt>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <FindMax+0x38>
					max_so_far = sum[n];  //if this node is superior, it becomes max_sofar
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	4413      	add	r3, r2
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	60bb      	str	r3, [r7, #8]
				}
				n++;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
	while ( n < len_signal - half_period+1 ) {
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	2308      	movs	r3, #8
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	dde4      	ble.n	8001b78 <FindMax+0x14>
			}
	return max_so_far;
 8001bae:	68bb      	ldr	r3, [r7, #8]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <IndexFind>:

int IndexFind(float sum[], float max_so_far) { // @suppress("No return")
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]

	int i = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
	while ( i < len_signal - half_period+1) { // traverse through the tree to find the index matching this value
 8001bc6:	e010      	b.n	8001bea <IndexFind+0x32>
		if (sum[i] == max_so_far) {
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	4413      	add	r3, r2
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	6838      	ldr	r0, [r7, #0]
 8001bd6:	f7ff fa85 	bl	80010e4 <__aeabi_fcmpeq>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <IndexFind+0x2c>
			return i;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	e009      	b.n	8001bf8 <IndexFind+0x40>
		}
		i++;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	3301      	adds	r3, #1
 8001be8:	60fb      	str	r3, [r7, #12]
	while ( i < len_signal - half_period+1) { // traverse through the tree to find the index matching this value
 8001bea:	2220      	movs	r2, #32
 8001bec:	2308      	movs	r3, #8
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	dde8      	ble.n	8001bc8 <IndexFind+0x10>
	}
	return 0;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <HAL_MspInit+0x48>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	4a0e      	ldr	r2, [pc, #56]	; (8001c48 <HAL_MspInit+0x48>)
 8001c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c14:	6453      	str	r3, [r2, #68]	; 0x44
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <HAL_MspInit+0x48>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	603b      	str	r3, [r7, #0]
 8001c26:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <HAL_MspInit+0x48>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	4a07      	ldr	r2, [pc, #28]	; (8001c48 <HAL_MspInit+0x48>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c30:	6413      	str	r3, [r2, #64]	; 0x40
 8001c32:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <HAL_MspInit+0x48>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	603b      	str	r3, [r7, #0]
 8001c3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr
 8001c48:	40023800 	.word	0x40023800

08001c4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08c      	sub	sp, #48	; 0x30
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a5d      	ldr	r2, [pc, #372]	; (8001de0 <HAL_ADC_MspInit+0x194>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d157      	bne.n	8001d1e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
 8001c72:	4b5c      	ldr	r3, [pc, #368]	; (8001de4 <HAL_ADC_MspInit+0x198>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	4a5b      	ldr	r2, [pc, #364]	; (8001de4 <HAL_ADC_MspInit+0x198>)
 8001c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7e:	4b59      	ldr	r3, [pc, #356]	; (8001de4 <HAL_ADC_MspInit+0x198>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c86:	61bb      	str	r3, [r7, #24]
 8001c88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	4b55      	ldr	r3, [pc, #340]	; (8001de4 <HAL_ADC_MspInit+0x198>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a54      	ldr	r2, [pc, #336]	; (8001de4 <HAL_ADC_MspInit+0x198>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b52      	ldr	r3, [pc, #328]	; (8001de4 <HAL_ADC_MspInit+0x198>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001caa:	2303      	movs	r3, #3
 8001cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb2:	f107 031c 	add.w	r3, r7, #28
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	484b      	ldr	r0, [pc, #300]	; (8001de8 <HAL_ADC_MspInit+0x19c>)
 8001cba:	f001 fd0d 	bl	80036d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001cbe:	4b4b      	ldr	r3, [pc, #300]	; (8001dec <HAL_ADC_MspInit+0x1a0>)
 8001cc0:	4a4b      	ldr	r2, [pc, #300]	; (8001df0 <HAL_ADC_MspInit+0x1a4>)
 8001cc2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001cc4:	4b49      	ldr	r3, [pc, #292]	; (8001dec <HAL_ADC_MspInit+0x1a0>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cca:	4b48      	ldr	r3, [pc, #288]	; (8001dec <HAL_ADC_MspInit+0x1a0>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cd0:	4b46      	ldr	r3, [pc, #280]	; (8001dec <HAL_ADC_MspInit+0x1a0>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cd6:	4b45      	ldr	r3, [pc, #276]	; (8001dec <HAL_ADC_MspInit+0x1a0>)
 8001cd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cdc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cde:	4b43      	ldr	r3, [pc, #268]	; (8001dec <HAL_ADC_MspInit+0x1a0>)
 8001ce0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ce4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ce6:	4b41      	ldr	r3, [pc, #260]	; (8001dec <HAL_ADC_MspInit+0x1a0>)
 8001ce8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001cee:	4b3f      	ldr	r3, [pc, #252]	; (8001dec <HAL_ADC_MspInit+0x1a0>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001cf4:	4b3d      	ldr	r3, [pc, #244]	; (8001dec <HAL_ADC_MspInit+0x1a0>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cfa:	4b3c      	ldr	r3, [pc, #240]	; (8001dec <HAL_ADC_MspInit+0x1a0>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d00:	483a      	ldr	r0, [pc, #232]	; (8001dec <HAL_ADC_MspInit+0x1a0>)
 8001d02:	f001 f8eb 	bl	8002edc <HAL_DMA_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001d0c:	f7ff fe00 	bl	8001910 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a36      	ldr	r2, [pc, #216]	; (8001dec <HAL_ADC_MspInit+0x1a0>)
 8001d14:	639a      	str	r2, [r3, #56]	; 0x38
 8001d16:	4a35      	ldr	r2, [pc, #212]	; (8001dec <HAL_ADC_MspInit+0x1a0>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001d1c:	e05c      	b.n	8001dd8 <HAL_ADC_MspInit+0x18c>
  else if(hadc->Instance==ADC2)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a34      	ldr	r2, [pc, #208]	; (8001df4 <HAL_ADC_MspInit+0x1a8>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d157      	bne.n	8001dd8 <HAL_ADC_MspInit+0x18c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001d28:	2300      	movs	r3, #0
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	4b2d      	ldr	r3, [pc, #180]	; (8001de4 <HAL_ADC_MspInit+0x198>)
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d30:	4a2c      	ldr	r2, [pc, #176]	; (8001de4 <HAL_ADC_MspInit+0x198>)
 8001d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d36:	6453      	str	r3, [r2, #68]	; 0x44
 8001d38:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <HAL_ADC_MspInit+0x198>)
 8001d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <HAL_ADC_MspInit+0x198>)
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4c:	4a25      	ldr	r2, [pc, #148]	; (8001de4 <HAL_ADC_MspInit+0x198>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6313      	str	r3, [r2, #48]	; 0x30
 8001d54:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <HAL_ADC_MspInit+0x198>)
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d60:	2308      	movs	r3, #8
 8001d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d64:	2303      	movs	r3, #3
 8001d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6c:	f107 031c 	add.w	r3, r7, #28
 8001d70:	4619      	mov	r1, r3
 8001d72:	481d      	ldr	r0, [pc, #116]	; (8001de8 <HAL_ADC_MspInit+0x19c>)
 8001d74:	f001 fcb0 	bl	80036d8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001d78:	4b1f      	ldr	r3, [pc, #124]	; (8001df8 <HAL_ADC_MspInit+0x1ac>)
 8001d7a:	4a20      	ldr	r2, [pc, #128]	; (8001dfc <HAL_ADC_MspInit+0x1b0>)
 8001d7c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <HAL_ADC_MspInit+0x1ac>)
 8001d80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d84:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d86:	4b1c      	ldr	r3, [pc, #112]	; (8001df8 <HAL_ADC_MspInit+0x1ac>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <HAL_ADC_MspInit+0x1ac>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <HAL_ADC_MspInit+0x1ac>)
 8001d94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d98:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d9a:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <HAL_ADC_MspInit+0x1ac>)
 8001d9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001da0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <HAL_ADC_MspInit+0x1ac>)
 8001da4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001da8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <HAL_ADC_MspInit+0x1ac>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <HAL_ADC_MspInit+0x1ac>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <HAL_ADC_MspInit+0x1ac>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001dbc:	480e      	ldr	r0, [pc, #56]	; (8001df8 <HAL_ADC_MspInit+0x1ac>)
 8001dbe:	f001 f88d 	bl	8002edc <HAL_DMA_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <HAL_ADC_MspInit+0x180>
      Error_Handler();
 8001dc8:	f7ff fda2 	bl	8001910 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <HAL_ADC_MspInit+0x1ac>)
 8001dd0:	639a      	str	r2, [r3, #56]	; 0x38
 8001dd2:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <HAL_ADC_MspInit+0x1ac>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001dd8:	bf00      	nop
 8001dda:	3730      	adds	r7, #48	; 0x30
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40012000 	.word	0x40012000
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40020000 	.word	0x40020000
 8001dec:	20000568 	.word	0x20000568
 8001df0:	40026410 	.word	0x40026410
 8001df4:	40012100 	.word	0x40012100
 8001df8:	200005cc 	.word	0x200005cc
 8001dfc:	40026440 	.word	0x40026440

08001e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	; 0x28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a19      	ldr	r2, [pc, #100]	; (8001e84 <HAL_UART_MspInit+0x84>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d12c      	bne.n	8001e7c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <HAL_UART_MspInit+0x88>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	4a17      	ldr	r2, [pc, #92]	; (8001e88 <HAL_UART_MspInit+0x88>)
 8001e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e30:	6413      	str	r3, [r2, #64]	; 0x40
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <HAL_UART_MspInit+0x88>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <HAL_UART_MspInit+0x88>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a10      	ldr	r2, [pc, #64]	; (8001e88 <HAL_UART_MspInit+0x88>)
 8001e48:	f043 0308 	orr.w	r3, r3, #8
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <HAL_UART_MspInit+0x88>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e6c:	2307      	movs	r3, #7
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4619      	mov	r1, r3
 8001e76:	4805      	ldr	r0, [pc, #20]	; (8001e8c <HAL_UART_MspInit+0x8c>)
 8001e78:	f001 fc2e 	bl	80036d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e7c:	bf00      	nop
 8001e7e:	3728      	adds	r7, #40	; 0x28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40004800 	.word	0x40004800
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40020c00 	.word	0x40020c00

08001e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <HardFault_Handler+0x4>

08001ea2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea6:	e7fe      	b.n	8001ea6 <MemManage_Handler+0x4>

08001ea8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <BusFault_Handler+0x4>

08001eae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <UsageFault_Handler+0x4>

08001eb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001edc:	f000 f978 	bl	80021d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ee8:	4803      	ldr	r0, [pc, #12]	; (8001ef8 <ADC_IRQHandler+0x14>)
 8001eea:	f000 f9f4 	bl	80022d6 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001eee:	4803      	ldr	r0, [pc, #12]	; (8001efc <ADC_IRQHandler+0x18>)
 8001ef0:	f000 f9f1 	bl	80022d6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000520 	.word	0x20000520
 8001efc:	200003e8 	.word	0x200003e8

08001f00 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f04:	4802      	ldr	r0, [pc, #8]	; (8001f10 <USART3_IRQHandler+0x10>)
 8001f06:	f002 faa5 	bl	8004454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200003a4 	.word	0x200003a4

08001f14 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f18:	4803      	ldr	r0, [pc, #12]	; (8001f28 <DMA2_Stream0_IRQHandler+0x14>)
 8001f1a:	f001 f977 	bl	800320c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
//adc 1 has dma stream 0
  elyoya1 = 1;
 8001f1e:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <DMA2_Stream0_IRQHandler+0x18>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	601a      	str	r2, [r3, #0]


  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000568 	.word	0x20000568
 8001f2c:	2000027c 	.word	0x2000027c

08001f30 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001f34:	4803      	ldr	r0, [pc, #12]	; (8001f44 <DMA2_Stream2_IRQHandler+0x14>)
 8001f36:	f001 f969 	bl	800320c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  elyoya2 = 1;
 8001f3a:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <DMA2_Stream2_IRQHandler+0x18>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]



  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	200005cc 	.word	0x200005cc
 8001f48:	20000280 	.word	0x20000280

08001f4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
	return 1;
 8001f50:	2301      	movs	r3, #1
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr

08001f5a <_kill>:

int _kill(int pid, int sig)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f64:	f002 fecc 	bl	8004d00 <__errno>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2216      	movs	r2, #22
 8001f6c:	601a      	str	r2, [r3, #0]
	return -1;
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <_exit>:

void _exit (int status)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f82:	f04f 31ff 	mov.w	r1, #4294967295
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff ffe7 	bl	8001f5a <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f8c:	e7fe      	b.n	8001f8c <_exit+0x12>

08001f8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b086      	sub	sp, #24
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	e00a      	b.n	8001fb6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fa0:	f3af 8000 	nop.w
 8001fa4:	4601      	mov	r1, r0
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	60ba      	str	r2, [r7, #8]
 8001fac:	b2ca      	uxtb	r2, r1
 8001fae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	dbf0      	blt.n	8001fa0 <_read+0x12>
	}

return len;
 8001fbe:	687b      	ldr	r3, [r7, #4]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	e009      	b.n	8001fee <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	60ba      	str	r2, [r7, #8]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	3301      	adds	r3, #1
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	dbf1      	blt.n	8001fda <_write+0x12>
	}
	return len;
 8001ff6:	687b      	ldr	r3, [r7, #4]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <_close>:

int _close(int file)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
	return -1;
 8002008:	f04f 33ff 	mov.w	r3, #4294967295
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr

08002016 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002026:	605a      	str	r2, [r3, #4]
	return 0;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr

08002034 <_isatty>:

int _isatty(int file)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	return 1;
 800203c:	2301      	movs	r3, #1
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
	return 0;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002068:	4a14      	ldr	r2, [pc, #80]	; (80020bc <_sbrk+0x5c>)
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <_sbrk+0x60>)
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002074:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <_sbrk+0x64>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d102      	bne.n	8002082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <_sbrk+0x64>)
 800207e:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <_sbrk+0x68>)
 8002080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <_sbrk+0x64>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	429a      	cmp	r2, r3
 800208e:	d207      	bcs.n	80020a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002090:	f002 fe36 	bl	8004d00 <__errno>
 8002094:	4603      	mov	r3, r0
 8002096:	220c      	movs	r2, #12
 8002098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800209a:	f04f 33ff 	mov.w	r3, #4294967295
 800209e:	e009      	b.n	80020b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020a0:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <_sbrk+0x64>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020a6:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <_sbrk+0x64>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	4a05      	ldr	r2, [pc, #20]	; (80020c4 <_sbrk+0x64>)
 80020b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020b2:	68fb      	ldr	r3, [r7, #12]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20020000 	.word	0x20020000
 80020c0:	00000400 	.word	0x00000400
 80020c4:	20000384 	.word	0x20000384
 80020c8:	200006c8 	.word	0x200006c8

080020cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002110 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80020dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80020de:	e003      	b.n	80020e8 <LoopCopyDataInit>

080020e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80020e0:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80020e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80020e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80020e6:	3104      	adds	r1, #4

080020e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80020e8:	480b      	ldr	r0, [pc, #44]	; (8002118 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80020ea:	4b0c      	ldr	r3, [pc, #48]	; (800211c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80020ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80020ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80020f0:	d3f6      	bcc.n	80020e0 <CopyDataInit>
  ldr  r2, =_sbss
 80020f2:	4a0b      	ldr	r2, [pc, #44]	; (8002120 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80020f4:	e002      	b.n	80020fc <LoopFillZerobss>

080020f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80020f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80020f8:	f842 3b04 	str.w	r3, [r2], #4

080020fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 80020fc:	4b09      	ldr	r3, [pc, #36]	; (8002124 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80020fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002100:	d3f9      	bcc.n	80020f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002102:	f7ff ffe3 	bl	80020cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002106:	f002 fe01 	bl	8004d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800210a:	f7ff f9bf 	bl	800148c <main>
  bx  lr
 800210e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002110:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002114:	080084d4 	.word	0x080084d4
  ldr  r0, =_sdata
 8002118:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800211c:	20000260 	.word	0x20000260
  ldr  r2, =_sbss
 8002120:	20000260 	.word	0x20000260
  ldr  r3, = _ebss
 8002124:	200006c4 	.word	0x200006c4

08002128 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002128:	e7fe      	b.n	8002128 <CAN1_RX0_IRQHandler>
	...

0800212c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002130:	4b0e      	ldr	r3, [pc, #56]	; (800216c <HAL_Init+0x40>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0d      	ldr	r2, [pc, #52]	; (800216c <HAL_Init+0x40>)
 8002136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800213a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_Init+0x40>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a0a      	ldr	r2, [pc, #40]	; (800216c <HAL_Init+0x40>)
 8002142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002146:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <HAL_Init+0x40>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a07      	ldr	r2, [pc, #28]	; (800216c <HAL_Init+0x40>)
 800214e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002154:	2003      	movs	r0, #3
 8002156:	f000 fe7f 	bl	8002e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800215a:	2000      	movs	r0, #0
 800215c:	f000 f808 	bl	8002170 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002160:	f7ff fd4e 	bl	8001c00 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40023c00 	.word	0x40023c00

08002170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002178:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_InitTick+0x54>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_InitTick+0x58>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4619      	mov	r1, r3
 8002182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002186:	fbb3 f3f1 	udiv	r3, r3, r1
 800218a:	fbb2 f3f3 	udiv	r3, r2, r3
 800218e:	4618      	mov	r0, r3
 8002190:	f000 fe97 	bl	8002ec2 <HAL_SYSTICK_Config>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e00e      	b.n	80021bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b0f      	cmp	r3, #15
 80021a2:	d80a      	bhi.n	80021ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a4:	2200      	movs	r2, #0
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ac:	f000 fe5f 	bl	8002e6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b0:	4a06      	ldr	r2, [pc, #24]	; (80021cc <HAL_InitTick+0x5c>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e000      	b.n	80021bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000080 	.word	0x20000080
 80021c8:	20000088 	.word	0x20000088
 80021cc:	20000084 	.word	0x20000084

080021d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_IncTick+0x1c>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_IncTick+0x20>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	4a03      	ldr	r2, [pc, #12]	; (80021f0 <HAL_IncTick+0x20>)
 80021e2:	6013      	str	r3, [r2, #0]
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr
 80021ec:	20000088 	.word	0x20000088
 80021f0:	200006b0 	.word	0x200006b0

080021f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return uwTick;
 80021f8:	4b02      	ldr	r3, [pc, #8]	; (8002204 <HAL_GetTick+0x10>)
 80021fa:	681b      	ldr	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	200006b0 	.word	0x200006b0

08002208 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002210:	f7ff fff0 	bl	80021f4 <HAL_GetTick>
 8002214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002220:	d005      	beq.n	800222e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002222:	4b0a      	ldr	r3, [pc, #40]	; (800224c <HAL_Delay+0x44>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4413      	add	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800222e:	bf00      	nop
 8002230:	f7ff ffe0 	bl	80021f4 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	429a      	cmp	r2, r3
 800223e:	d8f7      	bhi.n	8002230 <HAL_Delay+0x28>
  {
  }
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000088 	.word	0x20000088

08002250 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e033      	b.n	80022ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	2b00      	cmp	r3, #0
 800226c:	d109      	bne.n	8002282 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff fcec 	bl	8001c4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f003 0310 	and.w	r3, r3, #16
 800228a:	2b00      	cmp	r3, #0
 800228c:	d118      	bne.n	80022c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002296:	f023 0302 	bic.w	r3, r3, #2
 800229a:	f043 0202 	orr.w	r2, r3, #2
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 fb7a 	bl	800299c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f023 0303 	bic.w	r3, r3, #3
 80022b6:	f043 0201 	orr.w	r2, r3, #1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	641a      	str	r2, [r3, #64]	; 0x40
 80022be:	e001      	b.n	80022c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b084      	sub	sp, #16
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	2300      	movs	r3, #0
 80022e4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	bf0c      	ite	eq
 80022f4:	2301      	moveq	r3, #1
 80022f6:	2300      	movne	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 0320 	and.w	r3, r3, #32
 8002306:	2b20      	cmp	r3, #32
 8002308:	bf0c      	ite	eq
 800230a:	2301      	moveq	r3, #1
 800230c:	2300      	movne	r3, #0
 800230e:	b2db      	uxtb	r3, r3
 8002310:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d049      	beq.n	80023ac <HAL_ADC_IRQHandler+0xd6>
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d046      	beq.n	80023ac <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b00      	cmp	r3, #0
 8002328:	d105      	bne.n	8002336 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d12b      	bne.n	800239c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002348:	2b00      	cmp	r3, #0
 800234a:	d127      	bne.n	800239c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002356:	2b00      	cmp	r3, #0
 8002358:	d006      	beq.n	8002368 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002364:	2b00      	cmp	r3, #0
 8002366:	d119      	bne.n	800239c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0220 	bic.w	r2, r2, #32
 8002376:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d105      	bne.n	800239c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	f043 0201 	orr.w	r2, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f9b9 	bl	8002714 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f06f 0212 	mvn.w	r2, #18
 80023aa:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	bf0c      	ite	eq
 80023ba:	2301      	moveq	r3, #1
 80023bc:	2300      	movne	r3, #0
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023cc:	2b80      	cmp	r3, #128	; 0x80
 80023ce:	bf0c      	ite	eq
 80023d0:	2301      	moveq	r3, #1
 80023d2:	2300      	movne	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d057      	beq.n	800248e <HAL_ADC_IRQHandler+0x1b8>
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d054      	beq.n	800248e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d105      	bne.n	80023fc <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d139      	bne.n	800247e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002410:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002414:	2b00      	cmp	r3, #0
 8002416:	d006      	beq.n	8002426 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002422:	2b00      	cmp	r3, #0
 8002424:	d12b      	bne.n	800247e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002430:	2b00      	cmp	r3, #0
 8002432:	d124      	bne.n	800247e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800243e:	2b00      	cmp	r3, #0
 8002440:	d11d      	bne.n	800247e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002446:	2b00      	cmp	r3, #0
 8002448:	d119      	bne.n	800247e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002458:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246e:	2b00      	cmp	r3, #0
 8002470:	d105      	bne.n	800247e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f043 0201 	orr.w	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 fc14 	bl	8002cac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 020c 	mvn.w	r2, #12
 800248c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b01      	cmp	r3, #1
 800249a:	bf0c      	ite	eq
 800249c:	2301      	moveq	r3, #1
 800249e:	2300      	movne	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ae:	2b40      	cmp	r3, #64	; 0x40
 80024b0:	bf0c      	ite	eq
 80024b2:	2301      	moveq	r3, #1
 80024b4:	2300      	movne	r3, #0
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d017      	beq.n	80024f0 <HAL_ADC_IRQHandler+0x21a>
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d014      	beq.n	80024f0 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d10d      	bne.n	80024f0 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f929 	bl	8002738 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f06f 0201 	mvn.w	r2, #1
 80024ee:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0320 	and.w	r3, r3, #32
 80024fa:	2b20      	cmp	r3, #32
 80024fc:	bf0c      	ite	eq
 80024fe:	2301      	moveq	r3, #1
 8002500:	2300      	movne	r3, #0
 8002502:	b2db      	uxtb	r3, r3
 8002504:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002510:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002514:	bf0c      	ite	eq
 8002516:	2301      	moveq	r3, #1
 8002518:	2300      	movne	r3, #0
 800251a:	b2db      	uxtb	r3, r3
 800251c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d015      	beq.n	8002550 <HAL_ADC_IRQHandler+0x27a>
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d012      	beq.n	8002550 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F2, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	f043 0202 	orr.w	r2, r3, #2
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f06f 0220 	mvn.w	r2, #32
 800253e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f902 	bl	800274a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f06f 0220 	mvn.w	r2, #32
 800254e:	601a      	str	r2, [r3, #0]
  }
}
 8002550:	bf00      	nop
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_ADC_Start_DMA+0x1e>
 8002572:	2302      	movs	r3, #2
 8002574:	e0bc      	b.n	80026f0 <HAL_ADC_Start_DMA+0x198>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b01      	cmp	r3, #1
 800258a:	d018      	beq.n	80025be <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800259c:	4b56      	ldr	r3, [pc, #344]	; (80026f8 <HAL_ADC_Start_DMA+0x1a0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a56      	ldr	r2, [pc, #344]	; (80026fc <HAL_ADC_Start_DMA+0x1a4>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	0c9a      	lsrs	r2, r3, #18
 80025a8:	4613      	mov	r3, r2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	4413      	add	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 80025b0:	e002      	b.n	80025b8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	3b01      	subs	r3, #1
 80025b6:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f9      	bne.n	80025b2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	f040 8084 	bne.w	80026d6 <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025d6:	f023 0301 	bic.w	r3, r3, #1
 80025da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d007      	beq.n	8002600 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800260c:	d106      	bne.n	800261c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	f023 0206 	bic.w	r2, r3, #6
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	645a      	str	r2, [r3, #68]	; 0x44
 800261a:	e002      	b.n	8002622 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	4a34      	ldr	r2, [pc, #208]	; (8002700 <HAL_ADC_Start_DMA+0x1a8>)
 8002630:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002636:	4a33      	ldr	r2, [pc, #204]	; (8002704 <HAL_ADC_Start_DMA+0x1ac>)
 8002638:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263e:	4a32      	ldr	r2, [pc, #200]	; (8002708 <HAL_ADC_Start_DMA+0x1b0>)
 8002640:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800264a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800265a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800266a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	334c      	adds	r3, #76	; 0x4c
 8002676:	4619      	mov	r1, r3
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f000 fcdc 	bl	8003038 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002680:	4b22      	ldr	r3, [pc, #136]	; (800270c <HAL_ADC_Start_DMA+0x1b4>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10f      	bne.n	80026ac <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d129      	bne.n	80026ee <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	e020      	b.n	80026ee <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a17      	ldr	r2, [pc, #92]	; (8002710 <HAL_ADC_Start_DMA+0x1b8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d11b      	bne.n	80026ee <HAL_ADC_Start_DMA+0x196>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d114      	bne.n	80026ee <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	e00b      	b.n	80026ee <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f043 0210 	orr.w	r2, r3, #16
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	f043 0201 	orr.w	r2, r3, #1
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20000080 	.word	0x20000080
 80026fc:	431bde83 	.word	0x431bde83
 8002700:	08002ba9 	.word	0x08002ba9
 8002704:	08002c63 	.word	0x08002c63
 8002708:	08002c7f 	.word	0x08002c7f
 800270c:	40012300 	.word	0x40012300
 8002710:	40012000 	.word	0x40012000

08002714 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr

08002726 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr

0800274a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x1c>
 8002774:	2302      	movs	r3, #2
 8002776:	e103      	b.n	8002980 <HAL_ADC_ConfigChannel+0x224>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b09      	cmp	r3, #9
 8002786:	d925      	bls.n	80027d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68d9      	ldr	r1, [r3, #12]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	4613      	mov	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4413      	add	r3, r2
 800279c:	3b1e      	subs	r3, #30
 800279e:	2207      	movs	r2, #7
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43da      	mvns	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	400a      	ands	r2, r1
 80027ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68d9      	ldr	r1, [r3, #12]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	4618      	mov	r0, r3
 80027c0:	4603      	mov	r3, r0
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4403      	add	r3, r0
 80027c6:	3b1e      	subs	r3, #30
 80027c8:	409a      	lsls	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	e022      	b.n	800281a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6919      	ldr	r1, [r3, #16]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	461a      	mov	r2, r3
 80027e2:	4613      	mov	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4413      	add	r3, r2
 80027e8:	2207      	movs	r2, #7
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43da      	mvns	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	400a      	ands	r2, r1
 80027f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6919      	ldr	r1, [r3, #16]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	b29b      	uxth	r3, r3
 8002808:	4618      	mov	r0, r3
 800280a:	4603      	mov	r3, r0
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	4403      	add	r3, r0
 8002810:	409a      	lsls	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b06      	cmp	r3, #6
 8002820:	d824      	bhi.n	800286c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	3b05      	subs	r3, #5
 8002834:	221f      	movs	r2, #31
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43da      	mvns	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	400a      	ands	r2, r1
 8002842:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	b29b      	uxth	r3, r3
 8002850:	4618      	mov	r0, r3
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	3b05      	subs	r3, #5
 800285e:	fa00 f203 	lsl.w	r2, r0, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	635a      	str	r2, [r3, #52]	; 0x34
 800286a:	e04c      	b.n	8002906 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b0c      	cmp	r3, #12
 8002872:	d824      	bhi.n	80028be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	3b23      	subs	r3, #35	; 0x23
 8002886:	221f      	movs	r2, #31
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43da      	mvns	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	400a      	ands	r2, r1
 8002894:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	4618      	mov	r0, r3
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	3b23      	subs	r3, #35	; 0x23
 80028b0:	fa00 f203 	lsl.w	r2, r0, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
 80028bc:	e023      	b.n	8002906 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	3b41      	subs	r3, #65	; 0x41
 80028d0:	221f      	movs	r2, #31
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43da      	mvns	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	400a      	ands	r2, r1
 80028de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	4618      	mov	r0, r3
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	3b41      	subs	r3, #65	; 0x41
 80028fa:	fa00 f203 	lsl.w	r2, r0, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a20      	ldr	r2, [pc, #128]	; (800298c <HAL_ADC_ConfigChannel+0x230>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d109      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x1c8>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b12      	cmp	r3, #18
 8002916:	d105      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002918:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <HAL_ADC_ConfigChannel+0x234>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4a1c      	ldr	r2, [pc, #112]	; (8002990 <HAL_ADC_ConfigChannel+0x234>)
 800291e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002922:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a18      	ldr	r2, [pc, #96]	; (800298c <HAL_ADC_ConfigChannel+0x230>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d123      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x21a>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b10      	cmp	r3, #16
 8002934:	d003      	beq.n	800293e <HAL_ADC_ConfigChannel+0x1e2>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b11      	cmp	r3, #17
 800293c:	d11b      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800293e:	4b14      	ldr	r3, [pc, #80]	; (8002990 <HAL_ADC_ConfigChannel+0x234>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4a13      	ldr	r2, [pc, #76]	; (8002990 <HAL_ADC_ConfigChannel+0x234>)
 8002944:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002948:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b10      	cmp	r3, #16
 8002950:	d111      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002952:	4b10      	ldr	r3, [pc, #64]	; (8002994 <HAL_ADC_ConfigChannel+0x238>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a10      	ldr	r2, [pc, #64]	; (8002998 <HAL_ADC_ConfigChannel+0x23c>)
 8002958:	fba2 2303 	umull	r2, r3, r2, r3
 800295c:	0c9a      	lsrs	r2, r3, #18
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002968:	e002      	b.n	8002970 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	3b01      	subs	r3, #1
 800296e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f9      	bne.n	800296a <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40012000 	.word	0x40012000
 8002990:	40012300 	.word	0x40012300
 8002994:	20000080 	.word	0x20000080
 8002998:	431bde83 	.word	0x431bde83

0800299c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80029a4:	4b7e      	ldr	r3, [pc, #504]	; (8002ba0 <ADC_Init+0x204>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	4a7d      	ldr	r2, [pc, #500]	; (8002ba0 <ADC_Init+0x204>)
 80029aa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80029ae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80029b0:	4b7b      	ldr	r3, [pc, #492]	; (8002ba0 <ADC_Init+0x204>)
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	4979      	ldr	r1, [pc, #484]	; (8002ba0 <ADC_Init+0x204>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6859      	ldr	r1, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	021a      	lsls	r2, r3, #8
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6859      	ldr	r1, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6899      	ldr	r1, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2a:	4a5e      	ldr	r2, [pc, #376]	; (8002ba4 <ADC_Init+0x208>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d022      	beq.n	8002a76 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6899      	ldr	r1, [r3, #8]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6899      	ldr	r1, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	e00f      	b.n	8002a96 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0202 	bic.w	r2, r2, #2
 8002aa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6899      	ldr	r1, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	7e1b      	ldrb	r3, [r3, #24]
 8002ab0:	005a      	lsls	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d027      	beq.n	8002b14 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ad2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ae2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002aee:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	fa92 f2a2 	rbit	r2, r2
 8002af6:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	fab2 f282 	clz	r2, r2
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	fa03 f102 	lsl.w	r1, r3, r2
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	e007      	b.n	8002b24 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	051a      	lsls	r2, r3, #20
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6899      	ldr	r1, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b66:	025a      	lsls	r2, r3, #9
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6899      	ldr	r1, [r3, #8]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	029a      	lsls	r2, r3, #10
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	609a      	str	r2, [r3, #8]
}
 8002b94:	bf00      	nop
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40012300 	.word	0x40012300
 8002ba4:	0f000001 	.word	0x0f000001

08002ba8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d13c      	bne.n	8002c3c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d12b      	bne.n	8002c34 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d127      	bne.n	8002c34 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d006      	beq.n	8002c00 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d119      	bne.n	8002c34 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0220 	bic.w	r2, r2, #32
 8002c0e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d105      	bne.n	8002c34 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	f043 0201 	orr.w	r2, r3, #1
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f7ff fd6d 	bl	8002714 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c3a:	e00e      	b.n	8002c5a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	f003 0310 	and.w	r3, r3, #16
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f7ff fd7e 	bl	800274a <HAL_ADC_ErrorCallback>
}
 8002c4e:	e004      	b.n	8002c5a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	4798      	blx	r3
}
 8002c5a:	bf00      	nop
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f7ff fd58 	bl	8002726 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b084      	sub	sp, #16
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2240      	movs	r2, #64	; 0x40
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	f043 0204 	orr.w	r2, r3, #4
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f7ff fd53 	bl	800274a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ca4:	bf00      	nop
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr
	...

08002cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cf2:	4a04      	ldr	r2, [pc, #16]	; (8002d04 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	60d3      	str	r3, [r2, #12]
}
 8002cf8:	bf00      	nop
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d0c:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <__NVIC_GetPriorityGrouping+0x18>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	0a1b      	lsrs	r3, r3, #8
 8002d12:	f003 0307 	and.w	r3, r3, #7
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	db0b      	blt.n	8002d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	f003 021f 	and.w	r2, r3, #31
 8002d3c:	4906      	ldr	r1, [pc, #24]	; (8002d58 <__NVIC_EnableIRQ+0x34>)
 8002d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	2001      	movs	r0, #1
 8002d46:	fa00 f202 	lsl.w	r2, r0, r2
 8002d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr
 8002d58:	e000e100 	.word	0xe000e100

08002d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	6039      	str	r1, [r7, #0]
 8002d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	db0a      	blt.n	8002d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	490c      	ldr	r1, [pc, #48]	; (8002da8 <__NVIC_SetPriority+0x4c>)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	0112      	lsls	r2, r2, #4
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	440b      	add	r3, r1
 8002d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d84:	e00a      	b.n	8002d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	4908      	ldr	r1, [pc, #32]	; (8002dac <__NVIC_SetPriority+0x50>)
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	3b04      	subs	r3, #4
 8002d94:	0112      	lsls	r2, r2, #4
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	440b      	add	r3, r1
 8002d9a:	761a      	strb	r2, [r3, #24]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	e000e100 	.word	0xe000e100
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b089      	sub	sp, #36	; 0x24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f1c3 0307 	rsb	r3, r3, #7
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	bf28      	it	cs
 8002dce:	2304      	movcs	r3, #4
 8002dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	2b06      	cmp	r3, #6
 8002dd8:	d902      	bls.n	8002de0 <NVIC_EncodePriority+0x30>
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3b03      	subs	r3, #3
 8002dde:	e000      	b.n	8002de2 <NVIC_EncodePriority+0x32>
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de4:	f04f 32ff 	mov.w	r2, #4294967295
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43da      	mvns	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	401a      	ands	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002e02:	43d9      	mvns	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	4313      	orrs	r3, r2
         );
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3724      	adds	r7, #36	; 0x24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr

08002e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e24:	d301      	bcc.n	8002e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e26:	2301      	movs	r3, #1
 8002e28:	e00f      	b.n	8002e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e2a:	4a0a      	ldr	r2, [pc, #40]	; (8002e54 <SysTick_Config+0x40>)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e32:	210f      	movs	r1, #15
 8002e34:	f04f 30ff 	mov.w	r0, #4294967295
 8002e38:	f7ff ff90 	bl	8002d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <SysTick_Config+0x40>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e42:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <SysTick_Config+0x40>)
 8002e44:	2207      	movs	r2, #7
 8002e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	e000e010 	.word	0xe000e010

08002e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff ff2d 	bl	8002cc0 <__NVIC_SetPriorityGrouping>
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b086      	sub	sp, #24
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	4603      	mov	r3, r0
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
 8002e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e80:	f7ff ff42 	bl	8002d08 <__NVIC_GetPriorityGrouping>
 8002e84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	6978      	ldr	r0, [r7, #20]
 8002e8c:	f7ff ff90 	bl	8002db0 <NVIC_EncodePriority>
 8002e90:	4602      	mov	r2, r0
 8002e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e96:	4611      	mov	r1, r2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff5f 	bl	8002d5c <__NVIC_SetPriority>
}
 8002e9e:	bf00      	nop
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	4603      	mov	r3, r0
 8002eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ff35 	bl	8002d24 <__NVIC_EnableIRQ>
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7ff ffa2 	bl	8002e14 <SysTick_Config>
 8002ed0:	4603      	mov	r3, r0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ee8:	f7ff f984 	bl	80021f4 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e099      	b.n	800302c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0201 	bic.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f18:	e00f      	b.n	8002f3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f1a:	f7ff f96b 	bl	80021f4 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b05      	cmp	r3, #5
 8002f26:	d908      	bls.n	8002f3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2203      	movs	r2, #3
 8002f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e078      	b.n	800302c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1e8      	bne.n	8002f1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	4b38      	ldr	r3, [pc, #224]	; (8003034 <HAL_DMA_Init+0x158>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d107      	bne.n	8002fa4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f023 0307 	bic.w	r3, r3, #7
 8002fba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d117      	bne.n	8002ffe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00e      	beq.n	8002ffe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 faff 	bl	80035e4 <DMA_CheckFifoParam>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2240      	movs	r2, #64	; 0x40
 8002ff0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e016      	b.n	800302c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fab8 	bl	800357c <DMA_CalcBaseAndBitshift>
 800300c:	4603      	mov	r3, r0
 800300e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003014:	223f      	movs	r2, #63	; 0x3f
 8003016:	409a      	lsls	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	f010803f 	.word	0xf010803f

08003038 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_DMA_Start_IT+0x26>
 800305a:	2302      	movs	r3, #2
 800305c:	e040      	b.n	80030e0 <HAL_DMA_Start_IT+0xa8>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b01      	cmp	r3, #1
 8003070:	d12f      	bne.n	80030d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2202      	movs	r2, #2
 8003076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	68b9      	ldr	r1, [r7, #8]
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 fa4a 	bl	8003520 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003090:	223f      	movs	r2, #63	; 0x3f
 8003092:	409a      	lsls	r2, r3
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0216 	orr.w	r2, r2, #22
 80030a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d007      	beq.n	80030c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0208 	orr.w	r2, r2, #8
 80030be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	e005      	b.n	80030de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030da:	2302      	movs	r3, #2
 80030dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030de:	7dfb      	ldrb	r3, [r7, #23]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030f6:	f7ff f87d 	bl	80021f4 <HAL_GetTick>
 80030fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d008      	beq.n	800311a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2280      	movs	r2, #128	; 0x80
 800310c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e052      	b.n	80031c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0216 	bic.w	r2, r2, #22
 8003128:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695a      	ldr	r2, [r3, #20]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003138:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	2b00      	cmp	r3, #0
 8003140:	d103      	bne.n	800314a <HAL_DMA_Abort+0x62>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003146:	2b00      	cmp	r3, #0
 8003148:	d007      	beq.n	800315a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0208 	bic.w	r2, r2, #8
 8003158:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0201 	bic.w	r2, r2, #1
 8003168:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800316a:	e013      	b.n	8003194 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800316c:	f7ff f842 	bl	80021f4 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b05      	cmp	r3, #5
 8003178:	d90c      	bls.n	8003194 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2220      	movs	r2, #32
 800317e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2203      	movs	r2, #3
 8003184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e015      	b.n	80031c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1e4      	bne.n	800316c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a6:	223f      	movs	r2, #63	; 0x3f
 80031a8:	409a      	lsls	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d004      	beq.n	80031e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2280      	movs	r2, #128	; 0x80
 80031e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e00c      	b.n	8003200 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2205      	movs	r2, #5
 80031ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0201 	bic.w	r2, r2, #1
 80031fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr
	...

0800320c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003218:	4b92      	ldr	r3, [pc, #584]	; (8003464 <HAL_DMA_IRQHandler+0x258>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a92      	ldr	r2, [pc, #584]	; (8003468 <HAL_DMA_IRQHandler+0x25c>)
 800321e:	fba2 2303 	umull	r2, r3, r2, r3
 8003222:	0a9b      	lsrs	r3, r3, #10
 8003224:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003236:	2208      	movs	r2, #8
 8003238:	409a      	lsls	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4013      	ands	r3, r2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d01a      	beq.n	8003278 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d013      	beq.n	8003278 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0204 	bic.w	r2, r2, #4
 800325e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003264:	2208      	movs	r2, #8
 8003266:	409a      	lsls	r2, r3
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003270:	f043 0201 	orr.w	r2, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327c:	2201      	movs	r2, #1
 800327e:	409a      	lsls	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4013      	ands	r3, r2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d012      	beq.n	80032ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00b      	beq.n	80032ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329a:	2201      	movs	r2, #1
 800329c:	409a      	lsls	r2, r3
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a6:	f043 0202 	orr.w	r2, r3, #2
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b2:	2204      	movs	r2, #4
 80032b4:	409a      	lsls	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d012      	beq.n	80032e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00b      	beq.n	80032e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d0:	2204      	movs	r2, #4
 80032d2:	409a      	lsls	r2, r3
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032dc:	f043 0204 	orr.w	r2, r3, #4
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e8:	2210      	movs	r2, #16
 80032ea:	409a      	lsls	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d043      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d03c      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003306:	2210      	movs	r2, #16
 8003308:	409a      	lsls	r2, r3
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d018      	beq.n	800334e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d108      	bne.n	800333c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d024      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	4798      	blx	r3
 800333a:	e01f      	b.n	800337c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01b      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	4798      	blx	r3
 800334c:	e016      	b.n	800337c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d107      	bne.n	800336c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0208 	bic.w	r2, r2, #8
 800336a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003380:	2220      	movs	r2, #32
 8003382:	409a      	lsls	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4013      	ands	r3, r2
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 808e 	beq.w	80034aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 8086 	beq.w	80034aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a2:	2220      	movs	r2, #32
 80033a4:	409a      	lsls	r2, r3
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b05      	cmp	r3, #5
 80033b4:	d136      	bne.n	8003424 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0216 	bic.w	r2, r2, #22
 80033c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695a      	ldr	r2, [r3, #20]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d103      	bne.n	80033e6 <HAL_DMA_IRQHandler+0x1da>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d007      	beq.n	80033f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0208 	bic.w	r2, r2, #8
 80033f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fa:	223f      	movs	r2, #63	; 0x3f
 80033fc:	409a      	lsls	r2, r3
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003416:	2b00      	cmp	r3, #0
 8003418:	d07d      	beq.n	8003516 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	4798      	blx	r3
        }
        return;
 8003422:	e078      	b.n	8003516 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d01c      	beq.n	800346c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d108      	bne.n	8003452 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003444:	2b00      	cmp	r3, #0
 8003446:	d030      	beq.n	80034aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	4798      	blx	r3
 8003450:	e02b      	b.n	80034aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003456:	2b00      	cmp	r3, #0
 8003458:	d027      	beq.n	80034aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	4798      	blx	r3
 8003462:	e022      	b.n	80034aa <HAL_DMA_IRQHandler+0x29e>
 8003464:	20000080 	.word	0x20000080
 8003468:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10f      	bne.n	800349a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 0210 	bic.w	r2, r2, #16
 8003488:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d032      	beq.n	8003518 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d022      	beq.n	8003504 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2205      	movs	r2, #5
 80034c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0201 	bic.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	3301      	adds	r3, #1
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d307      	bcc.n	80034f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1f2      	bne.n	80034d6 <HAL_DMA_IRQHandler+0x2ca>
 80034f0:	e000      	b.n	80034f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80034f2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	4798      	blx	r3
 8003514:	e000      	b.n	8003518 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003516:	bf00      	nop
    }
  }
}
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop

08003520 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800353c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2b40      	cmp	r3, #64	; 0x40
 800354c:	d108      	bne.n	8003560 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800355e:	e007      	b.n	8003570 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	60da      	str	r2, [r3, #12]
}
 8003570:	bf00      	nop
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr
	...

0800357c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	3b10      	subs	r3, #16
 800358c:	4a13      	ldr	r2, [pc, #76]	; (80035dc <DMA_CalcBaseAndBitshift+0x60>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	091b      	lsrs	r3, r3, #4
 8003594:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003596:	4a12      	ldr	r2, [pc, #72]	; (80035e0 <DMA_CalcBaseAndBitshift+0x64>)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4413      	add	r3, r2
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d909      	bls.n	80035be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035b2:	f023 0303 	bic.w	r3, r3, #3
 80035b6:	1d1a      	adds	r2, r3, #4
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	659a      	str	r2, [r3, #88]	; 0x58
 80035bc:	e007      	b.n	80035ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035c6:	f023 0303 	bic.w	r3, r3, #3
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr
 80035dc:	aaaaaaab 	.word	0xaaaaaaab
 80035e0:	080080dc 	.word	0x080080dc

080035e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d11f      	bne.n	800363e <DMA_CheckFifoParam+0x5a>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b03      	cmp	r3, #3
 8003602:	d856      	bhi.n	80036b2 <DMA_CheckFifoParam+0xce>
 8003604:	a201      	add	r2, pc, #4	; (adr r2, 800360c <DMA_CheckFifoParam+0x28>)
 8003606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360a:	bf00      	nop
 800360c:	0800361d 	.word	0x0800361d
 8003610:	0800362f 	.word	0x0800362f
 8003614:	0800361d 	.word	0x0800361d
 8003618:	080036b3 	.word	0x080036b3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d046      	beq.n	80036b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800362c:	e043      	b.n	80036b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003632:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003636:	d140      	bne.n	80036ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800363c:	e03d      	b.n	80036ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003646:	d121      	bne.n	800368c <DMA_CheckFifoParam+0xa8>
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b03      	cmp	r3, #3
 800364c:	d837      	bhi.n	80036be <DMA_CheckFifoParam+0xda>
 800364e:	a201      	add	r2, pc, #4	; (adr r2, 8003654 <DMA_CheckFifoParam+0x70>)
 8003650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003654:	08003665 	.word	0x08003665
 8003658:	0800366b 	.word	0x0800366b
 800365c:	08003665 	.word	0x08003665
 8003660:	0800367d 	.word	0x0800367d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	73fb      	strb	r3, [r7, #15]
      break;
 8003668:	e030      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d025      	beq.n	80036c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800367a:	e022      	b.n	80036c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003684:	d11f      	bne.n	80036c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800368a:	e01c      	b.n	80036c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d903      	bls.n	800369a <DMA_CheckFifoParam+0xb6>
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b03      	cmp	r3, #3
 8003696:	d003      	beq.n	80036a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003698:	e018      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	73fb      	strb	r3, [r7, #15]
      break;
 800369e:	e015      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00e      	beq.n	80036ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
      break;
 80036b0:	e00b      	b.n	80036ca <DMA_CheckFifoParam+0xe6>
      break;
 80036b2:	bf00      	nop
 80036b4:	e00a      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      break;
 80036b6:	bf00      	nop
 80036b8:	e008      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      break;
 80036ba:	bf00      	nop
 80036bc:	e006      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      break;
 80036be:	bf00      	nop
 80036c0:	e004      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      break;
 80036c2:	bf00      	nop
 80036c4:	e002      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      break;   
 80036c6:	bf00      	nop
 80036c8:	e000      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      break;
 80036ca:	bf00      	nop
    }
  } 
  
  return status; 
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr

080036d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036e6:	e16f      	b.n	80039c8 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	2101      	movs	r1, #1
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	fa01 f303 	lsl.w	r3, r1, r3
 80036f4:	4013      	ands	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 8161 	beq.w	80039c2 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	2b01      	cmp	r3, #1
 800370a:	d005      	beq.n	8003718 <HAL_GPIO_Init+0x40>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 0303 	and.w	r3, r3, #3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d130      	bne.n	800377a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	2203      	movs	r2, #3
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	43db      	mvns	r3, r3
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	4013      	ands	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4313      	orrs	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800374e:	2201      	movs	r2, #1
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	43db      	mvns	r3, r3
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	4013      	ands	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	091b      	lsrs	r3, r3, #4
 8003764:	f003 0201 	and.w	r2, r3, #1
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	2b03      	cmp	r3, #3
 8003784:	d017      	beq.n	80037b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	2203      	movs	r2, #3
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43db      	mvns	r3, r3
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4013      	ands	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d123      	bne.n	800380a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	08da      	lsrs	r2, r3, #3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3208      	adds	r2, #8
 80037ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	220f      	movs	r2, #15
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43db      	mvns	r3, r3
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4013      	ands	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	08da      	lsrs	r2, r3, #3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3208      	adds	r2, #8
 8003804:	6939      	ldr	r1, [r7, #16]
 8003806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	2203      	movs	r2, #3
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43db      	mvns	r3, r3
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	4013      	ands	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 0203 	and.w	r2, r3, #3
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 80bb 	beq.w	80039c2 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800384c:	2300      	movs	r3, #0
 800384e:	60bb      	str	r3, [r7, #8]
 8003850:	4b64      	ldr	r3, [pc, #400]	; (80039e4 <HAL_GPIO_Init+0x30c>)
 8003852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003854:	4a63      	ldr	r2, [pc, #396]	; (80039e4 <HAL_GPIO_Init+0x30c>)
 8003856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800385a:	6453      	str	r3, [r2, #68]	; 0x44
 800385c:	4b61      	ldr	r3, [pc, #388]	; (80039e4 <HAL_GPIO_Init+0x30c>)
 800385e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003868:	4a5f      	ldr	r2, [pc, #380]	; (80039e8 <HAL_GPIO_Init+0x310>)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	089b      	lsrs	r3, r3, #2
 800386e:	3302      	adds	r3, #2
 8003870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003874:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	220f      	movs	r2, #15
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43db      	mvns	r3, r3
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	4013      	ands	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a57      	ldr	r2, [pc, #348]	; (80039ec <HAL_GPIO_Init+0x314>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d031      	beq.n	80038f8 <HAL_GPIO_Init+0x220>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a56      	ldr	r2, [pc, #344]	; (80039f0 <HAL_GPIO_Init+0x318>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d02b      	beq.n	80038f4 <HAL_GPIO_Init+0x21c>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a55      	ldr	r2, [pc, #340]	; (80039f4 <HAL_GPIO_Init+0x31c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d025      	beq.n	80038f0 <HAL_GPIO_Init+0x218>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a54      	ldr	r2, [pc, #336]	; (80039f8 <HAL_GPIO_Init+0x320>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d01f      	beq.n	80038ec <HAL_GPIO_Init+0x214>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a53      	ldr	r2, [pc, #332]	; (80039fc <HAL_GPIO_Init+0x324>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d019      	beq.n	80038e8 <HAL_GPIO_Init+0x210>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a52      	ldr	r2, [pc, #328]	; (8003a00 <HAL_GPIO_Init+0x328>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d013      	beq.n	80038e4 <HAL_GPIO_Init+0x20c>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a51      	ldr	r2, [pc, #324]	; (8003a04 <HAL_GPIO_Init+0x32c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00d      	beq.n	80038e0 <HAL_GPIO_Init+0x208>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a50      	ldr	r2, [pc, #320]	; (8003a08 <HAL_GPIO_Init+0x330>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d007      	beq.n	80038dc <HAL_GPIO_Init+0x204>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a4f      	ldr	r2, [pc, #316]	; (8003a0c <HAL_GPIO_Init+0x334>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d101      	bne.n	80038d8 <HAL_GPIO_Init+0x200>
 80038d4:	2308      	movs	r3, #8
 80038d6:	e010      	b.n	80038fa <HAL_GPIO_Init+0x222>
 80038d8:	2309      	movs	r3, #9
 80038da:	e00e      	b.n	80038fa <HAL_GPIO_Init+0x222>
 80038dc:	2307      	movs	r3, #7
 80038de:	e00c      	b.n	80038fa <HAL_GPIO_Init+0x222>
 80038e0:	2306      	movs	r3, #6
 80038e2:	e00a      	b.n	80038fa <HAL_GPIO_Init+0x222>
 80038e4:	2305      	movs	r3, #5
 80038e6:	e008      	b.n	80038fa <HAL_GPIO_Init+0x222>
 80038e8:	2304      	movs	r3, #4
 80038ea:	e006      	b.n	80038fa <HAL_GPIO_Init+0x222>
 80038ec:	2303      	movs	r3, #3
 80038ee:	e004      	b.n	80038fa <HAL_GPIO_Init+0x222>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e002      	b.n	80038fa <HAL_GPIO_Init+0x222>
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <HAL_GPIO_Init+0x222>
 80038f8:	2300      	movs	r3, #0
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	f002 0203 	and.w	r2, r2, #3
 8003900:	0092      	lsls	r2, r2, #2
 8003902:	4093      	lsls	r3, r2
 8003904:	461a      	mov	r2, r3
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800390c:	4936      	ldr	r1, [pc, #216]	; (80039e8 <HAL_GPIO_Init+0x310>)
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	089b      	lsrs	r3, r3, #2
 8003912:	3302      	adds	r3, #2
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800391a:	4b3d      	ldr	r3, [pc, #244]	; (8003a10 <HAL_GPIO_Init+0x338>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	43db      	mvns	r3, r3
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4013      	ands	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4313      	orrs	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800393e:	4a34      	ldr	r2, [pc, #208]	; (8003a10 <HAL_GPIO_Init+0x338>)
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003944:	4b32      	ldr	r3, [pc, #200]	; (8003a10 <HAL_GPIO_Init+0x338>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	43db      	mvns	r3, r3
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4013      	ands	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003968:	4a29      	ldr	r2, [pc, #164]	; (8003a10 <HAL_GPIO_Init+0x338>)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800396e:	4b28      	ldr	r3, [pc, #160]	; (8003a10 <HAL_GPIO_Init+0x338>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	43db      	mvns	r3, r3
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4013      	ands	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003992:	4a1f      	ldr	r2, [pc, #124]	; (8003a10 <HAL_GPIO_Init+0x338>)
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003998:	4b1d      	ldr	r3, [pc, #116]	; (8003a10 <HAL_GPIO_Init+0x338>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	43db      	mvns	r3, r3
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4013      	ands	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80039bc:	4a14      	ldr	r2, [pc, #80]	; (8003a10 <HAL_GPIO_Init+0x338>)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	3301      	adds	r3, #1
 80039c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	fa22 f303 	lsr.w	r3, r2, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f47f ae88 	bne.w	80036e8 <HAL_GPIO_Init+0x10>
  }
}
 80039d8:	bf00      	nop
 80039da:	bf00      	nop
 80039dc:	371c      	adds	r7, #28
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr
 80039e4:	40023800 	.word	0x40023800
 80039e8:	40013800 	.word	0x40013800
 80039ec:	40020000 	.word	0x40020000
 80039f0:	40020400 	.word	0x40020400
 80039f4:	40020800 	.word	0x40020800
 80039f8:	40020c00 	.word	0x40020c00
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40021400 	.word	0x40021400
 8003a04:	40021800 	.word	0x40021800
 8003a08:	40021c00 	.word	0x40021c00
 8003a0c:	40022000 	.word	0x40022000
 8003a10:	40013c00 	.word	0x40013c00

08003a14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08a      	sub	sp, #40	; 0x28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e237      	b.n	8003e96 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d050      	beq.n	8003ad4 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a32:	4ba3      	ldr	r3, [pc, #652]	; (8003cc0 <HAL_RCC_OscConfig+0x2ac>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 030c 	and.w	r3, r3, #12
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d00c      	beq.n	8003a58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a3e:	4ba0      	ldr	r3, [pc, #640]	; (8003cc0 <HAL_RCC_OscConfig+0x2ac>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d112      	bne.n	8003a70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a4a:	4b9d      	ldr	r3, [pc, #628]	; (8003cc0 <HAL_RCC_OscConfig+0x2ac>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a56:	d10b      	bne.n	8003a70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a58:	4b99      	ldr	r3, [pc, #612]	; (8003cc0 <HAL_RCC_OscConfig+0x2ac>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d036      	beq.n	8003ad2 <HAL_RCC_OscConfig+0xbe>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d132      	bne.n	8003ad2 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e212      	b.n	8003e96 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	4b93      	ldr	r3, [pc, #588]	; (8003cc4 <HAL_RCC_OscConfig+0x2b0>)
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d013      	beq.n	8003aaa <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a82:	f7fe fbb7 	bl	80021f4 <HAL_GetTick>
 8003a86:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a8a:	f7fe fbb3 	bl	80021f4 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b64      	cmp	r3, #100	; 0x64
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e1fc      	b.n	8003e96 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9c:	4b88      	ldr	r3, [pc, #544]	; (8003cc0 <HAL_RCC_OscConfig+0x2ac>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x76>
 8003aa8:	e014      	b.n	8003ad4 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aaa:	f7fe fba3 	bl	80021f4 <HAL_GetTick>
 8003aae:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ab2:	f7fe fb9f 	bl	80021f4 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b64      	cmp	r3, #100	; 0x64
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e1e8      	b.n	8003e96 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ac4:	4b7e      	ldr	r3, [pc, #504]	; (8003cc0 <HAL_RCC_OscConfig+0x2ac>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1f0      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x9e>
 8003ad0:	e000      	b.n	8003ad4 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d077      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ae0:	4b77      	ldr	r3, [pc, #476]	; (8003cc0 <HAL_RCC_OscConfig+0x2ac>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 030c 	and.w	r3, r3, #12
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00b      	beq.n	8003b04 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aec:	4b74      	ldr	r3, [pc, #464]	; (8003cc0 <HAL_RCC_OscConfig+0x2ac>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	d126      	bne.n	8003b46 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003af8:	4b71      	ldr	r3, [pc, #452]	; (8003cc0 <HAL_RCC_OscConfig+0x2ac>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d120      	bne.n	8003b46 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b04:	4b6e      	ldr	r3, [pc, #440]	; (8003cc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_RCC_OscConfig+0x108>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e1bc      	b.n	8003e96 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1c:	4b68      	ldr	r3, [pc, #416]	; (8003cc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	21f8      	movs	r1, #248	; 0xf8
 8003b2a:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2c:	69b9      	ldr	r1, [r7, #24]
 8003b2e:	fa91 f1a1 	rbit	r1, r1
 8003b32:	6179      	str	r1, [r7, #20]
  return result;
 8003b34:	6979      	ldr	r1, [r7, #20]
 8003b36:	fab1 f181 	clz	r1, r1
 8003b3a:	b2c9      	uxtb	r1, r1
 8003b3c:	408b      	lsls	r3, r1
 8003b3e:	4960      	ldr	r1, [pc, #384]	; (8003cc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b44:	e044      	b.n	8003bd0 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d02a      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b4e:	4b5e      	ldr	r3, [pc, #376]	; (8003cc8 <HAL_RCC_OscConfig+0x2b4>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7fe fb4e 	bl	80021f4 <HAL_GetTick>
 8003b58:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b5c:	f7fe fb4a 	bl	80021f4 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e193      	b.n	8003e96 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b6e:	4b54      	ldr	r3, [pc, #336]	; (8003cc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7a:	4b51      	ldr	r3, [pc, #324]	; (8003cc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	21f8      	movs	r1, #248	; 0xf8
 8003b88:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8a:	6939      	ldr	r1, [r7, #16]
 8003b8c:	fa91 f1a1 	rbit	r1, r1
 8003b90:	60f9      	str	r1, [r7, #12]
  return result;
 8003b92:	68f9      	ldr	r1, [r7, #12]
 8003b94:	fab1 f181 	clz	r1, r1
 8003b98:	b2c9      	uxtb	r1, r1
 8003b9a:	408b      	lsls	r3, r1
 8003b9c:	4948      	ldr	r1, [pc, #288]	; (8003cc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	600b      	str	r3, [r1, #0]
 8003ba2:	e015      	b.n	8003bd0 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ba4:	4b48      	ldr	r3, [pc, #288]	; (8003cc8 <HAL_RCC_OscConfig+0x2b4>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003baa:	f7fe fb23 	bl	80021f4 <HAL_GetTick>
 8003bae:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bb2:	f7fe fb1f 	bl	80021f4 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e168      	b.n	8003e96 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bc4:	4b3e      	ldr	r3, [pc, #248]	; (8003cc0 <HAL_RCC_OscConfig+0x2ac>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1f0      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d030      	beq.n	8003c3e <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d016      	beq.n	8003c12 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003be4:	4b39      	ldr	r3, [pc, #228]	; (8003ccc <HAL_RCC_OscConfig+0x2b8>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bea:	f7fe fb03 	bl	80021f4 <HAL_GetTick>
 8003bee:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bf2:	f7fe faff 	bl	80021f4 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e148      	b.n	8003e96 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c04:	4b2e      	ldr	r3, [pc, #184]	; (8003cc0 <HAL_RCC_OscConfig+0x2ac>)
 8003c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0f0      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x1de>
 8003c10:	e015      	b.n	8003c3e <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c12:	4b2e      	ldr	r3, [pc, #184]	; (8003ccc <HAL_RCC_OscConfig+0x2b8>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c18:	f7fe faec 	bl	80021f4 <HAL_GetTick>
 8003c1c:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c20:	f7fe fae8 	bl	80021f4 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e131      	b.n	8003e96 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c32:	4b23      	ldr	r3, [pc, #140]	; (8003cc0 <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f0      	bne.n	8003c20 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 8088 	beq.w	8003d5c <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c52:	4b1b      	ldr	r3, [pc, #108]	; (8003cc0 <HAL_RCC_OscConfig+0x2ac>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d110      	bne.n	8003c80 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	4b17      	ldr	r3, [pc, #92]	; (8003cc0 <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	4a16      	ldr	r2, [pc, #88]	; (8003cc0 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c6e:	4b14      	ldr	r3, [pc, #80]	; (8003cc0 <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c76:	60bb      	str	r3, [r7, #8]
 8003c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c80:	4b13      	ldr	r3, [pc, #76]	; (8003cd0 <HAL_RCC_OscConfig+0x2bc>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a12      	ldr	r2, [pc, #72]	; (8003cd0 <HAL_RCC_OscConfig+0x2bc>)
 8003c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c8a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8c:	4b10      	ldr	r3, [pc, #64]	; (8003cd0 <HAL_RCC_OscConfig+0x2bc>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d123      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c98:	4b0d      	ldr	r3, [pc, #52]	; (8003cd0 <HAL_RCC_OscConfig+0x2bc>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a0c      	ldr	r2, [pc, #48]	; (8003cd0 <HAL_RCC_OscConfig+0x2bc>)
 8003c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ca4:	f7fe faa6 	bl	80021f4 <HAL_GetTick>
 8003ca8:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003caa:	e013      	b.n	8003cd4 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cac:	f7fe faa2 	bl	80021f4 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d90c      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e0eb      	b.n	8003e96 <HAL_RCC_OscConfig+0x482>
 8003cbe:	bf00      	nop
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	40023802 	.word	0x40023802
 8003cc8:	42470000 	.word	0x42470000
 8003ccc:	42470e80 	.word	0x42470e80
 8003cd0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd4:	4b72      	ldr	r3, [pc, #456]	; (8003ea0 <HAL_RCC_OscConfig+0x48c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0e5      	beq.n	8003cac <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	4b6f      	ldr	r3, [pc, #444]	; (8003ea4 <HAL_RCC_OscConfig+0x490>)
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d015      	beq.n	8003d1e <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf2:	f7fe fa7f 	bl	80021f4 <HAL_GetTick>
 8003cf6:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf8:	e00a      	b.n	8003d10 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cfa:	f7fe fa7b 	bl	80021f4 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e0c2      	b.n	8003e96 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d10:	4b65      	ldr	r3, [pc, #404]	; (8003ea8 <HAL_RCC_OscConfig+0x494>)
 8003d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0ee      	beq.n	8003cfa <HAL_RCC_OscConfig+0x2e6>
 8003d1c:	e014      	b.n	8003d48 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d1e:	f7fe fa69 	bl	80021f4 <HAL_GetTick>
 8003d22:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d24:	e00a      	b.n	8003d3c <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d26:	f7fe fa65 	bl	80021f4 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e0ac      	b.n	8003e96 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d3c:	4b5a      	ldr	r3, [pc, #360]	; (8003ea8 <HAL_RCC_OscConfig+0x494>)
 8003d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1ee      	bne.n	8003d26 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d105      	bne.n	8003d5c <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d50:	4b55      	ldr	r3, [pc, #340]	; (8003ea8 <HAL_RCC_OscConfig+0x494>)
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	4a54      	ldr	r2, [pc, #336]	; (8003ea8 <HAL_RCC_OscConfig+0x494>)
 8003d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 8097 	beq.w	8003e94 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d66:	4b50      	ldr	r3, [pc, #320]	; (8003ea8 <HAL_RCC_OscConfig+0x494>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d061      	beq.n	8003e36 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d146      	bne.n	8003e08 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d7a:	4b4c      	ldr	r3, [pc, #304]	; (8003eac <HAL_RCC_OscConfig+0x498>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d80:	f7fe fa38 	bl	80021f4 <HAL_GetTick>
 8003d84:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d88:	f7fe fa34 	bl	80021f4 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b64      	cmp	r3, #100	; 0x64
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e07d      	b.n	8003e96 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9a:	4b43      	ldr	r3, [pc, #268]	; (8003ea8 <HAL_RCC_OscConfig+0x494>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f0      	bne.n	8003d88 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003da6:	4b40      	ldr	r3, [pc, #256]	; (8003ea8 <HAL_RCC_OscConfig+0x494>)
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	4b41      	ldr	r3, [pc, #260]	; (8003eb0 <HAL_RCC_OscConfig+0x49c>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	69d1      	ldr	r1, [r2, #28]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6a12      	ldr	r2, [r2, #32]
 8003db6:	4311      	orrs	r1, r2
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dbc:	0192      	lsls	r2, r2, #6
 8003dbe:	4311      	orrs	r1, r2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003dc4:	0612      	lsls	r2, r2, #24
 8003dc6:	4311      	orrs	r1, r2
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003dcc:	0852      	lsrs	r2, r2, #1
 8003dce:	3a01      	subs	r2, #1
 8003dd0:	0412      	lsls	r2, r2, #16
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	4934      	ldr	r1, [pc, #208]	; (8003ea8 <HAL_RCC_OscConfig+0x494>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dda:	4b34      	ldr	r3, [pc, #208]	; (8003eac <HAL_RCC_OscConfig+0x498>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de0:	f7fe fa08 	bl	80021f4 <HAL_GetTick>
 8003de4:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fe fa04 	bl	80021f4 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b64      	cmp	r3, #100	; 0x64
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e04d      	b.n	8003e96 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dfa:	4b2b      	ldr	r3, [pc, #172]	; (8003ea8 <HAL_RCC_OscConfig+0x494>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0f0      	beq.n	8003de8 <HAL_RCC_OscConfig+0x3d4>
 8003e06:	e045      	b.n	8003e94 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e08:	4b28      	ldr	r3, [pc, #160]	; (8003eac <HAL_RCC_OscConfig+0x498>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0e:	f7fe f9f1 	bl	80021f4 <HAL_GetTick>
 8003e12:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e16:	f7fe f9ed 	bl	80021f4 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b64      	cmp	r3, #100	; 0x64
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e036      	b.n	8003e96 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e28:	4b1f      	ldr	r3, [pc, #124]	; (8003ea8 <HAL_RCC_OscConfig+0x494>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1f0      	bne.n	8003e16 <HAL_RCC_OscConfig+0x402>
 8003e34:	e02e      	b.n	8003e94 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e029      	b.n	8003e96 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8003e42:	4b19      	ldr	r3, [pc, #100]	; (8003ea8 <HAL_RCC_OscConfig+0x494>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d11c      	bne.n	8003e90 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d115      	bne.n	8003e90 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	099b      	lsrs	r3, r3, #6
 8003e68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d10d      	bne.n	8003e90 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d106      	bne.n	8003e90 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3728      	adds	r7, #40	; 0x28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40007000 	.word	0x40007000
 8003ea4:	40023870 	.word	0x40023870
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	42470060 	.word	0x42470060
 8003eb0:	f0bc8000 	.word	0xf0bc8000

08003eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0d2      	b.n	800406e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ec8:	4b6b      	ldr	r3, [pc, #428]	; (8004078 <HAL_RCC_ClockConfig+0x1c4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 030f 	and.w	r3, r3, #15
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d90c      	bls.n	8003ef0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed6:	4b68      	ldr	r3, [pc, #416]	; (8004078 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ede:	4b66      	ldr	r3, [pc, #408]	; (8004078 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e0be      	b.n	800406e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d020      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f08:	4b5c      	ldr	r3, [pc, #368]	; (800407c <HAL_RCC_ClockConfig+0x1c8>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	4a5b      	ldr	r2, [pc, #364]	; (800407c <HAL_RCC_ClockConfig+0x1c8>)
 8003f0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8003f20:	4b56      	ldr	r3, [pc, #344]	; (800407c <HAL_RCC_ClockConfig+0x1c8>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	4a55      	ldr	r2, [pc, #340]	; (800407c <HAL_RCC_ClockConfig+0x1c8>)
 8003f26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f2c:	4b53      	ldr	r3, [pc, #332]	; (800407c <HAL_RCC_ClockConfig+0x1c8>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	4950      	ldr	r1, [pc, #320]	; (800407c <HAL_RCC_ClockConfig+0x1c8>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d040      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d107      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f52:	4b4a      	ldr	r3, [pc, #296]	; (800407c <HAL_RCC_ClockConfig+0x1c8>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d115      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e085      	b.n	800406e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d107      	bne.n	8003f7a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f6a:	4b44      	ldr	r3, [pc, #272]	; (800407c <HAL_RCC_ClockConfig+0x1c8>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d109      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e079      	b.n	800406e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f7a:	4b40      	ldr	r3, [pc, #256]	; (800407c <HAL_RCC_ClockConfig+0x1c8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e071      	b.n	800406e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f8a:	4b3c      	ldr	r3, [pc, #240]	; (800407c <HAL_RCC_ClockConfig+0x1c8>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f023 0203 	bic.w	r2, r3, #3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	4939      	ldr	r1, [pc, #228]	; (800407c <HAL_RCC_ClockConfig+0x1c8>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f9c:	f7fe f92a 	bl	80021f4 <HAL_GetTick>
 8003fa0:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa2:	e00a      	b.n	8003fba <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa4:	f7fe f926 	bl	80021f4 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e059      	b.n	800406e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fba:	4b30      	ldr	r3, [pc, #192]	; (800407c <HAL_RCC_ClockConfig+0x1c8>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 020c 	and.w	r2, r3, #12
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d1eb      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fcc:	4b2a      	ldr	r3, [pc, #168]	; (8004078 <HAL_RCC_ClockConfig+0x1c4>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d20c      	bcs.n	8003ff4 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fda:	4b27      	ldr	r3, [pc, #156]	; (8004078 <HAL_RCC_ClockConfig+0x1c4>)
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe2:	4b25      	ldr	r3, [pc, #148]	; (8004078 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d001      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e03c      	b.n	800406e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004000:	4b1e      	ldr	r3, [pc, #120]	; (800407c <HAL_RCC_ClockConfig+0x1c8>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	491b      	ldr	r1, [pc, #108]	; (800407c <HAL_RCC_ClockConfig+0x1c8>)
 800400e:	4313      	orrs	r3, r2
 8004010:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	2b00      	cmp	r3, #0
 800401c:	d009      	beq.n	8004032 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800401e:	4b17      	ldr	r3, [pc, #92]	; (800407c <HAL_RCC_ClockConfig+0x1c8>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	4913      	ldr	r1, [pc, #76]	; (800407c <HAL_RCC_ClockConfig+0x1c8>)
 800402e:	4313      	orrs	r3, r2
 8004030:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8004032:	f000 f82b 	bl	800408c <HAL_RCC_GetSysClockFreq>
 8004036:	4601      	mov	r1, r0
 8004038:	4b10      	ldr	r3, [pc, #64]	; (800407c <HAL_RCC_ClockConfig+0x1c8>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004040:	22f0      	movs	r2, #240	; 0xf0
 8004042:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	fa92 f2a2 	rbit	r2, r2
 800404a:	60fa      	str	r2, [r7, #12]
  return result;
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	fab2 f282 	clz	r2, r2
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	40d3      	lsrs	r3, r2
 8004056:	4a0a      	ldr	r2, [pc, #40]	; (8004080 <HAL_RCC_ClockConfig+0x1cc>)
 8004058:	5cd3      	ldrb	r3, [r2, r3]
 800405a:	fa21 f303 	lsr.w	r3, r1, r3
 800405e:	4a09      	ldr	r2, [pc, #36]	; (8004084 <HAL_RCC_ClockConfig+0x1d0>)
 8004060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004062:	4b09      	ldr	r3, [pc, #36]	; (8004088 <HAL_RCC_ClockConfig+0x1d4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f7fe f882 	bl	8002170 <HAL_InitTick>

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40023c00 	.word	0x40023c00
 800407c:	40023800 	.word	0x40023800
 8004080:	080080c4 	.word	0x080080c4
 8004084:	20000080 	.word	0x20000080
 8004088:	20000084 	.word	0x20000084

0800408c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800408c:	b5b0      	push	{r4, r5, r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004092:	2100      	movs	r1, #0
 8004094:	6079      	str	r1, [r7, #4]
 8004096:	2100      	movs	r1, #0
 8004098:	60f9      	str	r1, [r7, #12]
 800409a:	2100      	movs	r1, #0
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800409e:	2100      	movs	r1, #0
 80040a0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040a2:	4952      	ldr	r1, [pc, #328]	; (80041ec <HAL_RCC_GetSysClockFreq+0x160>)
 80040a4:	6889      	ldr	r1, [r1, #8]
 80040a6:	f001 010c 	and.w	r1, r1, #12
 80040aa:	2908      	cmp	r1, #8
 80040ac:	d00d      	beq.n	80040ca <HAL_RCC_GetSysClockFreq+0x3e>
 80040ae:	2908      	cmp	r1, #8
 80040b0:	f200 8094 	bhi.w	80041dc <HAL_RCC_GetSysClockFreq+0x150>
 80040b4:	2900      	cmp	r1, #0
 80040b6:	d002      	beq.n	80040be <HAL_RCC_GetSysClockFreq+0x32>
 80040b8:	2904      	cmp	r1, #4
 80040ba:	d003      	beq.n	80040c4 <HAL_RCC_GetSysClockFreq+0x38>
 80040bc:	e08e      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040be:	4b4c      	ldr	r3, [pc, #304]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80040c0:	60bb      	str	r3, [r7, #8]
       break;
 80040c2:	e08e      	b.n	80041e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040c4:	4b4b      	ldr	r3, [pc, #300]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80040c6:	60bb      	str	r3, [r7, #8]
      break;
 80040c8:	e08b      	b.n	80041e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040ca:	4948      	ldr	r1, [pc, #288]	; (80041ec <HAL_RCC_GetSysClockFreq+0x160>)
 80040cc:	6849      	ldr	r1, [r1, #4]
 80040ce:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80040d2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040d4:	4945      	ldr	r1, [pc, #276]	; (80041ec <HAL_RCC_GetSysClockFreq+0x160>)
 80040d6:	6849      	ldr	r1, [r1, #4]
 80040d8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80040dc:	2900      	cmp	r1, #0
 80040de:	d024      	beq.n	800412a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040e0:	4942      	ldr	r1, [pc, #264]	; (80041ec <HAL_RCC_GetSysClockFreq+0x160>)
 80040e2:	6849      	ldr	r1, [r1, #4]
 80040e4:	0989      	lsrs	r1, r1, #6
 80040e6:	4608      	mov	r0, r1
 80040e8:	f04f 0100 	mov.w	r1, #0
 80040ec:	f240 14ff 	movw	r4, #511	; 0x1ff
 80040f0:	f04f 0500 	mov.w	r5, #0
 80040f4:	ea00 0204 	and.w	r2, r0, r4
 80040f8:	ea01 0305 	and.w	r3, r1, r5
 80040fc:	493d      	ldr	r1, [pc, #244]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80040fe:	fb01 f003 	mul.w	r0, r1, r3
 8004102:	2100      	movs	r1, #0
 8004104:	fb01 f102 	mul.w	r1, r1, r2
 8004108:	1844      	adds	r4, r0, r1
 800410a:	493a      	ldr	r1, [pc, #232]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x168>)
 800410c:	fba2 0101 	umull	r0, r1, r2, r1
 8004110:	1863      	adds	r3, r4, r1
 8004112:	4619      	mov	r1, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	461a      	mov	r2, r3
 8004118:	f04f 0300 	mov.w	r3, #0
 800411c:	f7fd f83a 	bl	8001194 <__aeabi_uldivmod>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	4613      	mov	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	e04a      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800412a:	4b30      	ldr	r3, [pc, #192]	; (80041ec <HAL_RCC_GetSysClockFreq+0x160>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	099b      	lsrs	r3, r3, #6
 8004130:	461a      	mov	r2, r3
 8004132:	f04f 0300 	mov.w	r3, #0
 8004136:	f240 10ff 	movw	r0, #511	; 0x1ff
 800413a:	f04f 0100 	mov.w	r1, #0
 800413e:	ea02 0400 	and.w	r4, r2, r0
 8004142:	ea03 0501 	and.w	r5, r3, r1
 8004146:	4620      	mov	r0, r4
 8004148:	4629      	mov	r1, r5
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	014b      	lsls	r3, r1, #5
 8004154:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004158:	0142      	lsls	r2, r0, #5
 800415a:	4610      	mov	r0, r2
 800415c:	4619      	mov	r1, r3
 800415e:	1b00      	subs	r0, r0, r4
 8004160:	eb61 0105 	sbc.w	r1, r1, r5
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	018b      	lsls	r3, r1, #6
 800416e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004172:	0182      	lsls	r2, r0, #6
 8004174:	1a12      	subs	r2, r2, r0
 8004176:	eb63 0301 	sbc.w	r3, r3, r1
 800417a:	f04f 0000 	mov.w	r0, #0
 800417e:	f04f 0100 	mov.w	r1, #0
 8004182:	00d9      	lsls	r1, r3, #3
 8004184:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004188:	00d0      	lsls	r0, r2, #3
 800418a:	4602      	mov	r2, r0
 800418c:	460b      	mov	r3, r1
 800418e:	1912      	adds	r2, r2, r4
 8004190:	eb45 0303 	adc.w	r3, r5, r3
 8004194:	f04f 0000 	mov.w	r0, #0
 8004198:	f04f 0100 	mov.w	r1, #0
 800419c:	0299      	lsls	r1, r3, #10
 800419e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80041a2:	0290      	lsls	r0, r2, #10
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4610      	mov	r0, r2
 80041aa:	4619      	mov	r1, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	461a      	mov	r2, r3
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	f7fc ffee 	bl	8001194 <__aeabi_uldivmod>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	4613      	mov	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041c0:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <HAL_RCC_GetSysClockFreq+0x160>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	0c1b      	lsrs	r3, r3, #16
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	3301      	adds	r3, #1
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d8:	60bb      	str	r3, [r7, #8]
      break;
 80041da:	e002      	b.n	80041e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041dc:	4b04      	ldr	r3, [pc, #16]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80041de:	60bb      	str	r3, [r7, #8]
      break;
 80041e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041e2:	68bb      	ldr	r3, [r7, #8]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bdb0      	pop	{r4, r5, r7, pc}
 80041ec:	40023800 	.word	0x40023800
 80041f0:	00f42400 	.word	0x00f42400
 80041f4:	017d7840 	.word	0x017d7840

080041f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041fc:	4b02      	ldr	r3, [pc, #8]	; (8004208 <HAL_RCC_GetHCLKFreq+0x10>)
 80041fe:	681b      	ldr	r3, [r3, #0]
}
 8004200:	4618      	mov	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	bc80      	pop	{r7}
 8004206:	4770      	bx	lr
 8004208:	20000080 	.word	0x20000080

0800420c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8004212:	f7ff fff1 	bl	80041f8 <HAL_RCC_GetHCLKFreq>
 8004216:	4601      	mov	r1, r0
 8004218:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004220:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8004224:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	fa92 f2a2 	rbit	r2, r2
 800422c:	603a      	str	r2, [r7, #0]
  return result;
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	fab2 f282 	clz	r2, r2
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	40d3      	lsrs	r3, r2
 8004238:	4a04      	ldr	r2, [pc, #16]	; (800424c <HAL_RCC_GetPCLK1Freq+0x40>)
 800423a:	5cd3      	ldrb	r3, [r2, r3]
 800423c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004240:	4618      	mov	r0, r3
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40023800 	.word	0x40023800
 800424c:	080080d4 	.word	0x080080d4

08004250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8004256:	f7ff ffcf 	bl	80041f8 <HAL_RCC_GetHCLKFreq>
 800425a:	4601      	mov	r1, r0
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004264:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8004268:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	fa92 f2a2 	rbit	r2, r2
 8004270:	603a      	str	r2, [r7, #0]
  return result;
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	fab2 f282 	clz	r2, r2
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	40d3      	lsrs	r3, r2
 800427c:	4a04      	ldr	r2, [pc, #16]	; (8004290 <HAL_RCC_GetPCLK2Freq+0x40>)
 800427e:	5cd3      	ldrb	r3, [r2, r3]
 8004280:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40023800 	.word	0x40023800
 8004290:	080080d4 	.word	0x080080d4

08004294 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e03f      	b.n	8004326 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fd fda0 	bl	8001e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2224      	movs	r2, #36	; 0x24
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 fc27 	bl	8004b2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695a      	ldr	r2, [r3, #20]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800430c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b08a      	sub	sp, #40	; 0x28
 8004332:	af02      	add	r7, sp, #8
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	603b      	str	r3, [r7, #0]
 800433a:	4613      	mov	r3, r2
 800433c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b20      	cmp	r3, #32
 800434c:	d17c      	bne.n	8004448 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <HAL_UART_Transmit+0x2c>
 8004354:	88fb      	ldrh	r3, [r7, #6]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e075      	b.n	800444a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_UART_Transmit+0x3e>
 8004368:	2302      	movs	r3, #2
 800436a:	e06e      	b.n	800444a <HAL_UART_Transmit+0x11c>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2221      	movs	r2, #33	; 0x21
 800437e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004382:	f7fd ff37 	bl	80021f4 <HAL_GetTick>
 8004386:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	88fa      	ldrh	r2, [r7, #6]
 800438c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	88fa      	ldrh	r2, [r7, #6]
 8004392:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439c:	d108      	bne.n	80043b0 <HAL_UART_Transmit+0x82>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d104      	bne.n	80043b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	61bb      	str	r3, [r7, #24]
 80043ae:	e003      	b.n	80043b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043b4:	2300      	movs	r3, #0
 80043b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043c0:	e02a      	b.n	8004418 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2200      	movs	r2, #0
 80043ca:	2180      	movs	r1, #128	; 0x80
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 fa13 	bl	80047f8 <UART_WaitOnFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e036      	b.n	800444a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10b      	bne.n	80043fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	3302      	adds	r3, #2
 80043f6:	61bb      	str	r3, [r7, #24]
 80043f8:	e007      	b.n	800440a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	781a      	ldrb	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	3301      	adds	r3, #1
 8004408:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800441c:	b29b      	uxth	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1cf      	bne.n	80043c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2200      	movs	r2, #0
 800442a:	2140      	movs	r1, #64	; 0x40
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 f9e3 	bl	80047f8 <UART_WaitOnFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e006      	b.n	800444a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	e000      	b.n	800444a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004448:	2302      	movs	r3, #2
  }
}
 800444a:	4618      	mov	r0, r3
 800444c:	3720      	adds	r7, #32
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08a      	sub	sp, #40	; 0x28
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004474:	2300      	movs	r3, #0
 8004476:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004478:	2300      	movs	r3, #0
 800447a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10d      	bne.n	80044a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <HAL_UART_IRQHandler+0x52>
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fa9b 	bl	80049da <UART_Receive_IT>
      return;
 80044a4:	e17c      	b.n	80047a0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 80b1 	beq.w	8004610 <HAL_UART_IRQHandler+0x1bc>
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d105      	bne.n	80044c4 <HAL_UART_IRQHandler+0x70>
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 80a6 	beq.w	8004610 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_UART_IRQHandler+0x90>
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d005      	beq.n	80044e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	f043 0201 	orr.w	r2, r3, #1
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <HAL_UART_IRQHandler+0xb0>
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	f043 0202 	orr.w	r2, r3, #2
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <HAL_UART_IRQHandler+0xd0>
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	f043 0204 	orr.w	r2, r3, #4
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00f      	beq.n	800454e <HAL_UART_IRQHandler+0xfa>
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	f003 0320 	and.w	r3, r3, #32
 8004534:	2b00      	cmp	r3, #0
 8004536:	d104      	bne.n	8004542 <HAL_UART_IRQHandler+0xee>
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d005      	beq.n	800454e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f043 0208 	orr.w	r2, r3, #8
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 811f 	beq.w	8004796 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	f003 0320 	and.w	r3, r3, #32
 800455e:	2b00      	cmp	r3, #0
 8004560:	d007      	beq.n	8004572 <HAL_UART_IRQHandler+0x11e>
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	f003 0320 	and.w	r3, r3, #32
 8004568:	2b00      	cmp	r3, #0
 800456a:	d002      	beq.n	8004572 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 fa34 	bl	80049da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457c:	2b40      	cmp	r3, #64	; 0x40
 800457e:	bf0c      	ite	eq
 8004580:	2301      	moveq	r3, #1
 8004582:	2300      	movne	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b00      	cmp	r3, #0
 8004592:	d102      	bne.n	800459a <HAL_UART_IRQHandler+0x146>
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d031      	beq.n	80045fe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f976 	bl	800488c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045aa:	2b40      	cmp	r3, #64	; 0x40
 80045ac:	d123      	bne.n	80045f6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695a      	ldr	r2, [r3, #20]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045bc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d013      	beq.n	80045ee <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	4a77      	ldr	r2, [pc, #476]	; (80047a8 <HAL_UART_IRQHandler+0x354>)
 80045cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fe fdf8 	bl	80031c8 <HAL_DMA_Abort_IT>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d016      	beq.n	800460c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045e8:	4610      	mov	r0, r2
 80045ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ec:	e00e      	b.n	800460c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f8ee 	bl	80047d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f4:	e00a      	b.n	800460c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f8ea 	bl	80047d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045fc:	e006      	b.n	800460c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f8e6 	bl	80047d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800460a:	e0c4      	b.n	8004796 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800460c:	bf00      	nop
    return;
 800460e:	e0c2      	b.n	8004796 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004614:	2b01      	cmp	r3, #1
 8004616:	f040 80a2 	bne.w	800475e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 809c 	beq.w	800475e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	f003 0310 	and.w	r3, r3, #16
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 8096 	beq.w	800475e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004652:	2b40      	cmp	r3, #64	; 0x40
 8004654:	d14f      	bne.n	80046f6 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004660:	8a3b      	ldrh	r3, [r7, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 8099 	beq.w	800479a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800466c:	8a3a      	ldrh	r2, [r7, #16]
 800466e:	429a      	cmp	r2, r3
 8004670:	f080 8093 	bcs.w	800479a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	8a3a      	ldrh	r2, [r7, #16]
 8004678:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004684:	d02b      	beq.n	80046de <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68da      	ldr	r2, [r3, #12]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004694:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695a      	ldr	r2, [r3, #20]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0201 	bic.w	r2, r2, #1
 80046a4:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695a      	ldr	r2, [r3, #20]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b4:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0210 	bic.w	r2, r2, #16
 80046d2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d8:	4618      	mov	r0, r3
 80046da:	f7fe fd05 	bl	80030e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	4619      	mov	r1, r3
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f877 	bl	80047e2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80046f4:	e051      	b.n	800479a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046fe:	b29b      	uxth	r3, r3
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d047      	beq.n	800479e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800470e:	8a7b      	ldrh	r3, [r7, #18]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d044      	beq.n	800479e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004722:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695a      	ldr	r2, [r3, #20]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0201 	bic.w	r2, r2, #1
 8004732:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0210 	bic.w	r2, r2, #16
 8004750:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004752:	8a7b      	ldrh	r3, [r7, #18]
 8004754:	4619      	mov	r1, r3
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f843 	bl	80047e2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800475c:	e01f      	b.n	800479e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004764:	2b00      	cmp	r3, #0
 8004766:	d008      	beq.n	800477a <HAL_UART_IRQHandler+0x326>
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f8ca 	bl	800490c <UART_Transmit_IT>
    return;
 8004778:	e012      	b.n	80047a0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00d      	beq.n	80047a0 <HAL_UART_IRQHandler+0x34c>
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478a:	2b00      	cmp	r3, #0
 800478c:	d008      	beq.n	80047a0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f90b 	bl	80049aa <UART_EndTransmit_IT>
    return;
 8004794:	e004      	b.n	80047a0 <HAL_UART_IRQHandler+0x34c>
    return;
 8004796:	bf00      	nop
 8004798:	e002      	b.n	80047a0 <HAL_UART_IRQHandler+0x34c>
      return;
 800479a:	bf00      	nop
 800479c:	e000      	b.n	80047a0 <HAL_UART_IRQHandler+0x34c>
      return;
 800479e:	bf00      	nop
  }
}
 80047a0:	3728      	adds	r7, #40	; 0x28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	080048e5 	.word	0x080048e5

080047ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bc80      	pop	{r7}
 80047bc:	4770      	bx	lr

080047be <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bc80      	pop	{r7}
 80047ce:	4770      	bx	lr

080047d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr

080047e2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	460b      	mov	r3, r1
 80047ec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr

080047f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	4613      	mov	r3, r2
 8004806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004808:	e02c      	b.n	8004864 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004810:	d028      	beq.n	8004864 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d007      	beq.n	8004828 <UART_WaitOnFlagUntilTimeout+0x30>
 8004818:	f7fd fcec 	bl	80021f4 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	429a      	cmp	r2, r3
 8004826:	d21d      	bcs.n	8004864 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004836:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695a      	ldr	r2, [r3, #20]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0201 	bic.w	r2, r2, #1
 8004846:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e00f      	b.n	8004884 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	4013      	ands	r3, r2
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	429a      	cmp	r2, r3
 8004872:	bf0c      	ite	eq
 8004874:	2301      	moveq	r3, #1
 8004876:	2300      	movne	r3, #0
 8004878:	b2db      	uxtb	r3, r3
 800487a:	461a      	mov	r2, r3
 800487c:	79fb      	ldrb	r3, [r7, #7]
 800487e:	429a      	cmp	r2, r3
 8004880:	d0c3      	beq.n	800480a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048a2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695a      	ldr	r2, [r3, #20]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0201 	bic.w	r2, r2, #1
 80048b2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d107      	bne.n	80048cc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0210 	bic.w	r2, r2, #16
 80048ca:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	bc80      	pop	{r7}
 80048e2:	4770      	bx	lr

080048e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f7ff ff66 	bl	80047d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004904:	bf00      	nop
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b21      	cmp	r3, #33	; 0x21
 800491e:	d13e      	bne.n	800499e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004928:	d114      	bne.n	8004954 <UART_Transmit_IT+0x48>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d110      	bne.n	8004954 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	461a      	mov	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004946:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	1c9a      	adds	r2, r3, #2
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	621a      	str	r2, [r3, #32]
 8004952:	e008      	b.n	8004966 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	1c59      	adds	r1, r3, #1
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6211      	str	r1, [r2, #32]
 800495e:	781a      	ldrb	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29b      	uxth	r3, r3
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	4619      	mov	r1, r3
 8004974:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10f      	bne.n	800499a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004988:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004998:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800499a:	2300      	movs	r3, #0
 800499c:	e000      	b.n	80049a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800499e:	2302      	movs	r3, #2
  }
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bc80      	pop	{r7}
 80049a8:	4770      	bx	lr

080049aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b082      	sub	sp, #8
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68da      	ldr	r2, [r3, #12]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7ff feee 	bl	80047ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b086      	sub	sp, #24
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b22      	cmp	r3, #34	; 0x22
 80049ec:	f040 8099 	bne.w	8004b22 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f8:	d117      	bne.n	8004a2a <UART_Receive_IT+0x50>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d113      	bne.n	8004a2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a22:	1c9a      	adds	r2, r3, #2
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	629a      	str	r2, [r3, #40]	; 0x28
 8004a28:	e026      	b.n	8004a78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004a30:	2300      	movs	r3, #0
 8004a32:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a3c:	d007      	beq.n	8004a4e <UART_Receive_IT+0x74>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10a      	bne.n	8004a5c <UART_Receive_IT+0x82>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	701a      	strb	r2, [r3, #0]
 8004a5a:	e008      	b.n	8004a6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	4619      	mov	r1, r3
 8004a86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d148      	bne.n	8004b1e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0220 	bic.w	r2, r2, #32
 8004a9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004aaa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695a      	ldr	r2, [r3, #20]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0201 	bic.w	r2, r2, #1
 8004aba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d123      	bne.n	8004b14 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0210 	bic.w	r2, r2, #16
 8004ae0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0310 	and.w	r3, r3, #16
 8004aec:	2b10      	cmp	r3, #16
 8004aee:	d10a      	bne.n	8004b06 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7ff fe68 	bl	80047e2 <HAL_UARTEx_RxEventCallback>
 8004b12:	e002      	b.n	8004b1a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7ff fe52 	bl	80047be <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e002      	b.n	8004b24 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	e000      	b.n	8004b24 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004b22:	2302      	movs	r3, #2
  }
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3718      	adds	r7, #24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004b6c:	f023 030c 	bic.w	r3, r3, #12
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6812      	ldr	r2, [r2, #0]
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	430b      	orrs	r3, r1
 8004b78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	699a      	ldr	r2, [r3, #24]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a57      	ldr	r2, [pc, #348]	; (8004cf4 <UART_SetConfig+0x1c8>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d004      	beq.n	8004ba4 <UART_SetConfig+0x78>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a56      	ldr	r2, [pc, #344]	; (8004cf8 <UART_SetConfig+0x1cc>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d103      	bne.n	8004bac <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ba4:	f7ff fb54 	bl	8004250 <HAL_RCC_GetPCLK2Freq>
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	e002      	b.n	8004bb2 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004bac:	f7ff fb2e 	bl	800420c <HAL_RCC_GetPCLK1Freq>
 8004bb0:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bba:	d14c      	bne.n	8004c56 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009a      	lsls	r2, r3, #2
 8004bc6:	441a      	add	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd2:	4a4a      	ldr	r2, [pc, #296]	; (8004cfc <UART_SetConfig+0x1d0>)
 8004bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd8:	095b      	lsrs	r3, r3, #5
 8004bda:	0119      	lsls	r1, r3, #4
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4613      	mov	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	009a      	lsls	r2, r3, #2
 8004be6:	441a      	add	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bf2:	4b42      	ldr	r3, [pc, #264]	; (8004cfc <UART_SetConfig+0x1d0>)
 8004bf4:	fba3 0302 	umull	r0, r3, r3, r2
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	2064      	movs	r0, #100	; 0x64
 8004bfc:	fb00 f303 	mul.w	r3, r0, r3
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	3332      	adds	r3, #50	; 0x32
 8004c06:	4a3d      	ldr	r2, [pc, #244]	; (8004cfc <UART_SetConfig+0x1d0>)
 8004c08:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0c:	095b      	lsrs	r3, r3, #5
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c14:	4419      	add	r1, r3
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	009a      	lsls	r2, r3, #2
 8004c20:	441a      	add	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c2c:	4b33      	ldr	r3, [pc, #204]	; (8004cfc <UART_SetConfig+0x1d0>)
 8004c2e:	fba3 0302 	umull	r0, r3, r3, r2
 8004c32:	095b      	lsrs	r3, r3, #5
 8004c34:	2064      	movs	r0, #100	; 0x64
 8004c36:	fb00 f303 	mul.w	r3, r0, r3
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	3332      	adds	r3, #50	; 0x32
 8004c40:	4a2e      	ldr	r2, [pc, #184]	; (8004cfc <UART_SetConfig+0x1d0>)
 8004c42:	fba2 2303 	umull	r2, r3, r2, r3
 8004c46:	095b      	lsrs	r3, r3, #5
 8004c48:	f003 0207 	and.w	r2, r3, #7
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	440a      	add	r2, r1
 8004c52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c54:	e04a      	b.n	8004cec <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	009a      	lsls	r2, r3, #2
 8004c60:	441a      	add	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6c:	4a23      	ldr	r2, [pc, #140]	; (8004cfc <UART_SetConfig+0x1d0>)
 8004c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	0119      	lsls	r1, r3, #4
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009a      	lsls	r2, r3, #2
 8004c80:	441a      	add	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c8c:	4b1b      	ldr	r3, [pc, #108]	; (8004cfc <UART_SetConfig+0x1d0>)
 8004c8e:	fba3 0302 	umull	r0, r3, r3, r2
 8004c92:	095b      	lsrs	r3, r3, #5
 8004c94:	2064      	movs	r0, #100	; 0x64
 8004c96:	fb00 f303 	mul.w	r3, r0, r3
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	3332      	adds	r3, #50	; 0x32
 8004ca0:	4a16      	ldr	r2, [pc, #88]	; (8004cfc <UART_SetConfig+0x1d0>)
 8004ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca6:	095b      	lsrs	r3, r3, #5
 8004ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cac:	4419      	add	r1, r3
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	009a      	lsls	r2, r3, #2
 8004cb8:	441a      	add	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cc4:	4b0d      	ldr	r3, [pc, #52]	; (8004cfc <UART_SetConfig+0x1d0>)
 8004cc6:	fba3 0302 	umull	r0, r3, r3, r2
 8004cca:	095b      	lsrs	r3, r3, #5
 8004ccc:	2064      	movs	r0, #100	; 0x64
 8004cce:	fb00 f303 	mul.w	r3, r0, r3
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	3332      	adds	r3, #50	; 0x32
 8004cd8:	4a08      	ldr	r2, [pc, #32]	; (8004cfc <UART_SetConfig+0x1d0>)
 8004cda:	fba2 2303 	umull	r2, r3, r2, r3
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	f003 020f 	and.w	r2, r3, #15
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	440a      	add	r2, r1
 8004cea:	609a      	str	r2, [r3, #8]
}
 8004cec:	bf00      	nop
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	40011000 	.word	0x40011000
 8004cf8:	40011400 	.word	0x40011400
 8004cfc:	51eb851f 	.word	0x51eb851f

08004d00 <__errno>:
 8004d00:	4b01      	ldr	r3, [pc, #4]	; (8004d08 <__errno+0x8>)
 8004d02:	6818      	ldr	r0, [r3, #0]
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	2000008c 	.word	0x2000008c

08004d0c <__libc_init_array>:
 8004d0c:	b570      	push	{r4, r5, r6, lr}
 8004d0e:	2600      	movs	r6, #0
 8004d10:	4d0c      	ldr	r5, [pc, #48]	; (8004d44 <__libc_init_array+0x38>)
 8004d12:	4c0d      	ldr	r4, [pc, #52]	; (8004d48 <__libc_init_array+0x3c>)
 8004d14:	1b64      	subs	r4, r4, r5
 8004d16:	10a4      	asrs	r4, r4, #2
 8004d18:	42a6      	cmp	r6, r4
 8004d1a:	d109      	bne.n	8004d30 <__libc_init_array+0x24>
 8004d1c:	f003 f9b2 	bl	8008084 <_init>
 8004d20:	2600      	movs	r6, #0
 8004d22:	4d0a      	ldr	r5, [pc, #40]	; (8004d4c <__libc_init_array+0x40>)
 8004d24:	4c0a      	ldr	r4, [pc, #40]	; (8004d50 <__libc_init_array+0x44>)
 8004d26:	1b64      	subs	r4, r4, r5
 8004d28:	10a4      	asrs	r4, r4, #2
 8004d2a:	42a6      	cmp	r6, r4
 8004d2c:	d105      	bne.n	8004d3a <__libc_init_array+0x2e>
 8004d2e:	bd70      	pop	{r4, r5, r6, pc}
 8004d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d34:	4798      	blx	r3
 8004d36:	3601      	adds	r6, #1
 8004d38:	e7ee      	b.n	8004d18 <__libc_init_array+0xc>
 8004d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d3e:	4798      	blx	r3
 8004d40:	3601      	adds	r6, #1
 8004d42:	e7f2      	b.n	8004d2a <__libc_init_array+0x1e>
 8004d44:	080084cc 	.word	0x080084cc
 8004d48:	080084cc 	.word	0x080084cc
 8004d4c:	080084cc 	.word	0x080084cc
 8004d50:	080084d0 	.word	0x080084d0

08004d54 <memset>:
 8004d54:	4603      	mov	r3, r0
 8004d56:	4402      	add	r2, r0
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d100      	bne.n	8004d5e <memset+0xa>
 8004d5c:	4770      	bx	lr
 8004d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d62:	e7f9      	b.n	8004d58 <memset+0x4>

08004d64 <__cvt>:
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d6a:	461f      	mov	r7, r3
 8004d6c:	bfbb      	ittet	lt
 8004d6e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004d72:	461f      	movlt	r7, r3
 8004d74:	2300      	movge	r3, #0
 8004d76:	232d      	movlt	r3, #45	; 0x2d
 8004d78:	b088      	sub	sp, #32
 8004d7a:	4614      	mov	r4, r2
 8004d7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d7e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004d80:	7013      	strb	r3, [r2, #0]
 8004d82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004d84:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004d88:	f023 0820 	bic.w	r8, r3, #32
 8004d8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d90:	d005      	beq.n	8004d9e <__cvt+0x3a>
 8004d92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d96:	d100      	bne.n	8004d9a <__cvt+0x36>
 8004d98:	3501      	adds	r5, #1
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	e000      	b.n	8004da0 <__cvt+0x3c>
 8004d9e:	2303      	movs	r3, #3
 8004da0:	aa07      	add	r2, sp, #28
 8004da2:	9204      	str	r2, [sp, #16]
 8004da4:	aa06      	add	r2, sp, #24
 8004da6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004daa:	e9cd 3500 	strd	r3, r5, [sp]
 8004dae:	4622      	mov	r2, r4
 8004db0:	463b      	mov	r3, r7
 8004db2:	f000 fcfd 	bl	80057b0 <_dtoa_r>
 8004db6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004dba:	4606      	mov	r6, r0
 8004dbc:	d102      	bne.n	8004dc4 <__cvt+0x60>
 8004dbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004dc0:	07db      	lsls	r3, r3, #31
 8004dc2:	d522      	bpl.n	8004e0a <__cvt+0xa6>
 8004dc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004dc8:	eb06 0905 	add.w	r9, r6, r5
 8004dcc:	d110      	bne.n	8004df0 <__cvt+0x8c>
 8004dce:	7833      	ldrb	r3, [r6, #0]
 8004dd0:	2b30      	cmp	r3, #48	; 0x30
 8004dd2:	d10a      	bne.n	8004dea <__cvt+0x86>
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	4620      	mov	r0, r4
 8004dda:	4639      	mov	r1, r7
 8004ddc:	f7fb fe20 	bl	8000a20 <__aeabi_dcmpeq>
 8004de0:	b918      	cbnz	r0, 8004dea <__cvt+0x86>
 8004de2:	f1c5 0501 	rsb	r5, r5, #1
 8004de6:	f8ca 5000 	str.w	r5, [sl]
 8004dea:	f8da 3000 	ldr.w	r3, [sl]
 8004dee:	4499      	add	r9, r3
 8004df0:	2200      	movs	r2, #0
 8004df2:	2300      	movs	r3, #0
 8004df4:	4620      	mov	r0, r4
 8004df6:	4639      	mov	r1, r7
 8004df8:	f7fb fe12 	bl	8000a20 <__aeabi_dcmpeq>
 8004dfc:	b108      	cbz	r0, 8004e02 <__cvt+0x9e>
 8004dfe:	f8cd 901c 	str.w	r9, [sp, #28]
 8004e02:	2230      	movs	r2, #48	; 0x30
 8004e04:	9b07      	ldr	r3, [sp, #28]
 8004e06:	454b      	cmp	r3, r9
 8004e08:	d307      	bcc.n	8004e1a <__cvt+0xb6>
 8004e0a:	4630      	mov	r0, r6
 8004e0c:	9b07      	ldr	r3, [sp, #28]
 8004e0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004e10:	1b9b      	subs	r3, r3, r6
 8004e12:	6013      	str	r3, [r2, #0]
 8004e14:	b008      	add	sp, #32
 8004e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e1a:	1c59      	adds	r1, r3, #1
 8004e1c:	9107      	str	r1, [sp, #28]
 8004e1e:	701a      	strb	r2, [r3, #0]
 8004e20:	e7f0      	b.n	8004e04 <__cvt+0xa0>

08004e22 <__exponent>:
 8004e22:	4603      	mov	r3, r0
 8004e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e26:	2900      	cmp	r1, #0
 8004e28:	f803 2b02 	strb.w	r2, [r3], #2
 8004e2c:	bfb6      	itet	lt
 8004e2e:	222d      	movlt	r2, #45	; 0x2d
 8004e30:	222b      	movge	r2, #43	; 0x2b
 8004e32:	4249      	neglt	r1, r1
 8004e34:	2909      	cmp	r1, #9
 8004e36:	7042      	strb	r2, [r0, #1]
 8004e38:	dd2b      	ble.n	8004e92 <__exponent+0x70>
 8004e3a:	f10d 0407 	add.w	r4, sp, #7
 8004e3e:	46a4      	mov	ip, r4
 8004e40:	270a      	movs	r7, #10
 8004e42:	fb91 f6f7 	sdiv	r6, r1, r7
 8004e46:	460a      	mov	r2, r1
 8004e48:	46a6      	mov	lr, r4
 8004e4a:	fb07 1516 	mls	r5, r7, r6, r1
 8004e4e:	2a63      	cmp	r2, #99	; 0x63
 8004e50:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004e54:	4631      	mov	r1, r6
 8004e56:	f104 34ff 	add.w	r4, r4, #4294967295
 8004e5a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004e5e:	dcf0      	bgt.n	8004e42 <__exponent+0x20>
 8004e60:	3130      	adds	r1, #48	; 0x30
 8004e62:	f1ae 0502 	sub.w	r5, lr, #2
 8004e66:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	1c44      	adds	r4, r0, #1
 8004e6e:	4561      	cmp	r1, ip
 8004e70:	d30a      	bcc.n	8004e88 <__exponent+0x66>
 8004e72:	f10d 0209 	add.w	r2, sp, #9
 8004e76:	eba2 020e 	sub.w	r2, r2, lr
 8004e7a:	4565      	cmp	r5, ip
 8004e7c:	bf88      	it	hi
 8004e7e:	2200      	movhi	r2, #0
 8004e80:	4413      	add	r3, r2
 8004e82:	1a18      	subs	r0, r3, r0
 8004e84:	b003      	add	sp, #12
 8004e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e88:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e8c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004e90:	e7ed      	b.n	8004e6e <__exponent+0x4c>
 8004e92:	2330      	movs	r3, #48	; 0x30
 8004e94:	3130      	adds	r1, #48	; 0x30
 8004e96:	7083      	strb	r3, [r0, #2]
 8004e98:	70c1      	strb	r1, [r0, #3]
 8004e9a:	1d03      	adds	r3, r0, #4
 8004e9c:	e7f1      	b.n	8004e82 <__exponent+0x60>
	...

08004ea0 <_printf_float>:
 8004ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea4:	b091      	sub	sp, #68	; 0x44
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004eac:	4616      	mov	r6, r2
 8004eae:	461f      	mov	r7, r3
 8004eb0:	4605      	mov	r5, r0
 8004eb2:	f001 fb61 	bl	8006578 <_localeconv_r>
 8004eb6:	6803      	ldr	r3, [r0, #0]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	9309      	str	r3, [sp, #36]	; 0x24
 8004ebc:	f7fb f984 	bl	80001c8 <strlen>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	930e      	str	r3, [sp, #56]	; 0x38
 8004ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ec8:	900a      	str	r0, [sp, #40]	; 0x28
 8004eca:	3307      	adds	r3, #7
 8004ecc:	f023 0307 	bic.w	r3, r3, #7
 8004ed0:	f103 0208 	add.w	r2, r3, #8
 8004ed4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004ed8:	f8d4 b000 	ldr.w	fp, [r4]
 8004edc:	f8c8 2000 	str.w	r2, [r8]
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004ee8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004eec:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004ef0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef6:	4640      	mov	r0, r8
 8004ef8:	4b9c      	ldr	r3, [pc, #624]	; (800516c <_printf_float+0x2cc>)
 8004efa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004efc:	f7fb fdc2 	bl	8000a84 <__aeabi_dcmpun>
 8004f00:	bb70      	cbnz	r0, 8004f60 <_printf_float+0xc0>
 8004f02:	f04f 32ff 	mov.w	r2, #4294967295
 8004f06:	4640      	mov	r0, r8
 8004f08:	4b98      	ldr	r3, [pc, #608]	; (800516c <_printf_float+0x2cc>)
 8004f0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f0c:	f7fb fd9c 	bl	8000a48 <__aeabi_dcmple>
 8004f10:	bb30      	cbnz	r0, 8004f60 <_printf_float+0xc0>
 8004f12:	2200      	movs	r2, #0
 8004f14:	2300      	movs	r3, #0
 8004f16:	4640      	mov	r0, r8
 8004f18:	4651      	mov	r1, sl
 8004f1a:	f7fb fd8b 	bl	8000a34 <__aeabi_dcmplt>
 8004f1e:	b110      	cbz	r0, 8004f26 <_printf_float+0x86>
 8004f20:	232d      	movs	r3, #45	; 0x2d
 8004f22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f26:	4b92      	ldr	r3, [pc, #584]	; (8005170 <_printf_float+0x2d0>)
 8004f28:	4892      	ldr	r0, [pc, #584]	; (8005174 <_printf_float+0x2d4>)
 8004f2a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004f2e:	bf94      	ite	ls
 8004f30:	4698      	movls	r8, r3
 8004f32:	4680      	movhi	r8, r0
 8004f34:	2303      	movs	r3, #3
 8004f36:	f04f 0a00 	mov.w	sl, #0
 8004f3a:	6123      	str	r3, [r4, #16]
 8004f3c:	f02b 0304 	bic.w	r3, fp, #4
 8004f40:	6023      	str	r3, [r4, #0]
 8004f42:	4633      	mov	r3, r6
 8004f44:	4621      	mov	r1, r4
 8004f46:	4628      	mov	r0, r5
 8004f48:	9700      	str	r7, [sp, #0]
 8004f4a:	aa0f      	add	r2, sp, #60	; 0x3c
 8004f4c:	f000 f9d4 	bl	80052f8 <_printf_common>
 8004f50:	3001      	adds	r0, #1
 8004f52:	f040 8090 	bne.w	8005076 <_printf_float+0x1d6>
 8004f56:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5a:	b011      	add	sp, #68	; 0x44
 8004f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f60:	4642      	mov	r2, r8
 8004f62:	4653      	mov	r3, sl
 8004f64:	4640      	mov	r0, r8
 8004f66:	4651      	mov	r1, sl
 8004f68:	f7fb fd8c 	bl	8000a84 <__aeabi_dcmpun>
 8004f6c:	b148      	cbz	r0, 8004f82 <_printf_float+0xe2>
 8004f6e:	f1ba 0f00 	cmp.w	sl, #0
 8004f72:	bfb8      	it	lt
 8004f74:	232d      	movlt	r3, #45	; 0x2d
 8004f76:	4880      	ldr	r0, [pc, #512]	; (8005178 <_printf_float+0x2d8>)
 8004f78:	bfb8      	it	lt
 8004f7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f7e:	4b7f      	ldr	r3, [pc, #508]	; (800517c <_printf_float+0x2dc>)
 8004f80:	e7d3      	b.n	8004f2a <_printf_float+0x8a>
 8004f82:	6863      	ldr	r3, [r4, #4]
 8004f84:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	d142      	bne.n	8005012 <_printf_float+0x172>
 8004f8c:	2306      	movs	r3, #6
 8004f8e:	6063      	str	r3, [r4, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	9206      	str	r2, [sp, #24]
 8004f94:	aa0e      	add	r2, sp, #56	; 0x38
 8004f96:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004f9a:	aa0d      	add	r2, sp, #52	; 0x34
 8004f9c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004fa0:	9203      	str	r2, [sp, #12]
 8004fa2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004fa6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004faa:	6023      	str	r3, [r4, #0]
 8004fac:	6863      	ldr	r3, [r4, #4]
 8004fae:	4642      	mov	r2, r8
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	4653      	mov	r3, sl
 8004fb6:	910b      	str	r1, [sp, #44]	; 0x2c
 8004fb8:	f7ff fed4 	bl	8004d64 <__cvt>
 8004fbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004fbe:	4680      	mov	r8, r0
 8004fc0:	2947      	cmp	r1, #71	; 0x47
 8004fc2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004fc4:	d108      	bne.n	8004fd8 <_printf_float+0x138>
 8004fc6:	1cc8      	adds	r0, r1, #3
 8004fc8:	db02      	blt.n	8004fd0 <_printf_float+0x130>
 8004fca:	6863      	ldr	r3, [r4, #4]
 8004fcc:	4299      	cmp	r1, r3
 8004fce:	dd40      	ble.n	8005052 <_printf_float+0x1b2>
 8004fd0:	f1a9 0902 	sub.w	r9, r9, #2
 8004fd4:	fa5f f989 	uxtb.w	r9, r9
 8004fd8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004fdc:	d81f      	bhi.n	800501e <_printf_float+0x17e>
 8004fde:	464a      	mov	r2, r9
 8004fe0:	3901      	subs	r1, #1
 8004fe2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004fe6:	910d      	str	r1, [sp, #52]	; 0x34
 8004fe8:	f7ff ff1b 	bl	8004e22 <__exponent>
 8004fec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fee:	4682      	mov	sl, r0
 8004ff0:	1813      	adds	r3, r2, r0
 8004ff2:	2a01      	cmp	r2, #1
 8004ff4:	6123      	str	r3, [r4, #16]
 8004ff6:	dc02      	bgt.n	8004ffe <_printf_float+0x15e>
 8004ff8:	6822      	ldr	r2, [r4, #0]
 8004ffa:	07d2      	lsls	r2, r2, #31
 8004ffc:	d501      	bpl.n	8005002 <_printf_float+0x162>
 8004ffe:	3301      	adds	r3, #1
 8005000:	6123      	str	r3, [r4, #16]
 8005002:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005006:	2b00      	cmp	r3, #0
 8005008:	d09b      	beq.n	8004f42 <_printf_float+0xa2>
 800500a:	232d      	movs	r3, #45	; 0x2d
 800500c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005010:	e797      	b.n	8004f42 <_printf_float+0xa2>
 8005012:	2947      	cmp	r1, #71	; 0x47
 8005014:	d1bc      	bne.n	8004f90 <_printf_float+0xf0>
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1ba      	bne.n	8004f90 <_printf_float+0xf0>
 800501a:	2301      	movs	r3, #1
 800501c:	e7b7      	b.n	8004f8e <_printf_float+0xee>
 800501e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005022:	d118      	bne.n	8005056 <_printf_float+0x1b6>
 8005024:	2900      	cmp	r1, #0
 8005026:	6863      	ldr	r3, [r4, #4]
 8005028:	dd0b      	ble.n	8005042 <_printf_float+0x1a2>
 800502a:	6121      	str	r1, [r4, #16]
 800502c:	b913      	cbnz	r3, 8005034 <_printf_float+0x194>
 800502e:	6822      	ldr	r2, [r4, #0]
 8005030:	07d0      	lsls	r0, r2, #31
 8005032:	d502      	bpl.n	800503a <_printf_float+0x19a>
 8005034:	3301      	adds	r3, #1
 8005036:	440b      	add	r3, r1
 8005038:	6123      	str	r3, [r4, #16]
 800503a:	f04f 0a00 	mov.w	sl, #0
 800503e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005040:	e7df      	b.n	8005002 <_printf_float+0x162>
 8005042:	b913      	cbnz	r3, 800504a <_printf_float+0x1aa>
 8005044:	6822      	ldr	r2, [r4, #0]
 8005046:	07d2      	lsls	r2, r2, #31
 8005048:	d501      	bpl.n	800504e <_printf_float+0x1ae>
 800504a:	3302      	adds	r3, #2
 800504c:	e7f4      	b.n	8005038 <_printf_float+0x198>
 800504e:	2301      	movs	r3, #1
 8005050:	e7f2      	b.n	8005038 <_printf_float+0x198>
 8005052:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005056:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005058:	4299      	cmp	r1, r3
 800505a:	db05      	blt.n	8005068 <_printf_float+0x1c8>
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	6121      	str	r1, [r4, #16]
 8005060:	07d8      	lsls	r0, r3, #31
 8005062:	d5ea      	bpl.n	800503a <_printf_float+0x19a>
 8005064:	1c4b      	adds	r3, r1, #1
 8005066:	e7e7      	b.n	8005038 <_printf_float+0x198>
 8005068:	2900      	cmp	r1, #0
 800506a:	bfcc      	ite	gt
 800506c:	2201      	movgt	r2, #1
 800506e:	f1c1 0202 	rsble	r2, r1, #2
 8005072:	4413      	add	r3, r2
 8005074:	e7e0      	b.n	8005038 <_printf_float+0x198>
 8005076:	6823      	ldr	r3, [r4, #0]
 8005078:	055a      	lsls	r2, r3, #21
 800507a:	d407      	bmi.n	800508c <_printf_float+0x1ec>
 800507c:	6923      	ldr	r3, [r4, #16]
 800507e:	4642      	mov	r2, r8
 8005080:	4631      	mov	r1, r6
 8005082:	4628      	mov	r0, r5
 8005084:	47b8      	blx	r7
 8005086:	3001      	adds	r0, #1
 8005088:	d12b      	bne.n	80050e2 <_printf_float+0x242>
 800508a:	e764      	b.n	8004f56 <_printf_float+0xb6>
 800508c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005090:	f240 80dd 	bls.w	800524e <_printf_float+0x3ae>
 8005094:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005098:	2200      	movs	r2, #0
 800509a:	2300      	movs	r3, #0
 800509c:	f7fb fcc0 	bl	8000a20 <__aeabi_dcmpeq>
 80050a0:	2800      	cmp	r0, #0
 80050a2:	d033      	beq.n	800510c <_printf_float+0x26c>
 80050a4:	2301      	movs	r3, #1
 80050a6:	4631      	mov	r1, r6
 80050a8:	4628      	mov	r0, r5
 80050aa:	4a35      	ldr	r2, [pc, #212]	; (8005180 <_printf_float+0x2e0>)
 80050ac:	47b8      	blx	r7
 80050ae:	3001      	adds	r0, #1
 80050b0:	f43f af51 	beq.w	8004f56 <_printf_float+0xb6>
 80050b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80050b8:	429a      	cmp	r2, r3
 80050ba:	db02      	blt.n	80050c2 <_printf_float+0x222>
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	07d8      	lsls	r0, r3, #31
 80050c0:	d50f      	bpl.n	80050e2 <_printf_float+0x242>
 80050c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050c6:	4631      	mov	r1, r6
 80050c8:	4628      	mov	r0, r5
 80050ca:	47b8      	blx	r7
 80050cc:	3001      	adds	r0, #1
 80050ce:	f43f af42 	beq.w	8004f56 <_printf_float+0xb6>
 80050d2:	f04f 0800 	mov.w	r8, #0
 80050d6:	f104 091a 	add.w	r9, r4, #26
 80050da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050dc:	3b01      	subs	r3, #1
 80050de:	4543      	cmp	r3, r8
 80050e0:	dc09      	bgt.n	80050f6 <_printf_float+0x256>
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	079b      	lsls	r3, r3, #30
 80050e6:	f100 8102 	bmi.w	80052ee <_printf_float+0x44e>
 80050ea:	68e0      	ldr	r0, [r4, #12]
 80050ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050ee:	4298      	cmp	r0, r3
 80050f0:	bfb8      	it	lt
 80050f2:	4618      	movlt	r0, r3
 80050f4:	e731      	b.n	8004f5a <_printf_float+0xba>
 80050f6:	2301      	movs	r3, #1
 80050f8:	464a      	mov	r2, r9
 80050fa:	4631      	mov	r1, r6
 80050fc:	4628      	mov	r0, r5
 80050fe:	47b8      	blx	r7
 8005100:	3001      	adds	r0, #1
 8005102:	f43f af28 	beq.w	8004f56 <_printf_float+0xb6>
 8005106:	f108 0801 	add.w	r8, r8, #1
 800510a:	e7e6      	b.n	80050da <_printf_float+0x23a>
 800510c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800510e:	2b00      	cmp	r3, #0
 8005110:	dc38      	bgt.n	8005184 <_printf_float+0x2e4>
 8005112:	2301      	movs	r3, #1
 8005114:	4631      	mov	r1, r6
 8005116:	4628      	mov	r0, r5
 8005118:	4a19      	ldr	r2, [pc, #100]	; (8005180 <_printf_float+0x2e0>)
 800511a:	47b8      	blx	r7
 800511c:	3001      	adds	r0, #1
 800511e:	f43f af1a 	beq.w	8004f56 <_printf_float+0xb6>
 8005122:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005126:	4313      	orrs	r3, r2
 8005128:	d102      	bne.n	8005130 <_printf_float+0x290>
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	07d9      	lsls	r1, r3, #31
 800512e:	d5d8      	bpl.n	80050e2 <_printf_float+0x242>
 8005130:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005134:	4631      	mov	r1, r6
 8005136:	4628      	mov	r0, r5
 8005138:	47b8      	blx	r7
 800513a:	3001      	adds	r0, #1
 800513c:	f43f af0b 	beq.w	8004f56 <_printf_float+0xb6>
 8005140:	f04f 0900 	mov.w	r9, #0
 8005144:	f104 0a1a 	add.w	sl, r4, #26
 8005148:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800514a:	425b      	negs	r3, r3
 800514c:	454b      	cmp	r3, r9
 800514e:	dc01      	bgt.n	8005154 <_printf_float+0x2b4>
 8005150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005152:	e794      	b.n	800507e <_printf_float+0x1de>
 8005154:	2301      	movs	r3, #1
 8005156:	4652      	mov	r2, sl
 8005158:	4631      	mov	r1, r6
 800515a:	4628      	mov	r0, r5
 800515c:	47b8      	blx	r7
 800515e:	3001      	adds	r0, #1
 8005160:	f43f aef9 	beq.w	8004f56 <_printf_float+0xb6>
 8005164:	f109 0901 	add.w	r9, r9, #1
 8005168:	e7ee      	b.n	8005148 <_printf_float+0x2a8>
 800516a:	bf00      	nop
 800516c:	7fefffff 	.word	0x7fefffff
 8005170:	080080e8 	.word	0x080080e8
 8005174:	080080ec 	.word	0x080080ec
 8005178:	080080f4 	.word	0x080080f4
 800517c:	080080f0 	.word	0x080080f0
 8005180:	080080f8 	.word	0x080080f8
 8005184:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005186:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005188:	429a      	cmp	r2, r3
 800518a:	bfa8      	it	ge
 800518c:	461a      	movge	r2, r3
 800518e:	2a00      	cmp	r2, #0
 8005190:	4691      	mov	r9, r2
 8005192:	dc37      	bgt.n	8005204 <_printf_float+0x364>
 8005194:	f04f 0b00 	mov.w	fp, #0
 8005198:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800519c:	f104 021a 	add.w	r2, r4, #26
 80051a0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80051a4:	ebaa 0309 	sub.w	r3, sl, r9
 80051a8:	455b      	cmp	r3, fp
 80051aa:	dc33      	bgt.n	8005214 <_printf_float+0x374>
 80051ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80051b0:	429a      	cmp	r2, r3
 80051b2:	db3b      	blt.n	800522c <_printf_float+0x38c>
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	07da      	lsls	r2, r3, #31
 80051b8:	d438      	bmi.n	800522c <_printf_float+0x38c>
 80051ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80051be:	eba2 030a 	sub.w	r3, r2, sl
 80051c2:	eba2 0901 	sub.w	r9, r2, r1
 80051c6:	4599      	cmp	r9, r3
 80051c8:	bfa8      	it	ge
 80051ca:	4699      	movge	r9, r3
 80051cc:	f1b9 0f00 	cmp.w	r9, #0
 80051d0:	dc34      	bgt.n	800523c <_printf_float+0x39c>
 80051d2:	f04f 0800 	mov.w	r8, #0
 80051d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051da:	f104 0a1a 	add.w	sl, r4, #26
 80051de:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80051e2:	1a9b      	subs	r3, r3, r2
 80051e4:	eba3 0309 	sub.w	r3, r3, r9
 80051e8:	4543      	cmp	r3, r8
 80051ea:	f77f af7a 	ble.w	80050e2 <_printf_float+0x242>
 80051ee:	2301      	movs	r3, #1
 80051f0:	4652      	mov	r2, sl
 80051f2:	4631      	mov	r1, r6
 80051f4:	4628      	mov	r0, r5
 80051f6:	47b8      	blx	r7
 80051f8:	3001      	adds	r0, #1
 80051fa:	f43f aeac 	beq.w	8004f56 <_printf_float+0xb6>
 80051fe:	f108 0801 	add.w	r8, r8, #1
 8005202:	e7ec      	b.n	80051de <_printf_float+0x33e>
 8005204:	4613      	mov	r3, r2
 8005206:	4631      	mov	r1, r6
 8005208:	4642      	mov	r2, r8
 800520a:	4628      	mov	r0, r5
 800520c:	47b8      	blx	r7
 800520e:	3001      	adds	r0, #1
 8005210:	d1c0      	bne.n	8005194 <_printf_float+0x2f4>
 8005212:	e6a0      	b.n	8004f56 <_printf_float+0xb6>
 8005214:	2301      	movs	r3, #1
 8005216:	4631      	mov	r1, r6
 8005218:	4628      	mov	r0, r5
 800521a:	920b      	str	r2, [sp, #44]	; 0x2c
 800521c:	47b8      	blx	r7
 800521e:	3001      	adds	r0, #1
 8005220:	f43f ae99 	beq.w	8004f56 <_printf_float+0xb6>
 8005224:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005226:	f10b 0b01 	add.w	fp, fp, #1
 800522a:	e7b9      	b.n	80051a0 <_printf_float+0x300>
 800522c:	4631      	mov	r1, r6
 800522e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005232:	4628      	mov	r0, r5
 8005234:	47b8      	blx	r7
 8005236:	3001      	adds	r0, #1
 8005238:	d1bf      	bne.n	80051ba <_printf_float+0x31a>
 800523a:	e68c      	b.n	8004f56 <_printf_float+0xb6>
 800523c:	464b      	mov	r3, r9
 800523e:	4631      	mov	r1, r6
 8005240:	4628      	mov	r0, r5
 8005242:	eb08 020a 	add.w	r2, r8, sl
 8005246:	47b8      	blx	r7
 8005248:	3001      	adds	r0, #1
 800524a:	d1c2      	bne.n	80051d2 <_printf_float+0x332>
 800524c:	e683      	b.n	8004f56 <_printf_float+0xb6>
 800524e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005250:	2a01      	cmp	r2, #1
 8005252:	dc01      	bgt.n	8005258 <_printf_float+0x3b8>
 8005254:	07db      	lsls	r3, r3, #31
 8005256:	d537      	bpl.n	80052c8 <_printf_float+0x428>
 8005258:	2301      	movs	r3, #1
 800525a:	4642      	mov	r2, r8
 800525c:	4631      	mov	r1, r6
 800525e:	4628      	mov	r0, r5
 8005260:	47b8      	blx	r7
 8005262:	3001      	adds	r0, #1
 8005264:	f43f ae77 	beq.w	8004f56 <_printf_float+0xb6>
 8005268:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800526c:	4631      	mov	r1, r6
 800526e:	4628      	mov	r0, r5
 8005270:	47b8      	blx	r7
 8005272:	3001      	adds	r0, #1
 8005274:	f43f ae6f 	beq.w	8004f56 <_printf_float+0xb6>
 8005278:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800527c:	2200      	movs	r2, #0
 800527e:	2300      	movs	r3, #0
 8005280:	f7fb fbce 	bl	8000a20 <__aeabi_dcmpeq>
 8005284:	b9d8      	cbnz	r0, 80052be <_printf_float+0x41e>
 8005286:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005288:	f108 0201 	add.w	r2, r8, #1
 800528c:	3b01      	subs	r3, #1
 800528e:	4631      	mov	r1, r6
 8005290:	4628      	mov	r0, r5
 8005292:	47b8      	blx	r7
 8005294:	3001      	adds	r0, #1
 8005296:	d10e      	bne.n	80052b6 <_printf_float+0x416>
 8005298:	e65d      	b.n	8004f56 <_printf_float+0xb6>
 800529a:	2301      	movs	r3, #1
 800529c:	464a      	mov	r2, r9
 800529e:	4631      	mov	r1, r6
 80052a0:	4628      	mov	r0, r5
 80052a2:	47b8      	blx	r7
 80052a4:	3001      	adds	r0, #1
 80052a6:	f43f ae56 	beq.w	8004f56 <_printf_float+0xb6>
 80052aa:	f108 0801 	add.w	r8, r8, #1
 80052ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052b0:	3b01      	subs	r3, #1
 80052b2:	4543      	cmp	r3, r8
 80052b4:	dcf1      	bgt.n	800529a <_printf_float+0x3fa>
 80052b6:	4653      	mov	r3, sl
 80052b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80052bc:	e6e0      	b.n	8005080 <_printf_float+0x1e0>
 80052be:	f04f 0800 	mov.w	r8, #0
 80052c2:	f104 091a 	add.w	r9, r4, #26
 80052c6:	e7f2      	b.n	80052ae <_printf_float+0x40e>
 80052c8:	2301      	movs	r3, #1
 80052ca:	4642      	mov	r2, r8
 80052cc:	e7df      	b.n	800528e <_printf_float+0x3ee>
 80052ce:	2301      	movs	r3, #1
 80052d0:	464a      	mov	r2, r9
 80052d2:	4631      	mov	r1, r6
 80052d4:	4628      	mov	r0, r5
 80052d6:	47b8      	blx	r7
 80052d8:	3001      	adds	r0, #1
 80052da:	f43f ae3c 	beq.w	8004f56 <_printf_float+0xb6>
 80052de:	f108 0801 	add.w	r8, r8, #1
 80052e2:	68e3      	ldr	r3, [r4, #12]
 80052e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80052e6:	1a5b      	subs	r3, r3, r1
 80052e8:	4543      	cmp	r3, r8
 80052ea:	dcf0      	bgt.n	80052ce <_printf_float+0x42e>
 80052ec:	e6fd      	b.n	80050ea <_printf_float+0x24a>
 80052ee:	f04f 0800 	mov.w	r8, #0
 80052f2:	f104 0919 	add.w	r9, r4, #25
 80052f6:	e7f4      	b.n	80052e2 <_printf_float+0x442>

080052f8 <_printf_common>:
 80052f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052fc:	4616      	mov	r6, r2
 80052fe:	4699      	mov	r9, r3
 8005300:	688a      	ldr	r2, [r1, #8]
 8005302:	690b      	ldr	r3, [r1, #16]
 8005304:	4607      	mov	r7, r0
 8005306:	4293      	cmp	r3, r2
 8005308:	bfb8      	it	lt
 800530a:	4613      	movlt	r3, r2
 800530c:	6033      	str	r3, [r6, #0]
 800530e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005312:	460c      	mov	r4, r1
 8005314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005318:	b10a      	cbz	r2, 800531e <_printf_common+0x26>
 800531a:	3301      	adds	r3, #1
 800531c:	6033      	str	r3, [r6, #0]
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	0699      	lsls	r1, r3, #26
 8005322:	bf42      	ittt	mi
 8005324:	6833      	ldrmi	r3, [r6, #0]
 8005326:	3302      	addmi	r3, #2
 8005328:	6033      	strmi	r3, [r6, #0]
 800532a:	6825      	ldr	r5, [r4, #0]
 800532c:	f015 0506 	ands.w	r5, r5, #6
 8005330:	d106      	bne.n	8005340 <_printf_common+0x48>
 8005332:	f104 0a19 	add.w	sl, r4, #25
 8005336:	68e3      	ldr	r3, [r4, #12]
 8005338:	6832      	ldr	r2, [r6, #0]
 800533a:	1a9b      	subs	r3, r3, r2
 800533c:	42ab      	cmp	r3, r5
 800533e:	dc28      	bgt.n	8005392 <_printf_common+0x9a>
 8005340:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005344:	1e13      	subs	r3, r2, #0
 8005346:	6822      	ldr	r2, [r4, #0]
 8005348:	bf18      	it	ne
 800534a:	2301      	movne	r3, #1
 800534c:	0692      	lsls	r2, r2, #26
 800534e:	d42d      	bmi.n	80053ac <_printf_common+0xb4>
 8005350:	4649      	mov	r1, r9
 8005352:	4638      	mov	r0, r7
 8005354:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005358:	47c0      	blx	r8
 800535a:	3001      	adds	r0, #1
 800535c:	d020      	beq.n	80053a0 <_printf_common+0xa8>
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	68e5      	ldr	r5, [r4, #12]
 8005362:	f003 0306 	and.w	r3, r3, #6
 8005366:	2b04      	cmp	r3, #4
 8005368:	bf18      	it	ne
 800536a:	2500      	movne	r5, #0
 800536c:	6832      	ldr	r2, [r6, #0]
 800536e:	f04f 0600 	mov.w	r6, #0
 8005372:	68a3      	ldr	r3, [r4, #8]
 8005374:	bf08      	it	eq
 8005376:	1aad      	subeq	r5, r5, r2
 8005378:	6922      	ldr	r2, [r4, #16]
 800537a:	bf08      	it	eq
 800537c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005380:	4293      	cmp	r3, r2
 8005382:	bfc4      	itt	gt
 8005384:	1a9b      	subgt	r3, r3, r2
 8005386:	18ed      	addgt	r5, r5, r3
 8005388:	341a      	adds	r4, #26
 800538a:	42b5      	cmp	r5, r6
 800538c:	d11a      	bne.n	80053c4 <_printf_common+0xcc>
 800538e:	2000      	movs	r0, #0
 8005390:	e008      	b.n	80053a4 <_printf_common+0xac>
 8005392:	2301      	movs	r3, #1
 8005394:	4652      	mov	r2, sl
 8005396:	4649      	mov	r1, r9
 8005398:	4638      	mov	r0, r7
 800539a:	47c0      	blx	r8
 800539c:	3001      	adds	r0, #1
 800539e:	d103      	bne.n	80053a8 <_printf_common+0xb0>
 80053a0:	f04f 30ff 	mov.w	r0, #4294967295
 80053a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053a8:	3501      	adds	r5, #1
 80053aa:	e7c4      	b.n	8005336 <_printf_common+0x3e>
 80053ac:	2030      	movs	r0, #48	; 0x30
 80053ae:	18e1      	adds	r1, r4, r3
 80053b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053ba:	4422      	add	r2, r4
 80053bc:	3302      	adds	r3, #2
 80053be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053c2:	e7c5      	b.n	8005350 <_printf_common+0x58>
 80053c4:	2301      	movs	r3, #1
 80053c6:	4622      	mov	r2, r4
 80053c8:	4649      	mov	r1, r9
 80053ca:	4638      	mov	r0, r7
 80053cc:	47c0      	blx	r8
 80053ce:	3001      	adds	r0, #1
 80053d0:	d0e6      	beq.n	80053a0 <_printf_common+0xa8>
 80053d2:	3601      	adds	r6, #1
 80053d4:	e7d9      	b.n	800538a <_printf_common+0x92>
	...

080053d8 <_printf_i>:
 80053d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053dc:	460c      	mov	r4, r1
 80053de:	7e27      	ldrb	r7, [r4, #24]
 80053e0:	4691      	mov	r9, r2
 80053e2:	2f78      	cmp	r7, #120	; 0x78
 80053e4:	4680      	mov	r8, r0
 80053e6:	469a      	mov	sl, r3
 80053e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80053ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053ee:	d807      	bhi.n	8005400 <_printf_i+0x28>
 80053f0:	2f62      	cmp	r7, #98	; 0x62
 80053f2:	d80a      	bhi.n	800540a <_printf_i+0x32>
 80053f4:	2f00      	cmp	r7, #0
 80053f6:	f000 80d9 	beq.w	80055ac <_printf_i+0x1d4>
 80053fa:	2f58      	cmp	r7, #88	; 0x58
 80053fc:	f000 80a4 	beq.w	8005548 <_printf_i+0x170>
 8005400:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005404:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005408:	e03a      	b.n	8005480 <_printf_i+0xa8>
 800540a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800540e:	2b15      	cmp	r3, #21
 8005410:	d8f6      	bhi.n	8005400 <_printf_i+0x28>
 8005412:	a001      	add	r0, pc, #4	; (adr r0, 8005418 <_printf_i+0x40>)
 8005414:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005418:	08005471 	.word	0x08005471
 800541c:	08005485 	.word	0x08005485
 8005420:	08005401 	.word	0x08005401
 8005424:	08005401 	.word	0x08005401
 8005428:	08005401 	.word	0x08005401
 800542c:	08005401 	.word	0x08005401
 8005430:	08005485 	.word	0x08005485
 8005434:	08005401 	.word	0x08005401
 8005438:	08005401 	.word	0x08005401
 800543c:	08005401 	.word	0x08005401
 8005440:	08005401 	.word	0x08005401
 8005444:	08005593 	.word	0x08005593
 8005448:	080054b5 	.word	0x080054b5
 800544c:	08005575 	.word	0x08005575
 8005450:	08005401 	.word	0x08005401
 8005454:	08005401 	.word	0x08005401
 8005458:	080055b5 	.word	0x080055b5
 800545c:	08005401 	.word	0x08005401
 8005460:	080054b5 	.word	0x080054b5
 8005464:	08005401 	.word	0x08005401
 8005468:	08005401 	.word	0x08005401
 800546c:	0800557d 	.word	0x0800557d
 8005470:	680b      	ldr	r3, [r1, #0]
 8005472:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005476:	1d1a      	adds	r2, r3, #4
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	600a      	str	r2, [r1, #0]
 800547c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005480:	2301      	movs	r3, #1
 8005482:	e0a4      	b.n	80055ce <_printf_i+0x1f6>
 8005484:	6825      	ldr	r5, [r4, #0]
 8005486:	6808      	ldr	r0, [r1, #0]
 8005488:	062e      	lsls	r6, r5, #24
 800548a:	f100 0304 	add.w	r3, r0, #4
 800548e:	d50a      	bpl.n	80054a6 <_printf_i+0xce>
 8005490:	6805      	ldr	r5, [r0, #0]
 8005492:	600b      	str	r3, [r1, #0]
 8005494:	2d00      	cmp	r5, #0
 8005496:	da03      	bge.n	80054a0 <_printf_i+0xc8>
 8005498:	232d      	movs	r3, #45	; 0x2d
 800549a:	426d      	negs	r5, r5
 800549c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054a0:	230a      	movs	r3, #10
 80054a2:	485e      	ldr	r0, [pc, #376]	; (800561c <_printf_i+0x244>)
 80054a4:	e019      	b.n	80054da <_printf_i+0x102>
 80054a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80054aa:	6805      	ldr	r5, [r0, #0]
 80054ac:	600b      	str	r3, [r1, #0]
 80054ae:	bf18      	it	ne
 80054b0:	b22d      	sxthne	r5, r5
 80054b2:	e7ef      	b.n	8005494 <_printf_i+0xbc>
 80054b4:	680b      	ldr	r3, [r1, #0]
 80054b6:	6825      	ldr	r5, [r4, #0]
 80054b8:	1d18      	adds	r0, r3, #4
 80054ba:	6008      	str	r0, [r1, #0]
 80054bc:	0628      	lsls	r0, r5, #24
 80054be:	d501      	bpl.n	80054c4 <_printf_i+0xec>
 80054c0:	681d      	ldr	r5, [r3, #0]
 80054c2:	e002      	b.n	80054ca <_printf_i+0xf2>
 80054c4:	0669      	lsls	r1, r5, #25
 80054c6:	d5fb      	bpl.n	80054c0 <_printf_i+0xe8>
 80054c8:	881d      	ldrh	r5, [r3, #0]
 80054ca:	2f6f      	cmp	r7, #111	; 0x6f
 80054cc:	bf0c      	ite	eq
 80054ce:	2308      	moveq	r3, #8
 80054d0:	230a      	movne	r3, #10
 80054d2:	4852      	ldr	r0, [pc, #328]	; (800561c <_printf_i+0x244>)
 80054d4:	2100      	movs	r1, #0
 80054d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054da:	6866      	ldr	r6, [r4, #4]
 80054dc:	2e00      	cmp	r6, #0
 80054de:	bfa8      	it	ge
 80054e0:	6821      	ldrge	r1, [r4, #0]
 80054e2:	60a6      	str	r6, [r4, #8]
 80054e4:	bfa4      	itt	ge
 80054e6:	f021 0104 	bicge.w	r1, r1, #4
 80054ea:	6021      	strge	r1, [r4, #0]
 80054ec:	b90d      	cbnz	r5, 80054f2 <_printf_i+0x11a>
 80054ee:	2e00      	cmp	r6, #0
 80054f0:	d04d      	beq.n	800558e <_printf_i+0x1b6>
 80054f2:	4616      	mov	r6, r2
 80054f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80054f8:	fb03 5711 	mls	r7, r3, r1, r5
 80054fc:	5dc7      	ldrb	r7, [r0, r7]
 80054fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005502:	462f      	mov	r7, r5
 8005504:	42bb      	cmp	r3, r7
 8005506:	460d      	mov	r5, r1
 8005508:	d9f4      	bls.n	80054f4 <_printf_i+0x11c>
 800550a:	2b08      	cmp	r3, #8
 800550c:	d10b      	bne.n	8005526 <_printf_i+0x14e>
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	07df      	lsls	r7, r3, #31
 8005512:	d508      	bpl.n	8005526 <_printf_i+0x14e>
 8005514:	6923      	ldr	r3, [r4, #16]
 8005516:	6861      	ldr	r1, [r4, #4]
 8005518:	4299      	cmp	r1, r3
 800551a:	bfde      	ittt	le
 800551c:	2330      	movle	r3, #48	; 0x30
 800551e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005522:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005526:	1b92      	subs	r2, r2, r6
 8005528:	6122      	str	r2, [r4, #16]
 800552a:	464b      	mov	r3, r9
 800552c:	4621      	mov	r1, r4
 800552e:	4640      	mov	r0, r8
 8005530:	f8cd a000 	str.w	sl, [sp]
 8005534:	aa03      	add	r2, sp, #12
 8005536:	f7ff fedf 	bl	80052f8 <_printf_common>
 800553a:	3001      	adds	r0, #1
 800553c:	d14c      	bne.n	80055d8 <_printf_i+0x200>
 800553e:	f04f 30ff 	mov.w	r0, #4294967295
 8005542:	b004      	add	sp, #16
 8005544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005548:	4834      	ldr	r0, [pc, #208]	; (800561c <_printf_i+0x244>)
 800554a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800554e:	680e      	ldr	r6, [r1, #0]
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	f856 5b04 	ldr.w	r5, [r6], #4
 8005556:	061f      	lsls	r7, r3, #24
 8005558:	600e      	str	r6, [r1, #0]
 800555a:	d514      	bpl.n	8005586 <_printf_i+0x1ae>
 800555c:	07d9      	lsls	r1, r3, #31
 800555e:	bf44      	itt	mi
 8005560:	f043 0320 	orrmi.w	r3, r3, #32
 8005564:	6023      	strmi	r3, [r4, #0]
 8005566:	b91d      	cbnz	r5, 8005570 <_printf_i+0x198>
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	f023 0320 	bic.w	r3, r3, #32
 800556e:	6023      	str	r3, [r4, #0]
 8005570:	2310      	movs	r3, #16
 8005572:	e7af      	b.n	80054d4 <_printf_i+0xfc>
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	f043 0320 	orr.w	r3, r3, #32
 800557a:	6023      	str	r3, [r4, #0]
 800557c:	2378      	movs	r3, #120	; 0x78
 800557e:	4828      	ldr	r0, [pc, #160]	; (8005620 <_printf_i+0x248>)
 8005580:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005584:	e7e3      	b.n	800554e <_printf_i+0x176>
 8005586:	065e      	lsls	r6, r3, #25
 8005588:	bf48      	it	mi
 800558a:	b2ad      	uxthmi	r5, r5
 800558c:	e7e6      	b.n	800555c <_printf_i+0x184>
 800558e:	4616      	mov	r6, r2
 8005590:	e7bb      	b.n	800550a <_printf_i+0x132>
 8005592:	680b      	ldr	r3, [r1, #0]
 8005594:	6826      	ldr	r6, [r4, #0]
 8005596:	1d1d      	adds	r5, r3, #4
 8005598:	6960      	ldr	r0, [r4, #20]
 800559a:	600d      	str	r5, [r1, #0]
 800559c:	0635      	lsls	r5, r6, #24
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	d501      	bpl.n	80055a6 <_printf_i+0x1ce>
 80055a2:	6018      	str	r0, [r3, #0]
 80055a4:	e002      	b.n	80055ac <_printf_i+0x1d4>
 80055a6:	0671      	lsls	r1, r6, #25
 80055a8:	d5fb      	bpl.n	80055a2 <_printf_i+0x1ca>
 80055aa:	8018      	strh	r0, [r3, #0]
 80055ac:	2300      	movs	r3, #0
 80055ae:	4616      	mov	r6, r2
 80055b0:	6123      	str	r3, [r4, #16]
 80055b2:	e7ba      	b.n	800552a <_printf_i+0x152>
 80055b4:	680b      	ldr	r3, [r1, #0]
 80055b6:	1d1a      	adds	r2, r3, #4
 80055b8:	600a      	str	r2, [r1, #0]
 80055ba:	681e      	ldr	r6, [r3, #0]
 80055bc:	2100      	movs	r1, #0
 80055be:	4630      	mov	r0, r6
 80055c0:	6862      	ldr	r2, [r4, #4]
 80055c2:	f000 ffe9 	bl	8006598 <memchr>
 80055c6:	b108      	cbz	r0, 80055cc <_printf_i+0x1f4>
 80055c8:	1b80      	subs	r0, r0, r6
 80055ca:	6060      	str	r0, [r4, #4]
 80055cc:	6863      	ldr	r3, [r4, #4]
 80055ce:	6123      	str	r3, [r4, #16]
 80055d0:	2300      	movs	r3, #0
 80055d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055d6:	e7a8      	b.n	800552a <_printf_i+0x152>
 80055d8:	4632      	mov	r2, r6
 80055da:	4649      	mov	r1, r9
 80055dc:	4640      	mov	r0, r8
 80055de:	6923      	ldr	r3, [r4, #16]
 80055e0:	47d0      	blx	sl
 80055e2:	3001      	adds	r0, #1
 80055e4:	d0ab      	beq.n	800553e <_printf_i+0x166>
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	079b      	lsls	r3, r3, #30
 80055ea:	d413      	bmi.n	8005614 <_printf_i+0x23c>
 80055ec:	68e0      	ldr	r0, [r4, #12]
 80055ee:	9b03      	ldr	r3, [sp, #12]
 80055f0:	4298      	cmp	r0, r3
 80055f2:	bfb8      	it	lt
 80055f4:	4618      	movlt	r0, r3
 80055f6:	e7a4      	b.n	8005542 <_printf_i+0x16a>
 80055f8:	2301      	movs	r3, #1
 80055fa:	4632      	mov	r2, r6
 80055fc:	4649      	mov	r1, r9
 80055fe:	4640      	mov	r0, r8
 8005600:	47d0      	blx	sl
 8005602:	3001      	adds	r0, #1
 8005604:	d09b      	beq.n	800553e <_printf_i+0x166>
 8005606:	3501      	adds	r5, #1
 8005608:	68e3      	ldr	r3, [r4, #12]
 800560a:	9903      	ldr	r1, [sp, #12]
 800560c:	1a5b      	subs	r3, r3, r1
 800560e:	42ab      	cmp	r3, r5
 8005610:	dcf2      	bgt.n	80055f8 <_printf_i+0x220>
 8005612:	e7eb      	b.n	80055ec <_printf_i+0x214>
 8005614:	2500      	movs	r5, #0
 8005616:	f104 0619 	add.w	r6, r4, #25
 800561a:	e7f5      	b.n	8005608 <_printf_i+0x230>
 800561c:	080080fa 	.word	0x080080fa
 8005620:	0800810b 	.word	0x0800810b

08005624 <iprintf>:
 8005624:	b40f      	push	{r0, r1, r2, r3}
 8005626:	4b0a      	ldr	r3, [pc, #40]	; (8005650 <iprintf+0x2c>)
 8005628:	b513      	push	{r0, r1, r4, lr}
 800562a:	681c      	ldr	r4, [r3, #0]
 800562c:	b124      	cbz	r4, 8005638 <iprintf+0x14>
 800562e:	69a3      	ldr	r3, [r4, #24]
 8005630:	b913      	cbnz	r3, 8005638 <iprintf+0x14>
 8005632:	4620      	mov	r0, r4
 8005634:	f000 ff02 	bl	800643c <__sinit>
 8005638:	ab05      	add	r3, sp, #20
 800563a:	4620      	mov	r0, r4
 800563c:	9a04      	ldr	r2, [sp, #16]
 800563e:	68a1      	ldr	r1, [r4, #8]
 8005640:	9301      	str	r3, [sp, #4]
 8005642:	f001 fd7f 	bl	8007144 <_vfiprintf_r>
 8005646:	b002      	add	sp, #8
 8005648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800564c:	b004      	add	sp, #16
 800564e:	4770      	bx	lr
 8005650:	2000008c 	.word	0x2000008c

08005654 <siprintf>:
 8005654:	b40e      	push	{r1, r2, r3}
 8005656:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800565a:	b500      	push	{lr}
 800565c:	b09c      	sub	sp, #112	; 0x70
 800565e:	ab1d      	add	r3, sp, #116	; 0x74
 8005660:	9002      	str	r0, [sp, #8]
 8005662:	9006      	str	r0, [sp, #24]
 8005664:	9107      	str	r1, [sp, #28]
 8005666:	9104      	str	r1, [sp, #16]
 8005668:	4808      	ldr	r0, [pc, #32]	; (800568c <siprintf+0x38>)
 800566a:	4909      	ldr	r1, [pc, #36]	; (8005690 <siprintf+0x3c>)
 800566c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005670:	9105      	str	r1, [sp, #20]
 8005672:	6800      	ldr	r0, [r0, #0]
 8005674:	a902      	add	r1, sp, #8
 8005676:	9301      	str	r3, [sp, #4]
 8005678:	f001 fc3c 	bl	8006ef4 <_svfiprintf_r>
 800567c:	2200      	movs	r2, #0
 800567e:	9b02      	ldr	r3, [sp, #8]
 8005680:	701a      	strb	r2, [r3, #0]
 8005682:	b01c      	add	sp, #112	; 0x70
 8005684:	f85d eb04 	ldr.w	lr, [sp], #4
 8005688:	b003      	add	sp, #12
 800568a:	4770      	bx	lr
 800568c:	2000008c 	.word	0x2000008c
 8005690:	ffff0208 	.word	0xffff0208

08005694 <quorem>:
 8005694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005698:	6903      	ldr	r3, [r0, #16]
 800569a:	690c      	ldr	r4, [r1, #16]
 800569c:	4607      	mov	r7, r0
 800569e:	42a3      	cmp	r3, r4
 80056a0:	f2c0 8083 	blt.w	80057aa <quorem+0x116>
 80056a4:	3c01      	subs	r4, #1
 80056a6:	f100 0514 	add.w	r5, r0, #20
 80056aa:	f101 0814 	add.w	r8, r1, #20
 80056ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056b2:	9301      	str	r3, [sp, #4]
 80056b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80056b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056bc:	3301      	adds	r3, #1
 80056be:	429a      	cmp	r2, r3
 80056c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80056c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80056c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80056cc:	d332      	bcc.n	8005734 <quorem+0xa0>
 80056ce:	f04f 0e00 	mov.w	lr, #0
 80056d2:	4640      	mov	r0, r8
 80056d4:	46ac      	mov	ip, r5
 80056d6:	46f2      	mov	sl, lr
 80056d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80056dc:	b293      	uxth	r3, r2
 80056de:	fb06 e303 	mla	r3, r6, r3, lr
 80056e2:	0c12      	lsrs	r2, r2, #16
 80056e4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80056e8:	fb06 e202 	mla	r2, r6, r2, lr
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	ebaa 0303 	sub.w	r3, sl, r3
 80056f2:	f8dc a000 	ldr.w	sl, [ip]
 80056f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80056fa:	fa1f fa8a 	uxth.w	sl, sl
 80056fe:	4453      	add	r3, sl
 8005700:	fa1f fa82 	uxth.w	sl, r2
 8005704:	f8dc 2000 	ldr.w	r2, [ip]
 8005708:	4581      	cmp	r9, r0
 800570a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800570e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005712:	b29b      	uxth	r3, r3
 8005714:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005718:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800571c:	f84c 3b04 	str.w	r3, [ip], #4
 8005720:	d2da      	bcs.n	80056d8 <quorem+0x44>
 8005722:	f855 300b 	ldr.w	r3, [r5, fp]
 8005726:	b92b      	cbnz	r3, 8005734 <quorem+0xa0>
 8005728:	9b01      	ldr	r3, [sp, #4]
 800572a:	3b04      	subs	r3, #4
 800572c:	429d      	cmp	r5, r3
 800572e:	461a      	mov	r2, r3
 8005730:	d32f      	bcc.n	8005792 <quorem+0xfe>
 8005732:	613c      	str	r4, [r7, #16]
 8005734:	4638      	mov	r0, r7
 8005736:	f001 f9c5 	bl	8006ac4 <__mcmp>
 800573a:	2800      	cmp	r0, #0
 800573c:	db25      	blt.n	800578a <quorem+0xf6>
 800573e:	4628      	mov	r0, r5
 8005740:	f04f 0c00 	mov.w	ip, #0
 8005744:	3601      	adds	r6, #1
 8005746:	f858 1b04 	ldr.w	r1, [r8], #4
 800574a:	f8d0 e000 	ldr.w	lr, [r0]
 800574e:	b28b      	uxth	r3, r1
 8005750:	ebac 0303 	sub.w	r3, ip, r3
 8005754:	fa1f f28e 	uxth.w	r2, lr
 8005758:	4413      	add	r3, r2
 800575a:	0c0a      	lsrs	r2, r1, #16
 800575c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005760:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005764:	b29b      	uxth	r3, r3
 8005766:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800576a:	45c1      	cmp	r9, r8
 800576c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005770:	f840 3b04 	str.w	r3, [r0], #4
 8005774:	d2e7      	bcs.n	8005746 <quorem+0xb2>
 8005776:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800577a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800577e:	b922      	cbnz	r2, 800578a <quorem+0xf6>
 8005780:	3b04      	subs	r3, #4
 8005782:	429d      	cmp	r5, r3
 8005784:	461a      	mov	r2, r3
 8005786:	d30a      	bcc.n	800579e <quorem+0x10a>
 8005788:	613c      	str	r4, [r7, #16]
 800578a:	4630      	mov	r0, r6
 800578c:	b003      	add	sp, #12
 800578e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005792:	6812      	ldr	r2, [r2, #0]
 8005794:	3b04      	subs	r3, #4
 8005796:	2a00      	cmp	r2, #0
 8005798:	d1cb      	bne.n	8005732 <quorem+0x9e>
 800579a:	3c01      	subs	r4, #1
 800579c:	e7c6      	b.n	800572c <quorem+0x98>
 800579e:	6812      	ldr	r2, [r2, #0]
 80057a0:	3b04      	subs	r3, #4
 80057a2:	2a00      	cmp	r2, #0
 80057a4:	d1f0      	bne.n	8005788 <quorem+0xf4>
 80057a6:	3c01      	subs	r4, #1
 80057a8:	e7eb      	b.n	8005782 <quorem+0xee>
 80057aa:	2000      	movs	r0, #0
 80057ac:	e7ee      	b.n	800578c <quorem+0xf8>
	...

080057b0 <_dtoa_r>:
 80057b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b4:	4616      	mov	r6, r2
 80057b6:	461f      	mov	r7, r3
 80057b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80057ba:	b099      	sub	sp, #100	; 0x64
 80057bc:	4605      	mov	r5, r0
 80057be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80057c2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80057c6:	b974      	cbnz	r4, 80057e6 <_dtoa_r+0x36>
 80057c8:	2010      	movs	r0, #16
 80057ca:	f000 fedd 	bl	8006588 <malloc>
 80057ce:	4602      	mov	r2, r0
 80057d0:	6268      	str	r0, [r5, #36]	; 0x24
 80057d2:	b920      	cbnz	r0, 80057de <_dtoa_r+0x2e>
 80057d4:	21ea      	movs	r1, #234	; 0xea
 80057d6:	4bae      	ldr	r3, [pc, #696]	; (8005a90 <_dtoa_r+0x2e0>)
 80057d8:	48ae      	ldr	r0, [pc, #696]	; (8005a94 <_dtoa_r+0x2e4>)
 80057da:	f001 ff09 	bl	80075f0 <__assert_func>
 80057de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057e2:	6004      	str	r4, [r0, #0]
 80057e4:	60c4      	str	r4, [r0, #12]
 80057e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80057e8:	6819      	ldr	r1, [r3, #0]
 80057ea:	b151      	cbz	r1, 8005802 <_dtoa_r+0x52>
 80057ec:	685a      	ldr	r2, [r3, #4]
 80057ee:	2301      	movs	r3, #1
 80057f0:	4093      	lsls	r3, r2
 80057f2:	604a      	str	r2, [r1, #4]
 80057f4:	608b      	str	r3, [r1, #8]
 80057f6:	4628      	mov	r0, r5
 80057f8:	f000 ff2a 	bl	8006650 <_Bfree>
 80057fc:	2200      	movs	r2, #0
 80057fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	1e3b      	subs	r3, r7, #0
 8005804:	bfaf      	iteee	ge
 8005806:	2300      	movge	r3, #0
 8005808:	2201      	movlt	r2, #1
 800580a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800580e:	9305      	strlt	r3, [sp, #20]
 8005810:	bfa8      	it	ge
 8005812:	f8c8 3000 	strge.w	r3, [r8]
 8005816:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800581a:	4b9f      	ldr	r3, [pc, #636]	; (8005a98 <_dtoa_r+0x2e8>)
 800581c:	bfb8      	it	lt
 800581e:	f8c8 2000 	strlt.w	r2, [r8]
 8005822:	ea33 0309 	bics.w	r3, r3, r9
 8005826:	d119      	bne.n	800585c <_dtoa_r+0xac>
 8005828:	f242 730f 	movw	r3, #9999	; 0x270f
 800582c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800582e:	6013      	str	r3, [r2, #0]
 8005830:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005834:	4333      	orrs	r3, r6
 8005836:	f000 8580 	beq.w	800633a <_dtoa_r+0xb8a>
 800583a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800583c:	b953      	cbnz	r3, 8005854 <_dtoa_r+0xa4>
 800583e:	4b97      	ldr	r3, [pc, #604]	; (8005a9c <_dtoa_r+0x2ec>)
 8005840:	e022      	b.n	8005888 <_dtoa_r+0xd8>
 8005842:	4b97      	ldr	r3, [pc, #604]	; (8005aa0 <_dtoa_r+0x2f0>)
 8005844:	9308      	str	r3, [sp, #32]
 8005846:	3308      	adds	r3, #8
 8005848:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800584a:	6013      	str	r3, [r2, #0]
 800584c:	9808      	ldr	r0, [sp, #32]
 800584e:	b019      	add	sp, #100	; 0x64
 8005850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005854:	4b91      	ldr	r3, [pc, #580]	; (8005a9c <_dtoa_r+0x2ec>)
 8005856:	9308      	str	r3, [sp, #32]
 8005858:	3303      	adds	r3, #3
 800585a:	e7f5      	b.n	8005848 <_dtoa_r+0x98>
 800585c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005860:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005864:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005868:	2200      	movs	r2, #0
 800586a:	2300      	movs	r3, #0
 800586c:	f7fb f8d8 	bl	8000a20 <__aeabi_dcmpeq>
 8005870:	4680      	mov	r8, r0
 8005872:	b158      	cbz	r0, 800588c <_dtoa_r+0xdc>
 8005874:	2301      	movs	r3, #1
 8005876:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005878:	6013      	str	r3, [r2, #0]
 800587a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 8559 	beq.w	8006334 <_dtoa_r+0xb84>
 8005882:	4888      	ldr	r0, [pc, #544]	; (8005aa4 <_dtoa_r+0x2f4>)
 8005884:	6018      	str	r0, [r3, #0]
 8005886:	1e43      	subs	r3, r0, #1
 8005888:	9308      	str	r3, [sp, #32]
 800588a:	e7df      	b.n	800584c <_dtoa_r+0x9c>
 800588c:	ab16      	add	r3, sp, #88	; 0x58
 800588e:	9301      	str	r3, [sp, #4]
 8005890:	ab17      	add	r3, sp, #92	; 0x5c
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	4628      	mov	r0, r5
 8005896:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800589a:	f001 f9bf 	bl	8006c1c <__d2b>
 800589e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80058a2:	4682      	mov	sl, r0
 80058a4:	2c00      	cmp	r4, #0
 80058a6:	d07e      	beq.n	80059a6 <_dtoa_r+0x1f6>
 80058a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058ae:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80058b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058b6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80058ba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80058be:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80058c2:	2200      	movs	r2, #0
 80058c4:	4b78      	ldr	r3, [pc, #480]	; (8005aa8 <_dtoa_r+0x2f8>)
 80058c6:	f7fa fc8b 	bl	80001e0 <__aeabi_dsub>
 80058ca:	a36b      	add	r3, pc, #428	; (adr r3, 8005a78 <_dtoa_r+0x2c8>)
 80058cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d0:	f7fa fe3e 	bl	8000550 <__aeabi_dmul>
 80058d4:	a36a      	add	r3, pc, #424	; (adr r3, 8005a80 <_dtoa_r+0x2d0>)
 80058d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058da:	f7fa fc83 	bl	80001e4 <__adddf3>
 80058de:	4606      	mov	r6, r0
 80058e0:	4620      	mov	r0, r4
 80058e2:	460f      	mov	r7, r1
 80058e4:	f7fa fdca 	bl	800047c <__aeabi_i2d>
 80058e8:	a367      	add	r3, pc, #412	; (adr r3, 8005a88 <_dtoa_r+0x2d8>)
 80058ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ee:	f7fa fe2f 	bl	8000550 <__aeabi_dmul>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	4630      	mov	r0, r6
 80058f8:	4639      	mov	r1, r7
 80058fa:	f7fa fc73 	bl	80001e4 <__adddf3>
 80058fe:	4606      	mov	r6, r0
 8005900:	460f      	mov	r7, r1
 8005902:	f7fb f8d5 	bl	8000ab0 <__aeabi_d2iz>
 8005906:	2200      	movs	r2, #0
 8005908:	4681      	mov	r9, r0
 800590a:	2300      	movs	r3, #0
 800590c:	4630      	mov	r0, r6
 800590e:	4639      	mov	r1, r7
 8005910:	f7fb f890 	bl	8000a34 <__aeabi_dcmplt>
 8005914:	b148      	cbz	r0, 800592a <_dtoa_r+0x17a>
 8005916:	4648      	mov	r0, r9
 8005918:	f7fa fdb0 	bl	800047c <__aeabi_i2d>
 800591c:	4632      	mov	r2, r6
 800591e:	463b      	mov	r3, r7
 8005920:	f7fb f87e 	bl	8000a20 <__aeabi_dcmpeq>
 8005924:	b908      	cbnz	r0, 800592a <_dtoa_r+0x17a>
 8005926:	f109 39ff 	add.w	r9, r9, #4294967295
 800592a:	f1b9 0f16 	cmp.w	r9, #22
 800592e:	d857      	bhi.n	80059e0 <_dtoa_r+0x230>
 8005930:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005934:	4b5d      	ldr	r3, [pc, #372]	; (8005aac <_dtoa_r+0x2fc>)
 8005936:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593e:	f7fb f879 	bl	8000a34 <__aeabi_dcmplt>
 8005942:	2800      	cmp	r0, #0
 8005944:	d04e      	beq.n	80059e4 <_dtoa_r+0x234>
 8005946:	2300      	movs	r3, #0
 8005948:	f109 39ff 	add.w	r9, r9, #4294967295
 800594c:	930f      	str	r3, [sp, #60]	; 0x3c
 800594e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005950:	1b1c      	subs	r4, r3, r4
 8005952:	1e63      	subs	r3, r4, #1
 8005954:	9309      	str	r3, [sp, #36]	; 0x24
 8005956:	bf49      	itett	mi
 8005958:	f1c4 0301 	rsbmi	r3, r4, #1
 800595c:	2300      	movpl	r3, #0
 800595e:	9306      	strmi	r3, [sp, #24]
 8005960:	2300      	movmi	r3, #0
 8005962:	bf54      	ite	pl
 8005964:	9306      	strpl	r3, [sp, #24]
 8005966:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005968:	f1b9 0f00 	cmp.w	r9, #0
 800596c:	db3c      	blt.n	80059e8 <_dtoa_r+0x238>
 800596e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005970:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005974:	444b      	add	r3, r9
 8005976:	9309      	str	r3, [sp, #36]	; 0x24
 8005978:	2300      	movs	r3, #0
 800597a:	930a      	str	r3, [sp, #40]	; 0x28
 800597c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800597e:	2b09      	cmp	r3, #9
 8005980:	d86c      	bhi.n	8005a5c <_dtoa_r+0x2ac>
 8005982:	2b05      	cmp	r3, #5
 8005984:	bfc4      	itt	gt
 8005986:	3b04      	subgt	r3, #4
 8005988:	9322      	strgt	r3, [sp, #136]	; 0x88
 800598a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800598c:	bfc8      	it	gt
 800598e:	2400      	movgt	r4, #0
 8005990:	f1a3 0302 	sub.w	r3, r3, #2
 8005994:	bfd8      	it	le
 8005996:	2401      	movle	r4, #1
 8005998:	2b03      	cmp	r3, #3
 800599a:	f200 808b 	bhi.w	8005ab4 <_dtoa_r+0x304>
 800599e:	e8df f003 	tbb	[pc, r3]
 80059a2:	4f2d      	.short	0x4f2d
 80059a4:	5b4d      	.short	0x5b4d
 80059a6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80059aa:	441c      	add	r4, r3
 80059ac:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80059b0:	2b20      	cmp	r3, #32
 80059b2:	bfc3      	ittte	gt
 80059b4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80059b8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80059bc:	fa09 f303 	lslgt.w	r3, r9, r3
 80059c0:	f1c3 0320 	rsble	r3, r3, #32
 80059c4:	bfc6      	itte	gt
 80059c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80059ca:	4318      	orrgt	r0, r3
 80059cc:	fa06 f003 	lslle.w	r0, r6, r3
 80059d0:	f7fa fd44 	bl	800045c <__aeabi_ui2d>
 80059d4:	2301      	movs	r3, #1
 80059d6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80059da:	3c01      	subs	r4, #1
 80059dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80059de:	e770      	b.n	80058c2 <_dtoa_r+0x112>
 80059e0:	2301      	movs	r3, #1
 80059e2:	e7b3      	b.n	800594c <_dtoa_r+0x19c>
 80059e4:	900f      	str	r0, [sp, #60]	; 0x3c
 80059e6:	e7b2      	b.n	800594e <_dtoa_r+0x19e>
 80059e8:	9b06      	ldr	r3, [sp, #24]
 80059ea:	eba3 0309 	sub.w	r3, r3, r9
 80059ee:	9306      	str	r3, [sp, #24]
 80059f0:	f1c9 0300 	rsb	r3, r9, #0
 80059f4:	930a      	str	r3, [sp, #40]	; 0x28
 80059f6:	2300      	movs	r3, #0
 80059f8:	930e      	str	r3, [sp, #56]	; 0x38
 80059fa:	e7bf      	b.n	800597c <_dtoa_r+0x1cc>
 80059fc:	2300      	movs	r3, #0
 80059fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	dc59      	bgt.n	8005aba <_dtoa_r+0x30a>
 8005a06:	f04f 0b01 	mov.w	fp, #1
 8005a0a:	465b      	mov	r3, fp
 8005a0c:	f8cd b008 	str.w	fp, [sp, #8]
 8005a10:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005a14:	2200      	movs	r2, #0
 8005a16:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005a18:	6042      	str	r2, [r0, #4]
 8005a1a:	2204      	movs	r2, #4
 8005a1c:	f102 0614 	add.w	r6, r2, #20
 8005a20:	429e      	cmp	r6, r3
 8005a22:	6841      	ldr	r1, [r0, #4]
 8005a24:	d94f      	bls.n	8005ac6 <_dtoa_r+0x316>
 8005a26:	4628      	mov	r0, r5
 8005a28:	f000 fdd2 	bl	80065d0 <_Balloc>
 8005a2c:	9008      	str	r0, [sp, #32]
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	d14d      	bne.n	8005ace <_dtoa_r+0x31e>
 8005a32:	4602      	mov	r2, r0
 8005a34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005a38:	4b1d      	ldr	r3, [pc, #116]	; (8005ab0 <_dtoa_r+0x300>)
 8005a3a:	e6cd      	b.n	80057d8 <_dtoa_r+0x28>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e7de      	b.n	80059fe <_dtoa_r+0x24e>
 8005a40:	2300      	movs	r3, #0
 8005a42:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a46:	eb09 0b03 	add.w	fp, r9, r3
 8005a4a:	f10b 0301 	add.w	r3, fp, #1
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	9302      	str	r3, [sp, #8]
 8005a52:	bfb8      	it	lt
 8005a54:	2301      	movlt	r3, #1
 8005a56:	e7dd      	b.n	8005a14 <_dtoa_r+0x264>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e7f2      	b.n	8005a42 <_dtoa_r+0x292>
 8005a5c:	2401      	movs	r4, #1
 8005a5e:	2300      	movs	r3, #0
 8005a60:	940b      	str	r4, [sp, #44]	; 0x2c
 8005a62:	9322      	str	r3, [sp, #136]	; 0x88
 8005a64:	f04f 3bff 	mov.w	fp, #4294967295
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2312      	movs	r3, #18
 8005a6c:	f8cd b008 	str.w	fp, [sp, #8]
 8005a70:	9223      	str	r2, [sp, #140]	; 0x8c
 8005a72:	e7cf      	b.n	8005a14 <_dtoa_r+0x264>
 8005a74:	f3af 8000 	nop.w
 8005a78:	636f4361 	.word	0x636f4361
 8005a7c:	3fd287a7 	.word	0x3fd287a7
 8005a80:	8b60c8b3 	.word	0x8b60c8b3
 8005a84:	3fc68a28 	.word	0x3fc68a28
 8005a88:	509f79fb 	.word	0x509f79fb
 8005a8c:	3fd34413 	.word	0x3fd34413
 8005a90:	08008129 	.word	0x08008129
 8005a94:	08008140 	.word	0x08008140
 8005a98:	7ff00000 	.word	0x7ff00000
 8005a9c:	08008125 	.word	0x08008125
 8005aa0:	0800811c 	.word	0x0800811c
 8005aa4:	080080f9 	.word	0x080080f9
 8005aa8:	3ff80000 	.word	0x3ff80000
 8005aac:	08008298 	.word	0x08008298
 8005ab0:	0800819f 	.word	0x0800819f
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ab8:	e7d4      	b.n	8005a64 <_dtoa_r+0x2b4>
 8005aba:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005abe:	465b      	mov	r3, fp
 8005ac0:	f8cd b008 	str.w	fp, [sp, #8]
 8005ac4:	e7a6      	b.n	8005a14 <_dtoa_r+0x264>
 8005ac6:	3101      	adds	r1, #1
 8005ac8:	6041      	str	r1, [r0, #4]
 8005aca:	0052      	lsls	r2, r2, #1
 8005acc:	e7a6      	b.n	8005a1c <_dtoa_r+0x26c>
 8005ace:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ad0:	9a08      	ldr	r2, [sp, #32]
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	9b02      	ldr	r3, [sp, #8]
 8005ad6:	2b0e      	cmp	r3, #14
 8005ad8:	f200 80a8 	bhi.w	8005c2c <_dtoa_r+0x47c>
 8005adc:	2c00      	cmp	r4, #0
 8005ade:	f000 80a5 	beq.w	8005c2c <_dtoa_r+0x47c>
 8005ae2:	f1b9 0f00 	cmp.w	r9, #0
 8005ae6:	dd34      	ble.n	8005b52 <_dtoa_r+0x3a2>
 8005ae8:	4a9a      	ldr	r2, [pc, #616]	; (8005d54 <_dtoa_r+0x5a4>)
 8005aea:	f009 030f 	and.w	r3, r9, #15
 8005aee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005af2:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005af6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005afa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005afe:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005b02:	d016      	beq.n	8005b32 <_dtoa_r+0x382>
 8005b04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b08:	4b93      	ldr	r3, [pc, #588]	; (8005d58 <_dtoa_r+0x5a8>)
 8005b0a:	2703      	movs	r7, #3
 8005b0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b10:	f7fa fe48 	bl	80007a4 <__aeabi_ddiv>
 8005b14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b18:	f004 040f 	and.w	r4, r4, #15
 8005b1c:	4e8e      	ldr	r6, [pc, #568]	; (8005d58 <_dtoa_r+0x5a8>)
 8005b1e:	b954      	cbnz	r4, 8005b36 <_dtoa_r+0x386>
 8005b20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b28:	f7fa fe3c 	bl	80007a4 <__aeabi_ddiv>
 8005b2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b30:	e029      	b.n	8005b86 <_dtoa_r+0x3d6>
 8005b32:	2702      	movs	r7, #2
 8005b34:	e7f2      	b.n	8005b1c <_dtoa_r+0x36c>
 8005b36:	07e1      	lsls	r1, r4, #31
 8005b38:	d508      	bpl.n	8005b4c <_dtoa_r+0x39c>
 8005b3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005b42:	f7fa fd05 	bl	8000550 <__aeabi_dmul>
 8005b46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b4a:	3701      	adds	r7, #1
 8005b4c:	1064      	asrs	r4, r4, #1
 8005b4e:	3608      	adds	r6, #8
 8005b50:	e7e5      	b.n	8005b1e <_dtoa_r+0x36e>
 8005b52:	f000 80a5 	beq.w	8005ca0 <_dtoa_r+0x4f0>
 8005b56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b5a:	f1c9 0400 	rsb	r4, r9, #0
 8005b5e:	4b7d      	ldr	r3, [pc, #500]	; (8005d54 <_dtoa_r+0x5a4>)
 8005b60:	f004 020f 	and.w	r2, r4, #15
 8005b64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6c:	f7fa fcf0 	bl	8000550 <__aeabi_dmul>
 8005b70:	2702      	movs	r7, #2
 8005b72:	2300      	movs	r3, #0
 8005b74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b78:	4e77      	ldr	r6, [pc, #476]	; (8005d58 <_dtoa_r+0x5a8>)
 8005b7a:	1124      	asrs	r4, r4, #4
 8005b7c:	2c00      	cmp	r4, #0
 8005b7e:	f040 8084 	bne.w	8005c8a <_dtoa_r+0x4da>
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1d2      	bne.n	8005b2c <_dtoa_r+0x37c>
 8005b86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 808b 	beq.w	8005ca4 <_dtoa_r+0x4f4>
 8005b8e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005b92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005b96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	4b6f      	ldr	r3, [pc, #444]	; (8005d5c <_dtoa_r+0x5ac>)
 8005b9e:	f7fa ff49 	bl	8000a34 <__aeabi_dcmplt>
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	d07e      	beq.n	8005ca4 <_dtoa_r+0x4f4>
 8005ba6:	9b02      	ldr	r3, [sp, #8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d07b      	beq.n	8005ca4 <_dtoa_r+0x4f4>
 8005bac:	f1bb 0f00 	cmp.w	fp, #0
 8005bb0:	dd38      	ble.n	8005c24 <_dtoa_r+0x474>
 8005bb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	4b69      	ldr	r3, [pc, #420]	; (8005d60 <_dtoa_r+0x5b0>)
 8005bba:	f7fa fcc9 	bl	8000550 <__aeabi_dmul>
 8005bbe:	465c      	mov	r4, fp
 8005bc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bc4:	f109 38ff 	add.w	r8, r9, #4294967295
 8005bc8:	3701      	adds	r7, #1
 8005bca:	4638      	mov	r0, r7
 8005bcc:	f7fa fc56 	bl	800047c <__aeabi_i2d>
 8005bd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bd4:	f7fa fcbc 	bl	8000550 <__aeabi_dmul>
 8005bd8:	2200      	movs	r2, #0
 8005bda:	4b62      	ldr	r3, [pc, #392]	; (8005d64 <_dtoa_r+0x5b4>)
 8005bdc:	f7fa fb02 	bl	80001e4 <__adddf3>
 8005be0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005be4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005be8:	9611      	str	r6, [sp, #68]	; 0x44
 8005bea:	2c00      	cmp	r4, #0
 8005bec:	d15d      	bne.n	8005caa <_dtoa_r+0x4fa>
 8005bee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	4b5c      	ldr	r3, [pc, #368]	; (8005d68 <_dtoa_r+0x5b8>)
 8005bf6:	f7fa faf3 	bl	80001e0 <__aeabi_dsub>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c02:	4633      	mov	r3, r6
 8005c04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c06:	f7fa ff33 	bl	8000a70 <__aeabi_dcmpgt>
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	f040 829e 	bne.w	800614c <_dtoa_r+0x99c>
 8005c10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c16:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005c1a:	f7fa ff0b 	bl	8000a34 <__aeabi_dcmplt>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	f040 8292 	bne.w	8006148 <_dtoa_r+0x998>
 8005c24:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005c28:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005c2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f2c0 8153 	blt.w	8005eda <_dtoa_r+0x72a>
 8005c34:	f1b9 0f0e 	cmp.w	r9, #14
 8005c38:	f300 814f 	bgt.w	8005eda <_dtoa_r+0x72a>
 8005c3c:	4b45      	ldr	r3, [pc, #276]	; (8005d54 <_dtoa_r+0x5a4>)
 8005c3e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005c42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c46:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005c4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f280 80db 	bge.w	8005e08 <_dtoa_r+0x658>
 8005c52:	9b02      	ldr	r3, [sp, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f300 80d7 	bgt.w	8005e08 <_dtoa_r+0x658>
 8005c5a:	f040 8274 	bne.w	8006146 <_dtoa_r+0x996>
 8005c5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c62:	2200      	movs	r2, #0
 8005c64:	4b40      	ldr	r3, [pc, #256]	; (8005d68 <_dtoa_r+0x5b8>)
 8005c66:	f7fa fc73 	bl	8000550 <__aeabi_dmul>
 8005c6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c6e:	f7fa fef5 	bl	8000a5c <__aeabi_dcmpge>
 8005c72:	9c02      	ldr	r4, [sp, #8]
 8005c74:	4626      	mov	r6, r4
 8005c76:	2800      	cmp	r0, #0
 8005c78:	f040 824a 	bne.w	8006110 <_dtoa_r+0x960>
 8005c7c:	2331      	movs	r3, #49	; 0x31
 8005c7e:	9f08      	ldr	r7, [sp, #32]
 8005c80:	f109 0901 	add.w	r9, r9, #1
 8005c84:	f807 3b01 	strb.w	r3, [r7], #1
 8005c88:	e246      	b.n	8006118 <_dtoa_r+0x968>
 8005c8a:	07e2      	lsls	r2, r4, #31
 8005c8c:	d505      	bpl.n	8005c9a <_dtoa_r+0x4ea>
 8005c8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c92:	f7fa fc5d 	bl	8000550 <__aeabi_dmul>
 8005c96:	2301      	movs	r3, #1
 8005c98:	3701      	adds	r7, #1
 8005c9a:	1064      	asrs	r4, r4, #1
 8005c9c:	3608      	adds	r6, #8
 8005c9e:	e76d      	b.n	8005b7c <_dtoa_r+0x3cc>
 8005ca0:	2702      	movs	r7, #2
 8005ca2:	e770      	b.n	8005b86 <_dtoa_r+0x3d6>
 8005ca4:	46c8      	mov	r8, r9
 8005ca6:	9c02      	ldr	r4, [sp, #8]
 8005ca8:	e78f      	b.n	8005bca <_dtoa_r+0x41a>
 8005caa:	9908      	ldr	r1, [sp, #32]
 8005cac:	4b29      	ldr	r3, [pc, #164]	; (8005d54 <_dtoa_r+0x5a4>)
 8005cae:	4421      	add	r1, r4
 8005cb0:	9112      	str	r1, [sp, #72]	; 0x48
 8005cb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005cb4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005cb8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005cbc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005cc0:	2900      	cmp	r1, #0
 8005cc2:	d055      	beq.n	8005d70 <_dtoa_r+0x5c0>
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	4929      	ldr	r1, [pc, #164]	; (8005d6c <_dtoa_r+0x5bc>)
 8005cc8:	f7fa fd6c 	bl	80007a4 <__aeabi_ddiv>
 8005ccc:	463b      	mov	r3, r7
 8005cce:	4632      	mov	r2, r6
 8005cd0:	f7fa fa86 	bl	80001e0 <__aeabi_dsub>
 8005cd4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005cd8:	9f08      	ldr	r7, [sp, #32]
 8005cda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cde:	f7fa fee7 	bl	8000ab0 <__aeabi_d2iz>
 8005ce2:	4604      	mov	r4, r0
 8005ce4:	f7fa fbca 	bl	800047c <__aeabi_i2d>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cf0:	f7fa fa76 	bl	80001e0 <__aeabi_dsub>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	3430      	adds	r4, #48	; 0x30
 8005cfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005cfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d02:	f807 4b01 	strb.w	r4, [r7], #1
 8005d06:	f7fa fe95 	bl	8000a34 <__aeabi_dcmplt>
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	d174      	bne.n	8005df8 <_dtoa_r+0x648>
 8005d0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d12:	2000      	movs	r0, #0
 8005d14:	4911      	ldr	r1, [pc, #68]	; (8005d5c <_dtoa_r+0x5ac>)
 8005d16:	f7fa fa63 	bl	80001e0 <__aeabi_dsub>
 8005d1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d1e:	f7fa fe89 	bl	8000a34 <__aeabi_dcmplt>
 8005d22:	2800      	cmp	r0, #0
 8005d24:	f040 80b6 	bne.w	8005e94 <_dtoa_r+0x6e4>
 8005d28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d2a:	429f      	cmp	r7, r3
 8005d2c:	f43f af7a 	beq.w	8005c24 <_dtoa_r+0x474>
 8005d30:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d34:	2200      	movs	r2, #0
 8005d36:	4b0a      	ldr	r3, [pc, #40]	; (8005d60 <_dtoa_r+0x5b0>)
 8005d38:	f7fa fc0a 	bl	8000550 <__aeabi_dmul>
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d46:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <_dtoa_r+0x5b0>)
 8005d48:	f7fa fc02 	bl	8000550 <__aeabi_dmul>
 8005d4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d50:	e7c3      	b.n	8005cda <_dtoa_r+0x52a>
 8005d52:	bf00      	nop
 8005d54:	08008298 	.word	0x08008298
 8005d58:	08008270 	.word	0x08008270
 8005d5c:	3ff00000 	.word	0x3ff00000
 8005d60:	40240000 	.word	0x40240000
 8005d64:	401c0000 	.word	0x401c0000
 8005d68:	40140000 	.word	0x40140000
 8005d6c:	3fe00000 	.word	0x3fe00000
 8005d70:	4630      	mov	r0, r6
 8005d72:	4639      	mov	r1, r7
 8005d74:	f7fa fbec 	bl	8000550 <__aeabi_dmul>
 8005d78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d7e:	9c08      	ldr	r4, [sp, #32]
 8005d80:	9314      	str	r3, [sp, #80]	; 0x50
 8005d82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d86:	f7fa fe93 	bl	8000ab0 <__aeabi_d2iz>
 8005d8a:	9015      	str	r0, [sp, #84]	; 0x54
 8005d8c:	f7fa fb76 	bl	800047c <__aeabi_i2d>
 8005d90:	4602      	mov	r2, r0
 8005d92:	460b      	mov	r3, r1
 8005d94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d98:	f7fa fa22 	bl	80001e0 <__aeabi_dsub>
 8005d9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d9e:	4606      	mov	r6, r0
 8005da0:	3330      	adds	r3, #48	; 0x30
 8005da2:	f804 3b01 	strb.w	r3, [r4], #1
 8005da6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005da8:	460f      	mov	r7, r1
 8005daa:	429c      	cmp	r4, r3
 8005dac:	f04f 0200 	mov.w	r2, #0
 8005db0:	d124      	bne.n	8005dfc <_dtoa_r+0x64c>
 8005db2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005db6:	4bb3      	ldr	r3, [pc, #716]	; (8006084 <_dtoa_r+0x8d4>)
 8005db8:	f7fa fa14 	bl	80001e4 <__adddf3>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4630      	mov	r0, r6
 8005dc2:	4639      	mov	r1, r7
 8005dc4:	f7fa fe54 	bl	8000a70 <__aeabi_dcmpgt>
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	d162      	bne.n	8005e92 <_dtoa_r+0x6e2>
 8005dcc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	49ac      	ldr	r1, [pc, #688]	; (8006084 <_dtoa_r+0x8d4>)
 8005dd4:	f7fa fa04 	bl	80001e0 <__aeabi_dsub>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	4630      	mov	r0, r6
 8005dde:	4639      	mov	r1, r7
 8005de0:	f7fa fe28 	bl	8000a34 <__aeabi_dcmplt>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	f43f af1d 	beq.w	8005c24 <_dtoa_r+0x474>
 8005dea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005dec:	1e7b      	subs	r3, r7, #1
 8005dee:	9314      	str	r3, [sp, #80]	; 0x50
 8005df0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005df4:	2b30      	cmp	r3, #48	; 0x30
 8005df6:	d0f8      	beq.n	8005dea <_dtoa_r+0x63a>
 8005df8:	46c1      	mov	r9, r8
 8005dfa:	e03a      	b.n	8005e72 <_dtoa_r+0x6c2>
 8005dfc:	4ba2      	ldr	r3, [pc, #648]	; (8006088 <_dtoa_r+0x8d8>)
 8005dfe:	f7fa fba7 	bl	8000550 <__aeabi_dmul>
 8005e02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e06:	e7bc      	b.n	8005d82 <_dtoa_r+0x5d2>
 8005e08:	9f08      	ldr	r7, [sp, #32]
 8005e0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e12:	f7fa fcc7 	bl	80007a4 <__aeabi_ddiv>
 8005e16:	f7fa fe4b 	bl	8000ab0 <__aeabi_d2iz>
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	f7fa fb2e 	bl	800047c <__aeabi_i2d>
 8005e20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e24:	f7fa fb94 	bl	8000550 <__aeabi_dmul>
 8005e28:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4602      	mov	r2, r0
 8005e30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e34:	f7fa f9d4 	bl	80001e0 <__aeabi_dsub>
 8005e38:	f807 6b01 	strb.w	r6, [r7], #1
 8005e3c:	9e08      	ldr	r6, [sp, #32]
 8005e3e:	9b02      	ldr	r3, [sp, #8]
 8005e40:	1bbe      	subs	r6, r7, r6
 8005e42:	42b3      	cmp	r3, r6
 8005e44:	d13a      	bne.n	8005ebc <_dtoa_r+0x70c>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	f7fa f9cb 	bl	80001e4 <__adddf3>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	460b      	mov	r3, r1
 8005e52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e5a:	f7fa fe09 	bl	8000a70 <__aeabi_dcmpgt>
 8005e5e:	bb58      	cbnz	r0, 8005eb8 <_dtoa_r+0x708>
 8005e60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e68:	f7fa fdda 	bl	8000a20 <__aeabi_dcmpeq>
 8005e6c:	b108      	cbz	r0, 8005e72 <_dtoa_r+0x6c2>
 8005e6e:	07e1      	lsls	r1, r4, #31
 8005e70:	d422      	bmi.n	8005eb8 <_dtoa_r+0x708>
 8005e72:	4628      	mov	r0, r5
 8005e74:	4651      	mov	r1, sl
 8005e76:	f000 fbeb 	bl	8006650 <_Bfree>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	703b      	strb	r3, [r7, #0]
 8005e7e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005e80:	f109 0001 	add.w	r0, r9, #1
 8005e84:	6018      	str	r0, [r3, #0]
 8005e86:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f43f acdf 	beq.w	800584c <_dtoa_r+0x9c>
 8005e8e:	601f      	str	r7, [r3, #0]
 8005e90:	e4dc      	b.n	800584c <_dtoa_r+0x9c>
 8005e92:	4627      	mov	r7, r4
 8005e94:	463b      	mov	r3, r7
 8005e96:	461f      	mov	r7, r3
 8005e98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e9c:	2a39      	cmp	r2, #57	; 0x39
 8005e9e:	d107      	bne.n	8005eb0 <_dtoa_r+0x700>
 8005ea0:	9a08      	ldr	r2, [sp, #32]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d1f7      	bne.n	8005e96 <_dtoa_r+0x6e6>
 8005ea6:	2230      	movs	r2, #48	; 0x30
 8005ea8:	9908      	ldr	r1, [sp, #32]
 8005eaa:	f108 0801 	add.w	r8, r8, #1
 8005eae:	700a      	strb	r2, [r1, #0]
 8005eb0:	781a      	ldrb	r2, [r3, #0]
 8005eb2:	3201      	adds	r2, #1
 8005eb4:	701a      	strb	r2, [r3, #0]
 8005eb6:	e79f      	b.n	8005df8 <_dtoa_r+0x648>
 8005eb8:	46c8      	mov	r8, r9
 8005eba:	e7eb      	b.n	8005e94 <_dtoa_r+0x6e4>
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	4b72      	ldr	r3, [pc, #456]	; (8006088 <_dtoa_r+0x8d8>)
 8005ec0:	f7fa fb46 	bl	8000550 <__aeabi_dmul>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	2300      	movs	r3, #0
 8005ed0:	f7fa fda6 	bl	8000a20 <__aeabi_dcmpeq>
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	d098      	beq.n	8005e0a <_dtoa_r+0x65a>
 8005ed8:	e7cb      	b.n	8005e72 <_dtoa_r+0x6c2>
 8005eda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005edc:	2a00      	cmp	r2, #0
 8005ede:	f000 80cd 	beq.w	800607c <_dtoa_r+0x8cc>
 8005ee2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005ee4:	2a01      	cmp	r2, #1
 8005ee6:	f300 80af 	bgt.w	8006048 <_dtoa_r+0x898>
 8005eea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005eec:	2a00      	cmp	r2, #0
 8005eee:	f000 80a7 	beq.w	8006040 <_dtoa_r+0x890>
 8005ef2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ef6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005ef8:	9f06      	ldr	r7, [sp, #24]
 8005efa:	9a06      	ldr	r2, [sp, #24]
 8005efc:	2101      	movs	r1, #1
 8005efe:	441a      	add	r2, r3
 8005f00:	9206      	str	r2, [sp, #24]
 8005f02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f04:	4628      	mov	r0, r5
 8005f06:	441a      	add	r2, r3
 8005f08:	9209      	str	r2, [sp, #36]	; 0x24
 8005f0a:	f000 fc5b 	bl	80067c4 <__i2b>
 8005f0e:	4606      	mov	r6, r0
 8005f10:	2f00      	cmp	r7, #0
 8005f12:	dd0c      	ble.n	8005f2e <_dtoa_r+0x77e>
 8005f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	dd09      	ble.n	8005f2e <_dtoa_r+0x77e>
 8005f1a:	42bb      	cmp	r3, r7
 8005f1c:	bfa8      	it	ge
 8005f1e:	463b      	movge	r3, r7
 8005f20:	9a06      	ldr	r2, [sp, #24]
 8005f22:	1aff      	subs	r7, r7, r3
 8005f24:	1ad2      	subs	r2, r2, r3
 8005f26:	9206      	str	r2, [sp, #24]
 8005f28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f30:	b1f3      	cbz	r3, 8005f70 <_dtoa_r+0x7c0>
 8005f32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 80a9 	beq.w	800608c <_dtoa_r+0x8dc>
 8005f3a:	2c00      	cmp	r4, #0
 8005f3c:	dd10      	ble.n	8005f60 <_dtoa_r+0x7b0>
 8005f3e:	4631      	mov	r1, r6
 8005f40:	4622      	mov	r2, r4
 8005f42:	4628      	mov	r0, r5
 8005f44:	f000 fcf8 	bl	8006938 <__pow5mult>
 8005f48:	4652      	mov	r2, sl
 8005f4a:	4601      	mov	r1, r0
 8005f4c:	4606      	mov	r6, r0
 8005f4e:	4628      	mov	r0, r5
 8005f50:	f000 fc4e 	bl	80067f0 <__multiply>
 8005f54:	4680      	mov	r8, r0
 8005f56:	4651      	mov	r1, sl
 8005f58:	4628      	mov	r0, r5
 8005f5a:	f000 fb79 	bl	8006650 <_Bfree>
 8005f5e:	46c2      	mov	sl, r8
 8005f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f62:	1b1a      	subs	r2, r3, r4
 8005f64:	d004      	beq.n	8005f70 <_dtoa_r+0x7c0>
 8005f66:	4651      	mov	r1, sl
 8005f68:	4628      	mov	r0, r5
 8005f6a:	f000 fce5 	bl	8006938 <__pow5mult>
 8005f6e:	4682      	mov	sl, r0
 8005f70:	2101      	movs	r1, #1
 8005f72:	4628      	mov	r0, r5
 8005f74:	f000 fc26 	bl	80067c4 <__i2b>
 8005f78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f340 8087 	ble.w	8006090 <_dtoa_r+0x8e0>
 8005f82:	461a      	mov	r2, r3
 8005f84:	4601      	mov	r1, r0
 8005f86:	4628      	mov	r0, r5
 8005f88:	f000 fcd6 	bl	8006938 <__pow5mult>
 8005f8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f8e:	4604      	mov	r4, r0
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	f340 8080 	ble.w	8006096 <_dtoa_r+0x8e6>
 8005f96:	f04f 0800 	mov.w	r8, #0
 8005f9a:	6923      	ldr	r3, [r4, #16]
 8005f9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005fa0:	6918      	ldr	r0, [r3, #16]
 8005fa2:	f000 fbc1 	bl	8006728 <__hi0bits>
 8005fa6:	f1c0 0020 	rsb	r0, r0, #32
 8005faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fac:	4418      	add	r0, r3
 8005fae:	f010 001f 	ands.w	r0, r0, #31
 8005fb2:	f000 8092 	beq.w	80060da <_dtoa_r+0x92a>
 8005fb6:	f1c0 0320 	rsb	r3, r0, #32
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	f340 808a 	ble.w	80060d4 <_dtoa_r+0x924>
 8005fc0:	f1c0 001c 	rsb	r0, r0, #28
 8005fc4:	9b06      	ldr	r3, [sp, #24]
 8005fc6:	4407      	add	r7, r0
 8005fc8:	4403      	add	r3, r0
 8005fca:	9306      	str	r3, [sp, #24]
 8005fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fce:	4403      	add	r3, r0
 8005fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8005fd2:	9b06      	ldr	r3, [sp, #24]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	dd05      	ble.n	8005fe4 <_dtoa_r+0x834>
 8005fd8:	4651      	mov	r1, sl
 8005fda:	461a      	mov	r2, r3
 8005fdc:	4628      	mov	r0, r5
 8005fde:	f000 fd05 	bl	80069ec <__lshift>
 8005fe2:	4682      	mov	sl, r0
 8005fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	dd05      	ble.n	8005ff6 <_dtoa_r+0x846>
 8005fea:	4621      	mov	r1, r4
 8005fec:	461a      	mov	r2, r3
 8005fee:	4628      	mov	r0, r5
 8005ff0:	f000 fcfc 	bl	80069ec <__lshift>
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d070      	beq.n	80060de <_dtoa_r+0x92e>
 8005ffc:	4621      	mov	r1, r4
 8005ffe:	4650      	mov	r0, sl
 8006000:	f000 fd60 	bl	8006ac4 <__mcmp>
 8006004:	2800      	cmp	r0, #0
 8006006:	da6a      	bge.n	80060de <_dtoa_r+0x92e>
 8006008:	2300      	movs	r3, #0
 800600a:	4651      	mov	r1, sl
 800600c:	220a      	movs	r2, #10
 800600e:	4628      	mov	r0, r5
 8006010:	f000 fb40 	bl	8006694 <__multadd>
 8006014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006016:	4682      	mov	sl, r0
 8006018:	f109 39ff 	add.w	r9, r9, #4294967295
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 8193 	beq.w	8006348 <_dtoa_r+0xb98>
 8006022:	4631      	mov	r1, r6
 8006024:	2300      	movs	r3, #0
 8006026:	220a      	movs	r2, #10
 8006028:	4628      	mov	r0, r5
 800602a:	f000 fb33 	bl	8006694 <__multadd>
 800602e:	f1bb 0f00 	cmp.w	fp, #0
 8006032:	4606      	mov	r6, r0
 8006034:	f300 8093 	bgt.w	800615e <_dtoa_r+0x9ae>
 8006038:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800603a:	2b02      	cmp	r3, #2
 800603c:	dc57      	bgt.n	80060ee <_dtoa_r+0x93e>
 800603e:	e08e      	b.n	800615e <_dtoa_r+0x9ae>
 8006040:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006042:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006046:	e756      	b.n	8005ef6 <_dtoa_r+0x746>
 8006048:	9b02      	ldr	r3, [sp, #8]
 800604a:	1e5c      	subs	r4, r3, #1
 800604c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800604e:	42a3      	cmp	r3, r4
 8006050:	bfb7      	itett	lt
 8006052:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006054:	1b1c      	subge	r4, r3, r4
 8006056:	1ae2      	sublt	r2, r4, r3
 8006058:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800605a:	bfbe      	ittt	lt
 800605c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800605e:	189b      	addlt	r3, r3, r2
 8006060:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006062:	9b02      	ldr	r3, [sp, #8]
 8006064:	bfb8      	it	lt
 8006066:	2400      	movlt	r4, #0
 8006068:	2b00      	cmp	r3, #0
 800606a:	bfbb      	ittet	lt
 800606c:	9b06      	ldrlt	r3, [sp, #24]
 800606e:	9a02      	ldrlt	r2, [sp, #8]
 8006070:	9f06      	ldrge	r7, [sp, #24]
 8006072:	1a9f      	sublt	r7, r3, r2
 8006074:	bfac      	ite	ge
 8006076:	9b02      	ldrge	r3, [sp, #8]
 8006078:	2300      	movlt	r3, #0
 800607a:	e73e      	b.n	8005efa <_dtoa_r+0x74a>
 800607c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800607e:	9f06      	ldr	r7, [sp, #24]
 8006080:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006082:	e745      	b.n	8005f10 <_dtoa_r+0x760>
 8006084:	3fe00000 	.word	0x3fe00000
 8006088:	40240000 	.word	0x40240000
 800608c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800608e:	e76a      	b.n	8005f66 <_dtoa_r+0x7b6>
 8006090:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006092:	2b01      	cmp	r3, #1
 8006094:	dc19      	bgt.n	80060ca <_dtoa_r+0x91a>
 8006096:	9b04      	ldr	r3, [sp, #16]
 8006098:	b9bb      	cbnz	r3, 80060ca <_dtoa_r+0x91a>
 800609a:	9b05      	ldr	r3, [sp, #20]
 800609c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060a0:	b99b      	cbnz	r3, 80060ca <_dtoa_r+0x91a>
 80060a2:	9b05      	ldr	r3, [sp, #20]
 80060a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060a8:	0d1b      	lsrs	r3, r3, #20
 80060aa:	051b      	lsls	r3, r3, #20
 80060ac:	b183      	cbz	r3, 80060d0 <_dtoa_r+0x920>
 80060ae:	f04f 0801 	mov.w	r8, #1
 80060b2:	9b06      	ldr	r3, [sp, #24]
 80060b4:	3301      	adds	r3, #1
 80060b6:	9306      	str	r3, [sp, #24]
 80060b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ba:	3301      	adds	r3, #1
 80060bc:	9309      	str	r3, [sp, #36]	; 0x24
 80060be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f47f af6a 	bne.w	8005f9a <_dtoa_r+0x7ea>
 80060c6:	2001      	movs	r0, #1
 80060c8:	e76f      	b.n	8005faa <_dtoa_r+0x7fa>
 80060ca:	f04f 0800 	mov.w	r8, #0
 80060ce:	e7f6      	b.n	80060be <_dtoa_r+0x90e>
 80060d0:	4698      	mov	r8, r3
 80060d2:	e7f4      	b.n	80060be <_dtoa_r+0x90e>
 80060d4:	f43f af7d 	beq.w	8005fd2 <_dtoa_r+0x822>
 80060d8:	4618      	mov	r0, r3
 80060da:	301c      	adds	r0, #28
 80060dc:	e772      	b.n	8005fc4 <_dtoa_r+0x814>
 80060de:	9b02      	ldr	r3, [sp, #8]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	dc36      	bgt.n	8006152 <_dtoa_r+0x9a2>
 80060e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	dd33      	ble.n	8006152 <_dtoa_r+0x9a2>
 80060ea:	f8dd b008 	ldr.w	fp, [sp, #8]
 80060ee:	f1bb 0f00 	cmp.w	fp, #0
 80060f2:	d10d      	bne.n	8006110 <_dtoa_r+0x960>
 80060f4:	4621      	mov	r1, r4
 80060f6:	465b      	mov	r3, fp
 80060f8:	2205      	movs	r2, #5
 80060fa:	4628      	mov	r0, r5
 80060fc:	f000 faca 	bl	8006694 <__multadd>
 8006100:	4601      	mov	r1, r0
 8006102:	4604      	mov	r4, r0
 8006104:	4650      	mov	r0, sl
 8006106:	f000 fcdd 	bl	8006ac4 <__mcmp>
 800610a:	2800      	cmp	r0, #0
 800610c:	f73f adb6 	bgt.w	8005c7c <_dtoa_r+0x4cc>
 8006110:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006112:	9f08      	ldr	r7, [sp, #32]
 8006114:	ea6f 0903 	mvn.w	r9, r3
 8006118:	f04f 0800 	mov.w	r8, #0
 800611c:	4621      	mov	r1, r4
 800611e:	4628      	mov	r0, r5
 8006120:	f000 fa96 	bl	8006650 <_Bfree>
 8006124:	2e00      	cmp	r6, #0
 8006126:	f43f aea4 	beq.w	8005e72 <_dtoa_r+0x6c2>
 800612a:	f1b8 0f00 	cmp.w	r8, #0
 800612e:	d005      	beq.n	800613c <_dtoa_r+0x98c>
 8006130:	45b0      	cmp	r8, r6
 8006132:	d003      	beq.n	800613c <_dtoa_r+0x98c>
 8006134:	4641      	mov	r1, r8
 8006136:	4628      	mov	r0, r5
 8006138:	f000 fa8a 	bl	8006650 <_Bfree>
 800613c:	4631      	mov	r1, r6
 800613e:	4628      	mov	r0, r5
 8006140:	f000 fa86 	bl	8006650 <_Bfree>
 8006144:	e695      	b.n	8005e72 <_dtoa_r+0x6c2>
 8006146:	2400      	movs	r4, #0
 8006148:	4626      	mov	r6, r4
 800614a:	e7e1      	b.n	8006110 <_dtoa_r+0x960>
 800614c:	46c1      	mov	r9, r8
 800614e:	4626      	mov	r6, r4
 8006150:	e594      	b.n	8005c7c <_dtoa_r+0x4cc>
 8006152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006154:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 80fc 	beq.w	8006356 <_dtoa_r+0xba6>
 800615e:	2f00      	cmp	r7, #0
 8006160:	dd05      	ble.n	800616e <_dtoa_r+0x9be>
 8006162:	4631      	mov	r1, r6
 8006164:	463a      	mov	r2, r7
 8006166:	4628      	mov	r0, r5
 8006168:	f000 fc40 	bl	80069ec <__lshift>
 800616c:	4606      	mov	r6, r0
 800616e:	f1b8 0f00 	cmp.w	r8, #0
 8006172:	d05c      	beq.n	800622e <_dtoa_r+0xa7e>
 8006174:	4628      	mov	r0, r5
 8006176:	6871      	ldr	r1, [r6, #4]
 8006178:	f000 fa2a 	bl	80065d0 <_Balloc>
 800617c:	4607      	mov	r7, r0
 800617e:	b928      	cbnz	r0, 800618c <_dtoa_r+0x9dc>
 8006180:	4602      	mov	r2, r0
 8006182:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006186:	4b7e      	ldr	r3, [pc, #504]	; (8006380 <_dtoa_r+0xbd0>)
 8006188:	f7ff bb26 	b.w	80057d8 <_dtoa_r+0x28>
 800618c:	6932      	ldr	r2, [r6, #16]
 800618e:	f106 010c 	add.w	r1, r6, #12
 8006192:	3202      	adds	r2, #2
 8006194:	0092      	lsls	r2, r2, #2
 8006196:	300c      	adds	r0, #12
 8006198:	f000 fa0c 	bl	80065b4 <memcpy>
 800619c:	2201      	movs	r2, #1
 800619e:	4639      	mov	r1, r7
 80061a0:	4628      	mov	r0, r5
 80061a2:	f000 fc23 	bl	80069ec <__lshift>
 80061a6:	46b0      	mov	r8, r6
 80061a8:	4606      	mov	r6, r0
 80061aa:	9b08      	ldr	r3, [sp, #32]
 80061ac:	3301      	adds	r3, #1
 80061ae:	9302      	str	r3, [sp, #8]
 80061b0:	9b08      	ldr	r3, [sp, #32]
 80061b2:	445b      	add	r3, fp
 80061b4:	930a      	str	r3, [sp, #40]	; 0x28
 80061b6:	9b04      	ldr	r3, [sp, #16]
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	9309      	str	r3, [sp, #36]	; 0x24
 80061be:	9b02      	ldr	r3, [sp, #8]
 80061c0:	4621      	mov	r1, r4
 80061c2:	4650      	mov	r0, sl
 80061c4:	f103 3bff 	add.w	fp, r3, #4294967295
 80061c8:	f7ff fa64 	bl	8005694 <quorem>
 80061cc:	4603      	mov	r3, r0
 80061ce:	4641      	mov	r1, r8
 80061d0:	3330      	adds	r3, #48	; 0x30
 80061d2:	9004      	str	r0, [sp, #16]
 80061d4:	4650      	mov	r0, sl
 80061d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80061d8:	f000 fc74 	bl	8006ac4 <__mcmp>
 80061dc:	4632      	mov	r2, r6
 80061de:	9006      	str	r0, [sp, #24]
 80061e0:	4621      	mov	r1, r4
 80061e2:	4628      	mov	r0, r5
 80061e4:	f000 fc8a 	bl	8006afc <__mdiff>
 80061e8:	68c2      	ldr	r2, [r0, #12]
 80061ea:	4607      	mov	r7, r0
 80061ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061ee:	bb02      	cbnz	r2, 8006232 <_dtoa_r+0xa82>
 80061f0:	4601      	mov	r1, r0
 80061f2:	4650      	mov	r0, sl
 80061f4:	f000 fc66 	bl	8006ac4 <__mcmp>
 80061f8:	4602      	mov	r2, r0
 80061fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061fc:	4639      	mov	r1, r7
 80061fe:	4628      	mov	r0, r5
 8006200:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006204:	f000 fa24 	bl	8006650 <_Bfree>
 8006208:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800620a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800620c:	9f02      	ldr	r7, [sp, #8]
 800620e:	ea43 0102 	orr.w	r1, r3, r2
 8006212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006214:	430b      	orrs	r3, r1
 8006216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006218:	d10d      	bne.n	8006236 <_dtoa_r+0xa86>
 800621a:	2b39      	cmp	r3, #57	; 0x39
 800621c:	d027      	beq.n	800626e <_dtoa_r+0xabe>
 800621e:	9a06      	ldr	r2, [sp, #24]
 8006220:	2a00      	cmp	r2, #0
 8006222:	dd01      	ble.n	8006228 <_dtoa_r+0xa78>
 8006224:	9b04      	ldr	r3, [sp, #16]
 8006226:	3331      	adds	r3, #49	; 0x31
 8006228:	f88b 3000 	strb.w	r3, [fp]
 800622c:	e776      	b.n	800611c <_dtoa_r+0x96c>
 800622e:	4630      	mov	r0, r6
 8006230:	e7b9      	b.n	80061a6 <_dtoa_r+0x9f6>
 8006232:	2201      	movs	r2, #1
 8006234:	e7e2      	b.n	80061fc <_dtoa_r+0xa4c>
 8006236:	9906      	ldr	r1, [sp, #24]
 8006238:	2900      	cmp	r1, #0
 800623a:	db04      	blt.n	8006246 <_dtoa_r+0xa96>
 800623c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800623e:	4301      	orrs	r1, r0
 8006240:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006242:	4301      	orrs	r1, r0
 8006244:	d120      	bne.n	8006288 <_dtoa_r+0xad8>
 8006246:	2a00      	cmp	r2, #0
 8006248:	ddee      	ble.n	8006228 <_dtoa_r+0xa78>
 800624a:	4651      	mov	r1, sl
 800624c:	2201      	movs	r2, #1
 800624e:	4628      	mov	r0, r5
 8006250:	9302      	str	r3, [sp, #8]
 8006252:	f000 fbcb 	bl	80069ec <__lshift>
 8006256:	4621      	mov	r1, r4
 8006258:	4682      	mov	sl, r0
 800625a:	f000 fc33 	bl	8006ac4 <__mcmp>
 800625e:	2800      	cmp	r0, #0
 8006260:	9b02      	ldr	r3, [sp, #8]
 8006262:	dc02      	bgt.n	800626a <_dtoa_r+0xaba>
 8006264:	d1e0      	bne.n	8006228 <_dtoa_r+0xa78>
 8006266:	07da      	lsls	r2, r3, #31
 8006268:	d5de      	bpl.n	8006228 <_dtoa_r+0xa78>
 800626a:	2b39      	cmp	r3, #57	; 0x39
 800626c:	d1da      	bne.n	8006224 <_dtoa_r+0xa74>
 800626e:	2339      	movs	r3, #57	; 0x39
 8006270:	f88b 3000 	strb.w	r3, [fp]
 8006274:	463b      	mov	r3, r7
 8006276:	461f      	mov	r7, r3
 8006278:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800627c:	3b01      	subs	r3, #1
 800627e:	2a39      	cmp	r2, #57	; 0x39
 8006280:	d050      	beq.n	8006324 <_dtoa_r+0xb74>
 8006282:	3201      	adds	r2, #1
 8006284:	701a      	strb	r2, [r3, #0]
 8006286:	e749      	b.n	800611c <_dtoa_r+0x96c>
 8006288:	2a00      	cmp	r2, #0
 800628a:	dd03      	ble.n	8006294 <_dtoa_r+0xae4>
 800628c:	2b39      	cmp	r3, #57	; 0x39
 800628e:	d0ee      	beq.n	800626e <_dtoa_r+0xabe>
 8006290:	3301      	adds	r3, #1
 8006292:	e7c9      	b.n	8006228 <_dtoa_r+0xa78>
 8006294:	9a02      	ldr	r2, [sp, #8]
 8006296:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006298:	f802 3c01 	strb.w	r3, [r2, #-1]
 800629c:	428a      	cmp	r2, r1
 800629e:	d02a      	beq.n	80062f6 <_dtoa_r+0xb46>
 80062a0:	4651      	mov	r1, sl
 80062a2:	2300      	movs	r3, #0
 80062a4:	220a      	movs	r2, #10
 80062a6:	4628      	mov	r0, r5
 80062a8:	f000 f9f4 	bl	8006694 <__multadd>
 80062ac:	45b0      	cmp	r8, r6
 80062ae:	4682      	mov	sl, r0
 80062b0:	f04f 0300 	mov.w	r3, #0
 80062b4:	f04f 020a 	mov.w	r2, #10
 80062b8:	4641      	mov	r1, r8
 80062ba:	4628      	mov	r0, r5
 80062bc:	d107      	bne.n	80062ce <_dtoa_r+0xb1e>
 80062be:	f000 f9e9 	bl	8006694 <__multadd>
 80062c2:	4680      	mov	r8, r0
 80062c4:	4606      	mov	r6, r0
 80062c6:	9b02      	ldr	r3, [sp, #8]
 80062c8:	3301      	adds	r3, #1
 80062ca:	9302      	str	r3, [sp, #8]
 80062cc:	e777      	b.n	80061be <_dtoa_r+0xa0e>
 80062ce:	f000 f9e1 	bl	8006694 <__multadd>
 80062d2:	4631      	mov	r1, r6
 80062d4:	4680      	mov	r8, r0
 80062d6:	2300      	movs	r3, #0
 80062d8:	220a      	movs	r2, #10
 80062da:	4628      	mov	r0, r5
 80062dc:	f000 f9da 	bl	8006694 <__multadd>
 80062e0:	4606      	mov	r6, r0
 80062e2:	e7f0      	b.n	80062c6 <_dtoa_r+0xb16>
 80062e4:	f1bb 0f00 	cmp.w	fp, #0
 80062e8:	bfcc      	ite	gt
 80062ea:	465f      	movgt	r7, fp
 80062ec:	2701      	movle	r7, #1
 80062ee:	f04f 0800 	mov.w	r8, #0
 80062f2:	9a08      	ldr	r2, [sp, #32]
 80062f4:	4417      	add	r7, r2
 80062f6:	4651      	mov	r1, sl
 80062f8:	2201      	movs	r2, #1
 80062fa:	4628      	mov	r0, r5
 80062fc:	9302      	str	r3, [sp, #8]
 80062fe:	f000 fb75 	bl	80069ec <__lshift>
 8006302:	4621      	mov	r1, r4
 8006304:	4682      	mov	sl, r0
 8006306:	f000 fbdd 	bl	8006ac4 <__mcmp>
 800630a:	2800      	cmp	r0, #0
 800630c:	dcb2      	bgt.n	8006274 <_dtoa_r+0xac4>
 800630e:	d102      	bne.n	8006316 <_dtoa_r+0xb66>
 8006310:	9b02      	ldr	r3, [sp, #8]
 8006312:	07db      	lsls	r3, r3, #31
 8006314:	d4ae      	bmi.n	8006274 <_dtoa_r+0xac4>
 8006316:	463b      	mov	r3, r7
 8006318:	461f      	mov	r7, r3
 800631a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800631e:	2a30      	cmp	r2, #48	; 0x30
 8006320:	d0fa      	beq.n	8006318 <_dtoa_r+0xb68>
 8006322:	e6fb      	b.n	800611c <_dtoa_r+0x96c>
 8006324:	9a08      	ldr	r2, [sp, #32]
 8006326:	429a      	cmp	r2, r3
 8006328:	d1a5      	bne.n	8006276 <_dtoa_r+0xac6>
 800632a:	2331      	movs	r3, #49	; 0x31
 800632c:	f109 0901 	add.w	r9, r9, #1
 8006330:	7013      	strb	r3, [r2, #0]
 8006332:	e6f3      	b.n	800611c <_dtoa_r+0x96c>
 8006334:	4b13      	ldr	r3, [pc, #76]	; (8006384 <_dtoa_r+0xbd4>)
 8006336:	f7ff baa7 	b.w	8005888 <_dtoa_r+0xd8>
 800633a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800633c:	2b00      	cmp	r3, #0
 800633e:	f47f aa80 	bne.w	8005842 <_dtoa_r+0x92>
 8006342:	4b11      	ldr	r3, [pc, #68]	; (8006388 <_dtoa_r+0xbd8>)
 8006344:	f7ff baa0 	b.w	8005888 <_dtoa_r+0xd8>
 8006348:	f1bb 0f00 	cmp.w	fp, #0
 800634c:	dc03      	bgt.n	8006356 <_dtoa_r+0xba6>
 800634e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006350:	2b02      	cmp	r3, #2
 8006352:	f73f aecc 	bgt.w	80060ee <_dtoa_r+0x93e>
 8006356:	9f08      	ldr	r7, [sp, #32]
 8006358:	4621      	mov	r1, r4
 800635a:	4650      	mov	r0, sl
 800635c:	f7ff f99a 	bl	8005694 <quorem>
 8006360:	9a08      	ldr	r2, [sp, #32]
 8006362:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006366:	f807 3b01 	strb.w	r3, [r7], #1
 800636a:	1aba      	subs	r2, r7, r2
 800636c:	4593      	cmp	fp, r2
 800636e:	ddb9      	ble.n	80062e4 <_dtoa_r+0xb34>
 8006370:	4651      	mov	r1, sl
 8006372:	2300      	movs	r3, #0
 8006374:	220a      	movs	r2, #10
 8006376:	4628      	mov	r0, r5
 8006378:	f000 f98c 	bl	8006694 <__multadd>
 800637c:	4682      	mov	sl, r0
 800637e:	e7eb      	b.n	8006358 <_dtoa_r+0xba8>
 8006380:	0800819f 	.word	0x0800819f
 8006384:	080080f8 	.word	0x080080f8
 8006388:	0800811c 	.word	0x0800811c

0800638c <std>:
 800638c:	2300      	movs	r3, #0
 800638e:	b510      	push	{r4, lr}
 8006390:	4604      	mov	r4, r0
 8006392:	e9c0 3300 	strd	r3, r3, [r0]
 8006396:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800639a:	6083      	str	r3, [r0, #8]
 800639c:	8181      	strh	r1, [r0, #12]
 800639e:	6643      	str	r3, [r0, #100]	; 0x64
 80063a0:	81c2      	strh	r2, [r0, #14]
 80063a2:	6183      	str	r3, [r0, #24]
 80063a4:	4619      	mov	r1, r3
 80063a6:	2208      	movs	r2, #8
 80063a8:	305c      	adds	r0, #92	; 0x5c
 80063aa:	f7fe fcd3 	bl	8004d54 <memset>
 80063ae:	4b05      	ldr	r3, [pc, #20]	; (80063c4 <std+0x38>)
 80063b0:	6224      	str	r4, [r4, #32]
 80063b2:	6263      	str	r3, [r4, #36]	; 0x24
 80063b4:	4b04      	ldr	r3, [pc, #16]	; (80063c8 <std+0x3c>)
 80063b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80063b8:	4b04      	ldr	r3, [pc, #16]	; (80063cc <std+0x40>)
 80063ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063bc:	4b04      	ldr	r3, [pc, #16]	; (80063d0 <std+0x44>)
 80063be:	6323      	str	r3, [r4, #48]	; 0x30
 80063c0:	bd10      	pop	{r4, pc}
 80063c2:	bf00      	nop
 80063c4:	080073c5 	.word	0x080073c5
 80063c8:	080073e7 	.word	0x080073e7
 80063cc:	0800741f 	.word	0x0800741f
 80063d0:	08007443 	.word	0x08007443

080063d4 <_cleanup_r>:
 80063d4:	4901      	ldr	r1, [pc, #4]	; (80063dc <_cleanup_r+0x8>)
 80063d6:	f000 b8af 	b.w	8006538 <_fwalk_reent>
 80063da:	bf00      	nop
 80063dc:	08007759 	.word	0x08007759

080063e0 <__sfmoreglue>:
 80063e0:	b570      	push	{r4, r5, r6, lr}
 80063e2:	2568      	movs	r5, #104	; 0x68
 80063e4:	1e4a      	subs	r2, r1, #1
 80063e6:	4355      	muls	r5, r2
 80063e8:	460e      	mov	r6, r1
 80063ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80063ee:	f000 fccb 	bl	8006d88 <_malloc_r>
 80063f2:	4604      	mov	r4, r0
 80063f4:	b140      	cbz	r0, 8006408 <__sfmoreglue+0x28>
 80063f6:	2100      	movs	r1, #0
 80063f8:	e9c0 1600 	strd	r1, r6, [r0]
 80063fc:	300c      	adds	r0, #12
 80063fe:	60a0      	str	r0, [r4, #8]
 8006400:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006404:	f7fe fca6 	bl	8004d54 <memset>
 8006408:	4620      	mov	r0, r4
 800640a:	bd70      	pop	{r4, r5, r6, pc}

0800640c <__sfp_lock_acquire>:
 800640c:	4801      	ldr	r0, [pc, #4]	; (8006414 <__sfp_lock_acquire+0x8>)
 800640e:	f000 b8b8 	b.w	8006582 <__retarget_lock_acquire_recursive>
 8006412:	bf00      	nop
 8006414:	200006bc 	.word	0x200006bc

08006418 <__sfp_lock_release>:
 8006418:	4801      	ldr	r0, [pc, #4]	; (8006420 <__sfp_lock_release+0x8>)
 800641a:	f000 b8b3 	b.w	8006584 <__retarget_lock_release_recursive>
 800641e:	bf00      	nop
 8006420:	200006bc 	.word	0x200006bc

08006424 <__sinit_lock_acquire>:
 8006424:	4801      	ldr	r0, [pc, #4]	; (800642c <__sinit_lock_acquire+0x8>)
 8006426:	f000 b8ac 	b.w	8006582 <__retarget_lock_acquire_recursive>
 800642a:	bf00      	nop
 800642c:	200006b7 	.word	0x200006b7

08006430 <__sinit_lock_release>:
 8006430:	4801      	ldr	r0, [pc, #4]	; (8006438 <__sinit_lock_release+0x8>)
 8006432:	f000 b8a7 	b.w	8006584 <__retarget_lock_release_recursive>
 8006436:	bf00      	nop
 8006438:	200006b7 	.word	0x200006b7

0800643c <__sinit>:
 800643c:	b510      	push	{r4, lr}
 800643e:	4604      	mov	r4, r0
 8006440:	f7ff fff0 	bl	8006424 <__sinit_lock_acquire>
 8006444:	69a3      	ldr	r3, [r4, #24]
 8006446:	b11b      	cbz	r3, 8006450 <__sinit+0x14>
 8006448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800644c:	f7ff bff0 	b.w	8006430 <__sinit_lock_release>
 8006450:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006454:	6523      	str	r3, [r4, #80]	; 0x50
 8006456:	4b13      	ldr	r3, [pc, #76]	; (80064a4 <__sinit+0x68>)
 8006458:	4a13      	ldr	r2, [pc, #76]	; (80064a8 <__sinit+0x6c>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	62a2      	str	r2, [r4, #40]	; 0x28
 800645e:	42a3      	cmp	r3, r4
 8006460:	bf08      	it	eq
 8006462:	2301      	moveq	r3, #1
 8006464:	4620      	mov	r0, r4
 8006466:	bf08      	it	eq
 8006468:	61a3      	streq	r3, [r4, #24]
 800646a:	f000 f81f 	bl	80064ac <__sfp>
 800646e:	6060      	str	r0, [r4, #4]
 8006470:	4620      	mov	r0, r4
 8006472:	f000 f81b 	bl	80064ac <__sfp>
 8006476:	60a0      	str	r0, [r4, #8]
 8006478:	4620      	mov	r0, r4
 800647a:	f000 f817 	bl	80064ac <__sfp>
 800647e:	2200      	movs	r2, #0
 8006480:	2104      	movs	r1, #4
 8006482:	60e0      	str	r0, [r4, #12]
 8006484:	6860      	ldr	r0, [r4, #4]
 8006486:	f7ff ff81 	bl	800638c <std>
 800648a:	2201      	movs	r2, #1
 800648c:	2109      	movs	r1, #9
 800648e:	68a0      	ldr	r0, [r4, #8]
 8006490:	f7ff ff7c 	bl	800638c <std>
 8006494:	2202      	movs	r2, #2
 8006496:	2112      	movs	r1, #18
 8006498:	68e0      	ldr	r0, [r4, #12]
 800649a:	f7ff ff77 	bl	800638c <std>
 800649e:	2301      	movs	r3, #1
 80064a0:	61a3      	str	r3, [r4, #24]
 80064a2:	e7d1      	b.n	8006448 <__sinit+0xc>
 80064a4:	080080e4 	.word	0x080080e4
 80064a8:	080063d5 	.word	0x080063d5

080064ac <__sfp>:
 80064ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ae:	4607      	mov	r7, r0
 80064b0:	f7ff ffac 	bl	800640c <__sfp_lock_acquire>
 80064b4:	4b1e      	ldr	r3, [pc, #120]	; (8006530 <__sfp+0x84>)
 80064b6:	681e      	ldr	r6, [r3, #0]
 80064b8:	69b3      	ldr	r3, [r6, #24]
 80064ba:	b913      	cbnz	r3, 80064c2 <__sfp+0x16>
 80064bc:	4630      	mov	r0, r6
 80064be:	f7ff ffbd 	bl	800643c <__sinit>
 80064c2:	3648      	adds	r6, #72	; 0x48
 80064c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80064c8:	3b01      	subs	r3, #1
 80064ca:	d503      	bpl.n	80064d4 <__sfp+0x28>
 80064cc:	6833      	ldr	r3, [r6, #0]
 80064ce:	b30b      	cbz	r3, 8006514 <__sfp+0x68>
 80064d0:	6836      	ldr	r6, [r6, #0]
 80064d2:	e7f7      	b.n	80064c4 <__sfp+0x18>
 80064d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80064d8:	b9d5      	cbnz	r5, 8006510 <__sfp+0x64>
 80064da:	4b16      	ldr	r3, [pc, #88]	; (8006534 <__sfp+0x88>)
 80064dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80064e0:	60e3      	str	r3, [r4, #12]
 80064e2:	6665      	str	r5, [r4, #100]	; 0x64
 80064e4:	f000 f84c 	bl	8006580 <__retarget_lock_init_recursive>
 80064e8:	f7ff ff96 	bl	8006418 <__sfp_lock_release>
 80064ec:	2208      	movs	r2, #8
 80064ee:	4629      	mov	r1, r5
 80064f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80064f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80064f8:	6025      	str	r5, [r4, #0]
 80064fa:	61a5      	str	r5, [r4, #24]
 80064fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006500:	f7fe fc28 	bl	8004d54 <memset>
 8006504:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006508:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800650c:	4620      	mov	r0, r4
 800650e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006510:	3468      	adds	r4, #104	; 0x68
 8006512:	e7d9      	b.n	80064c8 <__sfp+0x1c>
 8006514:	2104      	movs	r1, #4
 8006516:	4638      	mov	r0, r7
 8006518:	f7ff ff62 	bl	80063e0 <__sfmoreglue>
 800651c:	4604      	mov	r4, r0
 800651e:	6030      	str	r0, [r6, #0]
 8006520:	2800      	cmp	r0, #0
 8006522:	d1d5      	bne.n	80064d0 <__sfp+0x24>
 8006524:	f7ff ff78 	bl	8006418 <__sfp_lock_release>
 8006528:	230c      	movs	r3, #12
 800652a:	603b      	str	r3, [r7, #0]
 800652c:	e7ee      	b.n	800650c <__sfp+0x60>
 800652e:	bf00      	nop
 8006530:	080080e4 	.word	0x080080e4
 8006534:	ffff0001 	.word	0xffff0001

08006538 <_fwalk_reent>:
 8006538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800653c:	4606      	mov	r6, r0
 800653e:	4688      	mov	r8, r1
 8006540:	2700      	movs	r7, #0
 8006542:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006546:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800654a:	f1b9 0901 	subs.w	r9, r9, #1
 800654e:	d505      	bpl.n	800655c <_fwalk_reent+0x24>
 8006550:	6824      	ldr	r4, [r4, #0]
 8006552:	2c00      	cmp	r4, #0
 8006554:	d1f7      	bne.n	8006546 <_fwalk_reent+0xe>
 8006556:	4638      	mov	r0, r7
 8006558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800655c:	89ab      	ldrh	r3, [r5, #12]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d907      	bls.n	8006572 <_fwalk_reent+0x3a>
 8006562:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006566:	3301      	adds	r3, #1
 8006568:	d003      	beq.n	8006572 <_fwalk_reent+0x3a>
 800656a:	4629      	mov	r1, r5
 800656c:	4630      	mov	r0, r6
 800656e:	47c0      	blx	r8
 8006570:	4307      	orrs	r7, r0
 8006572:	3568      	adds	r5, #104	; 0x68
 8006574:	e7e9      	b.n	800654a <_fwalk_reent+0x12>
	...

08006578 <_localeconv_r>:
 8006578:	4800      	ldr	r0, [pc, #0]	; (800657c <_localeconv_r+0x4>)
 800657a:	4770      	bx	lr
 800657c:	200001e0 	.word	0x200001e0

08006580 <__retarget_lock_init_recursive>:
 8006580:	4770      	bx	lr

08006582 <__retarget_lock_acquire_recursive>:
 8006582:	4770      	bx	lr

08006584 <__retarget_lock_release_recursive>:
 8006584:	4770      	bx	lr
	...

08006588 <malloc>:
 8006588:	4b02      	ldr	r3, [pc, #8]	; (8006594 <malloc+0xc>)
 800658a:	4601      	mov	r1, r0
 800658c:	6818      	ldr	r0, [r3, #0]
 800658e:	f000 bbfb 	b.w	8006d88 <_malloc_r>
 8006592:	bf00      	nop
 8006594:	2000008c 	.word	0x2000008c

08006598 <memchr>:
 8006598:	4603      	mov	r3, r0
 800659a:	b510      	push	{r4, lr}
 800659c:	b2c9      	uxtb	r1, r1
 800659e:	4402      	add	r2, r0
 80065a0:	4293      	cmp	r3, r2
 80065a2:	4618      	mov	r0, r3
 80065a4:	d101      	bne.n	80065aa <memchr+0x12>
 80065a6:	2000      	movs	r0, #0
 80065a8:	e003      	b.n	80065b2 <memchr+0x1a>
 80065aa:	7804      	ldrb	r4, [r0, #0]
 80065ac:	3301      	adds	r3, #1
 80065ae:	428c      	cmp	r4, r1
 80065b0:	d1f6      	bne.n	80065a0 <memchr+0x8>
 80065b2:	bd10      	pop	{r4, pc}

080065b4 <memcpy>:
 80065b4:	440a      	add	r2, r1
 80065b6:	4291      	cmp	r1, r2
 80065b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80065bc:	d100      	bne.n	80065c0 <memcpy+0xc>
 80065be:	4770      	bx	lr
 80065c0:	b510      	push	{r4, lr}
 80065c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065c6:	4291      	cmp	r1, r2
 80065c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065cc:	d1f9      	bne.n	80065c2 <memcpy+0xe>
 80065ce:	bd10      	pop	{r4, pc}

080065d0 <_Balloc>:
 80065d0:	b570      	push	{r4, r5, r6, lr}
 80065d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80065d4:	4604      	mov	r4, r0
 80065d6:	460d      	mov	r5, r1
 80065d8:	b976      	cbnz	r6, 80065f8 <_Balloc+0x28>
 80065da:	2010      	movs	r0, #16
 80065dc:	f7ff ffd4 	bl	8006588 <malloc>
 80065e0:	4602      	mov	r2, r0
 80065e2:	6260      	str	r0, [r4, #36]	; 0x24
 80065e4:	b920      	cbnz	r0, 80065f0 <_Balloc+0x20>
 80065e6:	2166      	movs	r1, #102	; 0x66
 80065e8:	4b17      	ldr	r3, [pc, #92]	; (8006648 <_Balloc+0x78>)
 80065ea:	4818      	ldr	r0, [pc, #96]	; (800664c <_Balloc+0x7c>)
 80065ec:	f001 f800 	bl	80075f0 <__assert_func>
 80065f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065f4:	6006      	str	r6, [r0, #0]
 80065f6:	60c6      	str	r6, [r0, #12]
 80065f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80065fa:	68f3      	ldr	r3, [r6, #12]
 80065fc:	b183      	cbz	r3, 8006620 <_Balloc+0x50>
 80065fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006606:	b9b8      	cbnz	r0, 8006638 <_Balloc+0x68>
 8006608:	2101      	movs	r1, #1
 800660a:	fa01 f605 	lsl.w	r6, r1, r5
 800660e:	1d72      	adds	r2, r6, #5
 8006610:	4620      	mov	r0, r4
 8006612:	0092      	lsls	r2, r2, #2
 8006614:	f000 fb5e 	bl	8006cd4 <_calloc_r>
 8006618:	b160      	cbz	r0, 8006634 <_Balloc+0x64>
 800661a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800661e:	e00e      	b.n	800663e <_Balloc+0x6e>
 8006620:	2221      	movs	r2, #33	; 0x21
 8006622:	2104      	movs	r1, #4
 8006624:	4620      	mov	r0, r4
 8006626:	f000 fb55 	bl	8006cd4 <_calloc_r>
 800662a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800662c:	60f0      	str	r0, [r6, #12]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1e4      	bne.n	80065fe <_Balloc+0x2e>
 8006634:	2000      	movs	r0, #0
 8006636:	bd70      	pop	{r4, r5, r6, pc}
 8006638:	6802      	ldr	r2, [r0, #0]
 800663a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800663e:	2300      	movs	r3, #0
 8006640:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006644:	e7f7      	b.n	8006636 <_Balloc+0x66>
 8006646:	bf00      	nop
 8006648:	08008129 	.word	0x08008129
 800664c:	08008210 	.word	0x08008210

08006650 <_Bfree>:
 8006650:	b570      	push	{r4, r5, r6, lr}
 8006652:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006654:	4605      	mov	r5, r0
 8006656:	460c      	mov	r4, r1
 8006658:	b976      	cbnz	r6, 8006678 <_Bfree+0x28>
 800665a:	2010      	movs	r0, #16
 800665c:	f7ff ff94 	bl	8006588 <malloc>
 8006660:	4602      	mov	r2, r0
 8006662:	6268      	str	r0, [r5, #36]	; 0x24
 8006664:	b920      	cbnz	r0, 8006670 <_Bfree+0x20>
 8006666:	218a      	movs	r1, #138	; 0x8a
 8006668:	4b08      	ldr	r3, [pc, #32]	; (800668c <_Bfree+0x3c>)
 800666a:	4809      	ldr	r0, [pc, #36]	; (8006690 <_Bfree+0x40>)
 800666c:	f000 ffc0 	bl	80075f0 <__assert_func>
 8006670:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006674:	6006      	str	r6, [r0, #0]
 8006676:	60c6      	str	r6, [r0, #12]
 8006678:	b13c      	cbz	r4, 800668a <_Bfree+0x3a>
 800667a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800667c:	6862      	ldr	r2, [r4, #4]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006684:	6021      	str	r1, [r4, #0]
 8006686:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800668a:	bd70      	pop	{r4, r5, r6, pc}
 800668c:	08008129 	.word	0x08008129
 8006690:	08008210 	.word	0x08008210

08006694 <__multadd>:
 8006694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006698:	4698      	mov	r8, r3
 800669a:	460c      	mov	r4, r1
 800669c:	2300      	movs	r3, #0
 800669e:	690e      	ldr	r6, [r1, #16]
 80066a0:	4607      	mov	r7, r0
 80066a2:	f101 0014 	add.w	r0, r1, #20
 80066a6:	6805      	ldr	r5, [r0, #0]
 80066a8:	3301      	adds	r3, #1
 80066aa:	b2a9      	uxth	r1, r5
 80066ac:	fb02 8101 	mla	r1, r2, r1, r8
 80066b0:	0c2d      	lsrs	r5, r5, #16
 80066b2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80066b6:	fb02 c505 	mla	r5, r2, r5, ip
 80066ba:	b289      	uxth	r1, r1
 80066bc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80066c0:	429e      	cmp	r6, r3
 80066c2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80066c6:	f840 1b04 	str.w	r1, [r0], #4
 80066ca:	dcec      	bgt.n	80066a6 <__multadd+0x12>
 80066cc:	f1b8 0f00 	cmp.w	r8, #0
 80066d0:	d022      	beq.n	8006718 <__multadd+0x84>
 80066d2:	68a3      	ldr	r3, [r4, #8]
 80066d4:	42b3      	cmp	r3, r6
 80066d6:	dc19      	bgt.n	800670c <__multadd+0x78>
 80066d8:	6861      	ldr	r1, [r4, #4]
 80066da:	4638      	mov	r0, r7
 80066dc:	3101      	adds	r1, #1
 80066de:	f7ff ff77 	bl	80065d0 <_Balloc>
 80066e2:	4605      	mov	r5, r0
 80066e4:	b928      	cbnz	r0, 80066f2 <__multadd+0x5e>
 80066e6:	4602      	mov	r2, r0
 80066e8:	21b5      	movs	r1, #181	; 0xb5
 80066ea:	4b0d      	ldr	r3, [pc, #52]	; (8006720 <__multadd+0x8c>)
 80066ec:	480d      	ldr	r0, [pc, #52]	; (8006724 <__multadd+0x90>)
 80066ee:	f000 ff7f 	bl	80075f0 <__assert_func>
 80066f2:	6922      	ldr	r2, [r4, #16]
 80066f4:	f104 010c 	add.w	r1, r4, #12
 80066f8:	3202      	adds	r2, #2
 80066fa:	0092      	lsls	r2, r2, #2
 80066fc:	300c      	adds	r0, #12
 80066fe:	f7ff ff59 	bl	80065b4 <memcpy>
 8006702:	4621      	mov	r1, r4
 8006704:	4638      	mov	r0, r7
 8006706:	f7ff ffa3 	bl	8006650 <_Bfree>
 800670a:	462c      	mov	r4, r5
 800670c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006710:	3601      	adds	r6, #1
 8006712:	f8c3 8014 	str.w	r8, [r3, #20]
 8006716:	6126      	str	r6, [r4, #16]
 8006718:	4620      	mov	r0, r4
 800671a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800671e:	bf00      	nop
 8006720:	0800819f 	.word	0x0800819f
 8006724:	08008210 	.word	0x08008210

08006728 <__hi0bits>:
 8006728:	0c02      	lsrs	r2, r0, #16
 800672a:	0412      	lsls	r2, r2, #16
 800672c:	4603      	mov	r3, r0
 800672e:	b9ca      	cbnz	r2, 8006764 <__hi0bits+0x3c>
 8006730:	0403      	lsls	r3, r0, #16
 8006732:	2010      	movs	r0, #16
 8006734:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006738:	bf04      	itt	eq
 800673a:	021b      	lsleq	r3, r3, #8
 800673c:	3008      	addeq	r0, #8
 800673e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006742:	bf04      	itt	eq
 8006744:	011b      	lsleq	r3, r3, #4
 8006746:	3004      	addeq	r0, #4
 8006748:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800674c:	bf04      	itt	eq
 800674e:	009b      	lsleq	r3, r3, #2
 8006750:	3002      	addeq	r0, #2
 8006752:	2b00      	cmp	r3, #0
 8006754:	db05      	blt.n	8006762 <__hi0bits+0x3a>
 8006756:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800675a:	f100 0001 	add.w	r0, r0, #1
 800675e:	bf08      	it	eq
 8006760:	2020      	moveq	r0, #32
 8006762:	4770      	bx	lr
 8006764:	2000      	movs	r0, #0
 8006766:	e7e5      	b.n	8006734 <__hi0bits+0xc>

08006768 <__lo0bits>:
 8006768:	6803      	ldr	r3, [r0, #0]
 800676a:	4602      	mov	r2, r0
 800676c:	f013 0007 	ands.w	r0, r3, #7
 8006770:	d00b      	beq.n	800678a <__lo0bits+0x22>
 8006772:	07d9      	lsls	r1, r3, #31
 8006774:	d422      	bmi.n	80067bc <__lo0bits+0x54>
 8006776:	0798      	lsls	r0, r3, #30
 8006778:	bf49      	itett	mi
 800677a:	085b      	lsrmi	r3, r3, #1
 800677c:	089b      	lsrpl	r3, r3, #2
 800677e:	2001      	movmi	r0, #1
 8006780:	6013      	strmi	r3, [r2, #0]
 8006782:	bf5c      	itt	pl
 8006784:	2002      	movpl	r0, #2
 8006786:	6013      	strpl	r3, [r2, #0]
 8006788:	4770      	bx	lr
 800678a:	b299      	uxth	r1, r3
 800678c:	b909      	cbnz	r1, 8006792 <__lo0bits+0x2a>
 800678e:	2010      	movs	r0, #16
 8006790:	0c1b      	lsrs	r3, r3, #16
 8006792:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006796:	bf04      	itt	eq
 8006798:	0a1b      	lsreq	r3, r3, #8
 800679a:	3008      	addeq	r0, #8
 800679c:	0719      	lsls	r1, r3, #28
 800679e:	bf04      	itt	eq
 80067a0:	091b      	lsreq	r3, r3, #4
 80067a2:	3004      	addeq	r0, #4
 80067a4:	0799      	lsls	r1, r3, #30
 80067a6:	bf04      	itt	eq
 80067a8:	089b      	lsreq	r3, r3, #2
 80067aa:	3002      	addeq	r0, #2
 80067ac:	07d9      	lsls	r1, r3, #31
 80067ae:	d403      	bmi.n	80067b8 <__lo0bits+0x50>
 80067b0:	085b      	lsrs	r3, r3, #1
 80067b2:	f100 0001 	add.w	r0, r0, #1
 80067b6:	d003      	beq.n	80067c0 <__lo0bits+0x58>
 80067b8:	6013      	str	r3, [r2, #0]
 80067ba:	4770      	bx	lr
 80067bc:	2000      	movs	r0, #0
 80067be:	4770      	bx	lr
 80067c0:	2020      	movs	r0, #32
 80067c2:	4770      	bx	lr

080067c4 <__i2b>:
 80067c4:	b510      	push	{r4, lr}
 80067c6:	460c      	mov	r4, r1
 80067c8:	2101      	movs	r1, #1
 80067ca:	f7ff ff01 	bl	80065d0 <_Balloc>
 80067ce:	4602      	mov	r2, r0
 80067d0:	b928      	cbnz	r0, 80067de <__i2b+0x1a>
 80067d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80067d6:	4b04      	ldr	r3, [pc, #16]	; (80067e8 <__i2b+0x24>)
 80067d8:	4804      	ldr	r0, [pc, #16]	; (80067ec <__i2b+0x28>)
 80067da:	f000 ff09 	bl	80075f0 <__assert_func>
 80067de:	2301      	movs	r3, #1
 80067e0:	6144      	str	r4, [r0, #20]
 80067e2:	6103      	str	r3, [r0, #16]
 80067e4:	bd10      	pop	{r4, pc}
 80067e6:	bf00      	nop
 80067e8:	0800819f 	.word	0x0800819f
 80067ec:	08008210 	.word	0x08008210

080067f0 <__multiply>:
 80067f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f4:	4614      	mov	r4, r2
 80067f6:	690a      	ldr	r2, [r1, #16]
 80067f8:	6923      	ldr	r3, [r4, #16]
 80067fa:	460d      	mov	r5, r1
 80067fc:	429a      	cmp	r2, r3
 80067fe:	bfbe      	ittt	lt
 8006800:	460b      	movlt	r3, r1
 8006802:	4625      	movlt	r5, r4
 8006804:	461c      	movlt	r4, r3
 8006806:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800680a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800680e:	68ab      	ldr	r3, [r5, #8]
 8006810:	6869      	ldr	r1, [r5, #4]
 8006812:	eb0a 0709 	add.w	r7, sl, r9
 8006816:	42bb      	cmp	r3, r7
 8006818:	b085      	sub	sp, #20
 800681a:	bfb8      	it	lt
 800681c:	3101      	addlt	r1, #1
 800681e:	f7ff fed7 	bl	80065d0 <_Balloc>
 8006822:	b930      	cbnz	r0, 8006832 <__multiply+0x42>
 8006824:	4602      	mov	r2, r0
 8006826:	f240 115d 	movw	r1, #349	; 0x15d
 800682a:	4b41      	ldr	r3, [pc, #260]	; (8006930 <__multiply+0x140>)
 800682c:	4841      	ldr	r0, [pc, #260]	; (8006934 <__multiply+0x144>)
 800682e:	f000 fedf 	bl	80075f0 <__assert_func>
 8006832:	f100 0614 	add.w	r6, r0, #20
 8006836:	4633      	mov	r3, r6
 8006838:	2200      	movs	r2, #0
 800683a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800683e:	4543      	cmp	r3, r8
 8006840:	d31e      	bcc.n	8006880 <__multiply+0x90>
 8006842:	f105 0c14 	add.w	ip, r5, #20
 8006846:	f104 0314 	add.w	r3, r4, #20
 800684a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800684e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006852:	9202      	str	r2, [sp, #8]
 8006854:	ebac 0205 	sub.w	r2, ip, r5
 8006858:	3a15      	subs	r2, #21
 800685a:	f022 0203 	bic.w	r2, r2, #3
 800685e:	3204      	adds	r2, #4
 8006860:	f105 0115 	add.w	r1, r5, #21
 8006864:	458c      	cmp	ip, r1
 8006866:	bf38      	it	cc
 8006868:	2204      	movcc	r2, #4
 800686a:	9201      	str	r2, [sp, #4]
 800686c:	9a02      	ldr	r2, [sp, #8]
 800686e:	9303      	str	r3, [sp, #12]
 8006870:	429a      	cmp	r2, r3
 8006872:	d808      	bhi.n	8006886 <__multiply+0x96>
 8006874:	2f00      	cmp	r7, #0
 8006876:	dc55      	bgt.n	8006924 <__multiply+0x134>
 8006878:	6107      	str	r7, [r0, #16]
 800687a:	b005      	add	sp, #20
 800687c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006880:	f843 2b04 	str.w	r2, [r3], #4
 8006884:	e7db      	b.n	800683e <__multiply+0x4e>
 8006886:	f8b3 a000 	ldrh.w	sl, [r3]
 800688a:	f1ba 0f00 	cmp.w	sl, #0
 800688e:	d020      	beq.n	80068d2 <__multiply+0xe2>
 8006890:	46b1      	mov	r9, r6
 8006892:	2200      	movs	r2, #0
 8006894:	f105 0e14 	add.w	lr, r5, #20
 8006898:	f85e 4b04 	ldr.w	r4, [lr], #4
 800689c:	f8d9 b000 	ldr.w	fp, [r9]
 80068a0:	b2a1      	uxth	r1, r4
 80068a2:	fa1f fb8b 	uxth.w	fp, fp
 80068a6:	fb0a b101 	mla	r1, sl, r1, fp
 80068aa:	4411      	add	r1, r2
 80068ac:	f8d9 2000 	ldr.w	r2, [r9]
 80068b0:	0c24      	lsrs	r4, r4, #16
 80068b2:	0c12      	lsrs	r2, r2, #16
 80068b4:	fb0a 2404 	mla	r4, sl, r4, r2
 80068b8:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80068bc:	b289      	uxth	r1, r1
 80068be:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80068c2:	45f4      	cmp	ip, lr
 80068c4:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80068c8:	f849 1b04 	str.w	r1, [r9], #4
 80068cc:	d8e4      	bhi.n	8006898 <__multiply+0xa8>
 80068ce:	9901      	ldr	r1, [sp, #4]
 80068d0:	5072      	str	r2, [r6, r1]
 80068d2:	9a03      	ldr	r2, [sp, #12]
 80068d4:	3304      	adds	r3, #4
 80068d6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80068da:	f1b9 0f00 	cmp.w	r9, #0
 80068de:	d01f      	beq.n	8006920 <__multiply+0x130>
 80068e0:	46b6      	mov	lr, r6
 80068e2:	f04f 0a00 	mov.w	sl, #0
 80068e6:	6834      	ldr	r4, [r6, #0]
 80068e8:	f105 0114 	add.w	r1, r5, #20
 80068ec:	880a      	ldrh	r2, [r1, #0]
 80068ee:	f8be b002 	ldrh.w	fp, [lr, #2]
 80068f2:	b2a4      	uxth	r4, r4
 80068f4:	fb09 b202 	mla	r2, r9, r2, fp
 80068f8:	4492      	add	sl, r2
 80068fa:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80068fe:	f84e 4b04 	str.w	r4, [lr], #4
 8006902:	f851 4b04 	ldr.w	r4, [r1], #4
 8006906:	f8be 2000 	ldrh.w	r2, [lr]
 800690a:	0c24      	lsrs	r4, r4, #16
 800690c:	fb09 2404 	mla	r4, r9, r4, r2
 8006910:	458c      	cmp	ip, r1
 8006912:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006916:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800691a:	d8e7      	bhi.n	80068ec <__multiply+0xfc>
 800691c:	9a01      	ldr	r2, [sp, #4]
 800691e:	50b4      	str	r4, [r6, r2]
 8006920:	3604      	adds	r6, #4
 8006922:	e7a3      	b.n	800686c <__multiply+0x7c>
 8006924:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1a5      	bne.n	8006878 <__multiply+0x88>
 800692c:	3f01      	subs	r7, #1
 800692e:	e7a1      	b.n	8006874 <__multiply+0x84>
 8006930:	0800819f 	.word	0x0800819f
 8006934:	08008210 	.word	0x08008210

08006938 <__pow5mult>:
 8006938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800693c:	4615      	mov	r5, r2
 800693e:	f012 0203 	ands.w	r2, r2, #3
 8006942:	4606      	mov	r6, r0
 8006944:	460f      	mov	r7, r1
 8006946:	d007      	beq.n	8006958 <__pow5mult+0x20>
 8006948:	4c25      	ldr	r4, [pc, #148]	; (80069e0 <__pow5mult+0xa8>)
 800694a:	3a01      	subs	r2, #1
 800694c:	2300      	movs	r3, #0
 800694e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006952:	f7ff fe9f 	bl	8006694 <__multadd>
 8006956:	4607      	mov	r7, r0
 8006958:	10ad      	asrs	r5, r5, #2
 800695a:	d03d      	beq.n	80069d8 <__pow5mult+0xa0>
 800695c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800695e:	b97c      	cbnz	r4, 8006980 <__pow5mult+0x48>
 8006960:	2010      	movs	r0, #16
 8006962:	f7ff fe11 	bl	8006588 <malloc>
 8006966:	4602      	mov	r2, r0
 8006968:	6270      	str	r0, [r6, #36]	; 0x24
 800696a:	b928      	cbnz	r0, 8006978 <__pow5mult+0x40>
 800696c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006970:	4b1c      	ldr	r3, [pc, #112]	; (80069e4 <__pow5mult+0xac>)
 8006972:	481d      	ldr	r0, [pc, #116]	; (80069e8 <__pow5mult+0xb0>)
 8006974:	f000 fe3c 	bl	80075f0 <__assert_func>
 8006978:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800697c:	6004      	str	r4, [r0, #0]
 800697e:	60c4      	str	r4, [r0, #12]
 8006980:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006984:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006988:	b94c      	cbnz	r4, 800699e <__pow5mult+0x66>
 800698a:	f240 2171 	movw	r1, #625	; 0x271
 800698e:	4630      	mov	r0, r6
 8006990:	f7ff ff18 	bl	80067c4 <__i2b>
 8006994:	2300      	movs	r3, #0
 8006996:	4604      	mov	r4, r0
 8006998:	f8c8 0008 	str.w	r0, [r8, #8]
 800699c:	6003      	str	r3, [r0, #0]
 800699e:	f04f 0900 	mov.w	r9, #0
 80069a2:	07eb      	lsls	r3, r5, #31
 80069a4:	d50a      	bpl.n	80069bc <__pow5mult+0x84>
 80069a6:	4639      	mov	r1, r7
 80069a8:	4622      	mov	r2, r4
 80069aa:	4630      	mov	r0, r6
 80069ac:	f7ff ff20 	bl	80067f0 <__multiply>
 80069b0:	4680      	mov	r8, r0
 80069b2:	4639      	mov	r1, r7
 80069b4:	4630      	mov	r0, r6
 80069b6:	f7ff fe4b 	bl	8006650 <_Bfree>
 80069ba:	4647      	mov	r7, r8
 80069bc:	106d      	asrs	r5, r5, #1
 80069be:	d00b      	beq.n	80069d8 <__pow5mult+0xa0>
 80069c0:	6820      	ldr	r0, [r4, #0]
 80069c2:	b938      	cbnz	r0, 80069d4 <__pow5mult+0x9c>
 80069c4:	4622      	mov	r2, r4
 80069c6:	4621      	mov	r1, r4
 80069c8:	4630      	mov	r0, r6
 80069ca:	f7ff ff11 	bl	80067f0 <__multiply>
 80069ce:	6020      	str	r0, [r4, #0]
 80069d0:	f8c0 9000 	str.w	r9, [r0]
 80069d4:	4604      	mov	r4, r0
 80069d6:	e7e4      	b.n	80069a2 <__pow5mult+0x6a>
 80069d8:	4638      	mov	r0, r7
 80069da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069de:	bf00      	nop
 80069e0:	08008360 	.word	0x08008360
 80069e4:	08008129 	.word	0x08008129
 80069e8:	08008210 	.word	0x08008210

080069ec <__lshift>:
 80069ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f0:	460c      	mov	r4, r1
 80069f2:	4607      	mov	r7, r0
 80069f4:	4691      	mov	r9, r2
 80069f6:	6923      	ldr	r3, [r4, #16]
 80069f8:	6849      	ldr	r1, [r1, #4]
 80069fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80069fe:	68a3      	ldr	r3, [r4, #8]
 8006a00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a04:	f108 0601 	add.w	r6, r8, #1
 8006a08:	42b3      	cmp	r3, r6
 8006a0a:	db0b      	blt.n	8006a24 <__lshift+0x38>
 8006a0c:	4638      	mov	r0, r7
 8006a0e:	f7ff fddf 	bl	80065d0 <_Balloc>
 8006a12:	4605      	mov	r5, r0
 8006a14:	b948      	cbnz	r0, 8006a2a <__lshift+0x3e>
 8006a16:	4602      	mov	r2, r0
 8006a18:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006a1c:	4b27      	ldr	r3, [pc, #156]	; (8006abc <__lshift+0xd0>)
 8006a1e:	4828      	ldr	r0, [pc, #160]	; (8006ac0 <__lshift+0xd4>)
 8006a20:	f000 fde6 	bl	80075f0 <__assert_func>
 8006a24:	3101      	adds	r1, #1
 8006a26:	005b      	lsls	r3, r3, #1
 8006a28:	e7ee      	b.n	8006a08 <__lshift+0x1c>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f100 0114 	add.w	r1, r0, #20
 8006a30:	f100 0210 	add.w	r2, r0, #16
 8006a34:	4618      	mov	r0, r3
 8006a36:	4553      	cmp	r3, sl
 8006a38:	db33      	blt.n	8006aa2 <__lshift+0xb6>
 8006a3a:	6920      	ldr	r0, [r4, #16]
 8006a3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a40:	f104 0314 	add.w	r3, r4, #20
 8006a44:	f019 091f 	ands.w	r9, r9, #31
 8006a48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006a50:	d02b      	beq.n	8006aaa <__lshift+0xbe>
 8006a52:	468a      	mov	sl, r1
 8006a54:	2200      	movs	r2, #0
 8006a56:	f1c9 0e20 	rsb	lr, r9, #32
 8006a5a:	6818      	ldr	r0, [r3, #0]
 8006a5c:	fa00 f009 	lsl.w	r0, r0, r9
 8006a60:	4302      	orrs	r2, r0
 8006a62:	f84a 2b04 	str.w	r2, [sl], #4
 8006a66:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a6a:	459c      	cmp	ip, r3
 8006a6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a70:	d8f3      	bhi.n	8006a5a <__lshift+0x6e>
 8006a72:	ebac 0304 	sub.w	r3, ip, r4
 8006a76:	3b15      	subs	r3, #21
 8006a78:	f023 0303 	bic.w	r3, r3, #3
 8006a7c:	3304      	adds	r3, #4
 8006a7e:	f104 0015 	add.w	r0, r4, #21
 8006a82:	4584      	cmp	ip, r0
 8006a84:	bf38      	it	cc
 8006a86:	2304      	movcc	r3, #4
 8006a88:	50ca      	str	r2, [r1, r3]
 8006a8a:	b10a      	cbz	r2, 8006a90 <__lshift+0xa4>
 8006a8c:	f108 0602 	add.w	r6, r8, #2
 8006a90:	3e01      	subs	r6, #1
 8006a92:	4638      	mov	r0, r7
 8006a94:	4621      	mov	r1, r4
 8006a96:	612e      	str	r6, [r5, #16]
 8006a98:	f7ff fdda 	bl	8006650 <_Bfree>
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	e7c5      	b.n	8006a36 <__lshift+0x4a>
 8006aaa:	3904      	subs	r1, #4
 8006aac:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ab0:	459c      	cmp	ip, r3
 8006ab2:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ab6:	d8f9      	bhi.n	8006aac <__lshift+0xc0>
 8006ab8:	e7ea      	b.n	8006a90 <__lshift+0xa4>
 8006aba:	bf00      	nop
 8006abc:	0800819f 	.word	0x0800819f
 8006ac0:	08008210 	.word	0x08008210

08006ac4 <__mcmp>:
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	690a      	ldr	r2, [r1, #16]
 8006ac8:	6900      	ldr	r0, [r0, #16]
 8006aca:	b530      	push	{r4, r5, lr}
 8006acc:	1a80      	subs	r0, r0, r2
 8006ace:	d10d      	bne.n	8006aec <__mcmp+0x28>
 8006ad0:	3314      	adds	r3, #20
 8006ad2:	3114      	adds	r1, #20
 8006ad4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006ad8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006adc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006ae0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ae4:	4295      	cmp	r5, r2
 8006ae6:	d002      	beq.n	8006aee <__mcmp+0x2a>
 8006ae8:	d304      	bcc.n	8006af4 <__mcmp+0x30>
 8006aea:	2001      	movs	r0, #1
 8006aec:	bd30      	pop	{r4, r5, pc}
 8006aee:	42a3      	cmp	r3, r4
 8006af0:	d3f4      	bcc.n	8006adc <__mcmp+0x18>
 8006af2:	e7fb      	b.n	8006aec <__mcmp+0x28>
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295
 8006af8:	e7f8      	b.n	8006aec <__mcmp+0x28>
	...

08006afc <__mdiff>:
 8006afc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b00:	460c      	mov	r4, r1
 8006b02:	4606      	mov	r6, r0
 8006b04:	4611      	mov	r1, r2
 8006b06:	4620      	mov	r0, r4
 8006b08:	4692      	mov	sl, r2
 8006b0a:	f7ff ffdb 	bl	8006ac4 <__mcmp>
 8006b0e:	1e05      	subs	r5, r0, #0
 8006b10:	d111      	bne.n	8006b36 <__mdiff+0x3a>
 8006b12:	4629      	mov	r1, r5
 8006b14:	4630      	mov	r0, r6
 8006b16:	f7ff fd5b 	bl	80065d0 <_Balloc>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	b928      	cbnz	r0, 8006b2a <__mdiff+0x2e>
 8006b1e:	f240 2132 	movw	r1, #562	; 0x232
 8006b22:	4b3c      	ldr	r3, [pc, #240]	; (8006c14 <__mdiff+0x118>)
 8006b24:	483c      	ldr	r0, [pc, #240]	; (8006c18 <__mdiff+0x11c>)
 8006b26:	f000 fd63 	bl	80075f0 <__assert_func>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006b30:	4610      	mov	r0, r2
 8006b32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b36:	bfa4      	itt	ge
 8006b38:	4653      	movge	r3, sl
 8006b3a:	46a2      	movge	sl, r4
 8006b3c:	4630      	mov	r0, r6
 8006b3e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006b42:	bfa6      	itte	ge
 8006b44:	461c      	movge	r4, r3
 8006b46:	2500      	movge	r5, #0
 8006b48:	2501      	movlt	r5, #1
 8006b4a:	f7ff fd41 	bl	80065d0 <_Balloc>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	b918      	cbnz	r0, 8006b5a <__mdiff+0x5e>
 8006b52:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006b56:	4b2f      	ldr	r3, [pc, #188]	; (8006c14 <__mdiff+0x118>)
 8006b58:	e7e4      	b.n	8006b24 <__mdiff+0x28>
 8006b5a:	f100 0814 	add.w	r8, r0, #20
 8006b5e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8006b62:	60c5      	str	r5, [r0, #12]
 8006b64:	f04f 0c00 	mov.w	ip, #0
 8006b68:	f10a 0514 	add.w	r5, sl, #20
 8006b6c:	f10a 0010 	add.w	r0, sl, #16
 8006b70:	46c2      	mov	sl, r8
 8006b72:	6926      	ldr	r6, [r4, #16]
 8006b74:	f104 0914 	add.w	r9, r4, #20
 8006b78:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006b7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006b80:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006b84:	f859 3b04 	ldr.w	r3, [r9], #4
 8006b88:	fa1f f18b 	uxth.w	r1, fp
 8006b8c:	4461      	add	r1, ip
 8006b8e:	fa1f fc83 	uxth.w	ip, r3
 8006b92:	0c1b      	lsrs	r3, r3, #16
 8006b94:	eba1 010c 	sub.w	r1, r1, ip
 8006b98:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006b9c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006ba0:	b289      	uxth	r1, r1
 8006ba2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006ba6:	454e      	cmp	r6, r9
 8006ba8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006bac:	f84a 3b04 	str.w	r3, [sl], #4
 8006bb0:	d8e6      	bhi.n	8006b80 <__mdiff+0x84>
 8006bb2:	1b33      	subs	r3, r6, r4
 8006bb4:	3b15      	subs	r3, #21
 8006bb6:	f023 0303 	bic.w	r3, r3, #3
 8006bba:	3415      	adds	r4, #21
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	42a6      	cmp	r6, r4
 8006bc0:	bf38      	it	cc
 8006bc2:	2304      	movcc	r3, #4
 8006bc4:	441d      	add	r5, r3
 8006bc6:	4443      	add	r3, r8
 8006bc8:	461e      	mov	r6, r3
 8006bca:	462c      	mov	r4, r5
 8006bcc:	4574      	cmp	r4, lr
 8006bce:	d30e      	bcc.n	8006bee <__mdiff+0xf2>
 8006bd0:	f10e 0103 	add.w	r1, lr, #3
 8006bd4:	1b49      	subs	r1, r1, r5
 8006bd6:	f021 0103 	bic.w	r1, r1, #3
 8006bda:	3d03      	subs	r5, #3
 8006bdc:	45ae      	cmp	lr, r5
 8006bde:	bf38      	it	cc
 8006be0:	2100      	movcc	r1, #0
 8006be2:	4419      	add	r1, r3
 8006be4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006be8:	b18b      	cbz	r3, 8006c0e <__mdiff+0x112>
 8006bea:	6117      	str	r7, [r2, #16]
 8006bec:	e7a0      	b.n	8006b30 <__mdiff+0x34>
 8006bee:	f854 8b04 	ldr.w	r8, [r4], #4
 8006bf2:	fa1f f188 	uxth.w	r1, r8
 8006bf6:	4461      	add	r1, ip
 8006bf8:	1408      	asrs	r0, r1, #16
 8006bfa:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006bfe:	b289      	uxth	r1, r1
 8006c00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006c04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006c08:	f846 1b04 	str.w	r1, [r6], #4
 8006c0c:	e7de      	b.n	8006bcc <__mdiff+0xd0>
 8006c0e:	3f01      	subs	r7, #1
 8006c10:	e7e8      	b.n	8006be4 <__mdiff+0xe8>
 8006c12:	bf00      	nop
 8006c14:	0800819f 	.word	0x0800819f
 8006c18:	08008210 	.word	0x08008210

08006c1c <__d2b>:
 8006c1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006c20:	2101      	movs	r1, #1
 8006c22:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006c26:	4690      	mov	r8, r2
 8006c28:	461d      	mov	r5, r3
 8006c2a:	f7ff fcd1 	bl	80065d0 <_Balloc>
 8006c2e:	4604      	mov	r4, r0
 8006c30:	b930      	cbnz	r0, 8006c40 <__d2b+0x24>
 8006c32:	4602      	mov	r2, r0
 8006c34:	f240 310a 	movw	r1, #778	; 0x30a
 8006c38:	4b24      	ldr	r3, [pc, #144]	; (8006ccc <__d2b+0xb0>)
 8006c3a:	4825      	ldr	r0, [pc, #148]	; (8006cd0 <__d2b+0xb4>)
 8006c3c:	f000 fcd8 	bl	80075f0 <__assert_func>
 8006c40:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006c44:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006c48:	bb2d      	cbnz	r5, 8006c96 <__d2b+0x7a>
 8006c4a:	9301      	str	r3, [sp, #4]
 8006c4c:	f1b8 0300 	subs.w	r3, r8, #0
 8006c50:	d026      	beq.n	8006ca0 <__d2b+0x84>
 8006c52:	4668      	mov	r0, sp
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	f7ff fd87 	bl	8006768 <__lo0bits>
 8006c5a:	9900      	ldr	r1, [sp, #0]
 8006c5c:	b1f0      	cbz	r0, 8006c9c <__d2b+0x80>
 8006c5e:	9a01      	ldr	r2, [sp, #4]
 8006c60:	f1c0 0320 	rsb	r3, r0, #32
 8006c64:	fa02 f303 	lsl.w	r3, r2, r3
 8006c68:	430b      	orrs	r3, r1
 8006c6a:	40c2      	lsrs	r2, r0
 8006c6c:	6163      	str	r3, [r4, #20]
 8006c6e:	9201      	str	r2, [sp, #4]
 8006c70:	9b01      	ldr	r3, [sp, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	bf14      	ite	ne
 8006c76:	2102      	movne	r1, #2
 8006c78:	2101      	moveq	r1, #1
 8006c7a:	61a3      	str	r3, [r4, #24]
 8006c7c:	6121      	str	r1, [r4, #16]
 8006c7e:	b1c5      	cbz	r5, 8006cb2 <__d2b+0x96>
 8006c80:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006c84:	4405      	add	r5, r0
 8006c86:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c8a:	603d      	str	r5, [r7, #0]
 8006c8c:	6030      	str	r0, [r6, #0]
 8006c8e:	4620      	mov	r0, r4
 8006c90:	b002      	add	sp, #8
 8006c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c9a:	e7d6      	b.n	8006c4a <__d2b+0x2e>
 8006c9c:	6161      	str	r1, [r4, #20]
 8006c9e:	e7e7      	b.n	8006c70 <__d2b+0x54>
 8006ca0:	a801      	add	r0, sp, #4
 8006ca2:	f7ff fd61 	bl	8006768 <__lo0bits>
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	9b01      	ldr	r3, [sp, #4]
 8006caa:	6121      	str	r1, [r4, #16]
 8006cac:	6163      	str	r3, [r4, #20]
 8006cae:	3020      	adds	r0, #32
 8006cb0:	e7e5      	b.n	8006c7e <__d2b+0x62>
 8006cb2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006cb6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006cba:	6038      	str	r0, [r7, #0]
 8006cbc:	6918      	ldr	r0, [r3, #16]
 8006cbe:	f7ff fd33 	bl	8006728 <__hi0bits>
 8006cc2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006cc6:	6031      	str	r1, [r6, #0]
 8006cc8:	e7e1      	b.n	8006c8e <__d2b+0x72>
 8006cca:	bf00      	nop
 8006ccc:	0800819f 	.word	0x0800819f
 8006cd0:	08008210 	.word	0x08008210

08006cd4 <_calloc_r>:
 8006cd4:	b538      	push	{r3, r4, r5, lr}
 8006cd6:	fb02 f501 	mul.w	r5, r2, r1
 8006cda:	4629      	mov	r1, r5
 8006cdc:	f000 f854 	bl	8006d88 <_malloc_r>
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	b118      	cbz	r0, 8006cec <_calloc_r+0x18>
 8006ce4:	462a      	mov	r2, r5
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	f7fe f834 	bl	8004d54 <memset>
 8006cec:	4620      	mov	r0, r4
 8006cee:	bd38      	pop	{r3, r4, r5, pc}

08006cf0 <_free_r>:
 8006cf0:	b538      	push	{r3, r4, r5, lr}
 8006cf2:	4605      	mov	r5, r0
 8006cf4:	2900      	cmp	r1, #0
 8006cf6:	d043      	beq.n	8006d80 <_free_r+0x90>
 8006cf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cfc:	1f0c      	subs	r4, r1, #4
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	bfb8      	it	lt
 8006d02:	18e4      	addlt	r4, r4, r3
 8006d04:	f000 fe18 	bl	8007938 <__malloc_lock>
 8006d08:	4a1e      	ldr	r2, [pc, #120]	; (8006d84 <_free_r+0x94>)
 8006d0a:	6813      	ldr	r3, [r2, #0]
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	b933      	cbnz	r3, 8006d1e <_free_r+0x2e>
 8006d10:	6063      	str	r3, [r4, #4]
 8006d12:	6014      	str	r4, [r2, #0]
 8006d14:	4628      	mov	r0, r5
 8006d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d1a:	f000 be13 	b.w	8007944 <__malloc_unlock>
 8006d1e:	42a3      	cmp	r3, r4
 8006d20:	d90a      	bls.n	8006d38 <_free_r+0x48>
 8006d22:	6821      	ldr	r1, [r4, #0]
 8006d24:	1862      	adds	r2, r4, r1
 8006d26:	4293      	cmp	r3, r2
 8006d28:	bf01      	itttt	eq
 8006d2a:	681a      	ldreq	r2, [r3, #0]
 8006d2c:	685b      	ldreq	r3, [r3, #4]
 8006d2e:	1852      	addeq	r2, r2, r1
 8006d30:	6022      	streq	r2, [r4, #0]
 8006d32:	6063      	str	r3, [r4, #4]
 8006d34:	6004      	str	r4, [r0, #0]
 8006d36:	e7ed      	b.n	8006d14 <_free_r+0x24>
 8006d38:	461a      	mov	r2, r3
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	b10b      	cbz	r3, 8006d42 <_free_r+0x52>
 8006d3e:	42a3      	cmp	r3, r4
 8006d40:	d9fa      	bls.n	8006d38 <_free_r+0x48>
 8006d42:	6811      	ldr	r1, [r2, #0]
 8006d44:	1850      	adds	r0, r2, r1
 8006d46:	42a0      	cmp	r0, r4
 8006d48:	d10b      	bne.n	8006d62 <_free_r+0x72>
 8006d4a:	6820      	ldr	r0, [r4, #0]
 8006d4c:	4401      	add	r1, r0
 8006d4e:	1850      	adds	r0, r2, r1
 8006d50:	4283      	cmp	r3, r0
 8006d52:	6011      	str	r1, [r2, #0]
 8006d54:	d1de      	bne.n	8006d14 <_free_r+0x24>
 8006d56:	6818      	ldr	r0, [r3, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	4401      	add	r1, r0
 8006d5c:	6011      	str	r1, [r2, #0]
 8006d5e:	6053      	str	r3, [r2, #4]
 8006d60:	e7d8      	b.n	8006d14 <_free_r+0x24>
 8006d62:	d902      	bls.n	8006d6a <_free_r+0x7a>
 8006d64:	230c      	movs	r3, #12
 8006d66:	602b      	str	r3, [r5, #0]
 8006d68:	e7d4      	b.n	8006d14 <_free_r+0x24>
 8006d6a:	6820      	ldr	r0, [r4, #0]
 8006d6c:	1821      	adds	r1, r4, r0
 8006d6e:	428b      	cmp	r3, r1
 8006d70:	bf01      	itttt	eq
 8006d72:	6819      	ldreq	r1, [r3, #0]
 8006d74:	685b      	ldreq	r3, [r3, #4]
 8006d76:	1809      	addeq	r1, r1, r0
 8006d78:	6021      	streq	r1, [r4, #0]
 8006d7a:	6063      	str	r3, [r4, #4]
 8006d7c:	6054      	str	r4, [r2, #4]
 8006d7e:	e7c9      	b.n	8006d14 <_free_r+0x24>
 8006d80:	bd38      	pop	{r3, r4, r5, pc}
 8006d82:	bf00      	nop
 8006d84:	20000388 	.word	0x20000388

08006d88 <_malloc_r>:
 8006d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8a:	1ccd      	adds	r5, r1, #3
 8006d8c:	f025 0503 	bic.w	r5, r5, #3
 8006d90:	3508      	adds	r5, #8
 8006d92:	2d0c      	cmp	r5, #12
 8006d94:	bf38      	it	cc
 8006d96:	250c      	movcc	r5, #12
 8006d98:	2d00      	cmp	r5, #0
 8006d9a:	4606      	mov	r6, r0
 8006d9c:	db01      	blt.n	8006da2 <_malloc_r+0x1a>
 8006d9e:	42a9      	cmp	r1, r5
 8006da0:	d903      	bls.n	8006daa <_malloc_r+0x22>
 8006da2:	230c      	movs	r3, #12
 8006da4:	6033      	str	r3, [r6, #0]
 8006da6:	2000      	movs	r0, #0
 8006da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006daa:	f000 fdc5 	bl	8007938 <__malloc_lock>
 8006dae:	4921      	ldr	r1, [pc, #132]	; (8006e34 <_malloc_r+0xac>)
 8006db0:	680a      	ldr	r2, [r1, #0]
 8006db2:	4614      	mov	r4, r2
 8006db4:	b99c      	cbnz	r4, 8006dde <_malloc_r+0x56>
 8006db6:	4f20      	ldr	r7, [pc, #128]	; (8006e38 <_malloc_r+0xb0>)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	b923      	cbnz	r3, 8006dc6 <_malloc_r+0x3e>
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	f000 faf0 	bl	80073a4 <_sbrk_r>
 8006dc4:	6038      	str	r0, [r7, #0]
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	4630      	mov	r0, r6
 8006dca:	f000 faeb 	bl	80073a4 <_sbrk_r>
 8006dce:	1c43      	adds	r3, r0, #1
 8006dd0:	d123      	bne.n	8006e1a <_malloc_r+0x92>
 8006dd2:	230c      	movs	r3, #12
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	6033      	str	r3, [r6, #0]
 8006dd8:	f000 fdb4 	bl	8007944 <__malloc_unlock>
 8006ddc:	e7e3      	b.n	8006da6 <_malloc_r+0x1e>
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	1b5b      	subs	r3, r3, r5
 8006de2:	d417      	bmi.n	8006e14 <_malloc_r+0x8c>
 8006de4:	2b0b      	cmp	r3, #11
 8006de6:	d903      	bls.n	8006df0 <_malloc_r+0x68>
 8006de8:	6023      	str	r3, [r4, #0]
 8006dea:	441c      	add	r4, r3
 8006dec:	6025      	str	r5, [r4, #0]
 8006dee:	e004      	b.n	8006dfa <_malloc_r+0x72>
 8006df0:	6863      	ldr	r3, [r4, #4]
 8006df2:	42a2      	cmp	r2, r4
 8006df4:	bf0c      	ite	eq
 8006df6:	600b      	streq	r3, [r1, #0]
 8006df8:	6053      	strne	r3, [r2, #4]
 8006dfa:	4630      	mov	r0, r6
 8006dfc:	f000 fda2 	bl	8007944 <__malloc_unlock>
 8006e00:	f104 000b 	add.w	r0, r4, #11
 8006e04:	1d23      	adds	r3, r4, #4
 8006e06:	f020 0007 	bic.w	r0, r0, #7
 8006e0a:	1ac2      	subs	r2, r0, r3
 8006e0c:	d0cc      	beq.n	8006da8 <_malloc_r+0x20>
 8006e0e:	1a1b      	subs	r3, r3, r0
 8006e10:	50a3      	str	r3, [r4, r2]
 8006e12:	e7c9      	b.n	8006da8 <_malloc_r+0x20>
 8006e14:	4622      	mov	r2, r4
 8006e16:	6864      	ldr	r4, [r4, #4]
 8006e18:	e7cc      	b.n	8006db4 <_malloc_r+0x2c>
 8006e1a:	1cc4      	adds	r4, r0, #3
 8006e1c:	f024 0403 	bic.w	r4, r4, #3
 8006e20:	42a0      	cmp	r0, r4
 8006e22:	d0e3      	beq.n	8006dec <_malloc_r+0x64>
 8006e24:	1a21      	subs	r1, r4, r0
 8006e26:	4630      	mov	r0, r6
 8006e28:	f000 fabc 	bl	80073a4 <_sbrk_r>
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	d1dd      	bne.n	8006dec <_malloc_r+0x64>
 8006e30:	e7cf      	b.n	8006dd2 <_malloc_r+0x4a>
 8006e32:	bf00      	nop
 8006e34:	20000388 	.word	0x20000388
 8006e38:	2000038c 	.word	0x2000038c

08006e3c <__ssputs_r>:
 8006e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e40:	688e      	ldr	r6, [r1, #8]
 8006e42:	4682      	mov	sl, r0
 8006e44:	429e      	cmp	r6, r3
 8006e46:	460c      	mov	r4, r1
 8006e48:	4690      	mov	r8, r2
 8006e4a:	461f      	mov	r7, r3
 8006e4c:	d838      	bhi.n	8006ec0 <__ssputs_r+0x84>
 8006e4e:	898a      	ldrh	r2, [r1, #12]
 8006e50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e54:	d032      	beq.n	8006ebc <__ssputs_r+0x80>
 8006e56:	6825      	ldr	r5, [r4, #0]
 8006e58:	6909      	ldr	r1, [r1, #16]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	eba5 0901 	sub.w	r9, r5, r1
 8006e60:	6965      	ldr	r5, [r4, #20]
 8006e62:	444b      	add	r3, r9
 8006e64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e6c:	106d      	asrs	r5, r5, #1
 8006e6e:	429d      	cmp	r5, r3
 8006e70:	bf38      	it	cc
 8006e72:	461d      	movcc	r5, r3
 8006e74:	0553      	lsls	r3, r2, #21
 8006e76:	d531      	bpl.n	8006edc <__ssputs_r+0xa0>
 8006e78:	4629      	mov	r1, r5
 8006e7a:	f7ff ff85 	bl	8006d88 <_malloc_r>
 8006e7e:	4606      	mov	r6, r0
 8006e80:	b950      	cbnz	r0, 8006e98 <__ssputs_r+0x5c>
 8006e82:	230c      	movs	r3, #12
 8006e84:	f04f 30ff 	mov.w	r0, #4294967295
 8006e88:	f8ca 3000 	str.w	r3, [sl]
 8006e8c:	89a3      	ldrh	r3, [r4, #12]
 8006e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e92:	81a3      	strh	r3, [r4, #12]
 8006e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e98:	464a      	mov	r2, r9
 8006e9a:	6921      	ldr	r1, [r4, #16]
 8006e9c:	f7ff fb8a 	bl	80065b4 <memcpy>
 8006ea0:	89a3      	ldrh	r3, [r4, #12]
 8006ea2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eaa:	81a3      	strh	r3, [r4, #12]
 8006eac:	6126      	str	r6, [r4, #16]
 8006eae:	444e      	add	r6, r9
 8006eb0:	6026      	str	r6, [r4, #0]
 8006eb2:	463e      	mov	r6, r7
 8006eb4:	6165      	str	r5, [r4, #20]
 8006eb6:	eba5 0509 	sub.w	r5, r5, r9
 8006eba:	60a5      	str	r5, [r4, #8]
 8006ebc:	42be      	cmp	r6, r7
 8006ebe:	d900      	bls.n	8006ec2 <__ssputs_r+0x86>
 8006ec0:	463e      	mov	r6, r7
 8006ec2:	4632      	mov	r2, r6
 8006ec4:	4641      	mov	r1, r8
 8006ec6:	6820      	ldr	r0, [r4, #0]
 8006ec8:	f000 fd1c 	bl	8007904 <memmove>
 8006ecc:	68a3      	ldr	r3, [r4, #8]
 8006ece:	6822      	ldr	r2, [r4, #0]
 8006ed0:	1b9b      	subs	r3, r3, r6
 8006ed2:	4432      	add	r2, r6
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	60a3      	str	r3, [r4, #8]
 8006ed8:	6022      	str	r2, [r4, #0]
 8006eda:	e7db      	b.n	8006e94 <__ssputs_r+0x58>
 8006edc:	462a      	mov	r2, r5
 8006ede:	f000 fd37 	bl	8007950 <_realloc_r>
 8006ee2:	4606      	mov	r6, r0
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	d1e1      	bne.n	8006eac <__ssputs_r+0x70>
 8006ee8:	4650      	mov	r0, sl
 8006eea:	6921      	ldr	r1, [r4, #16]
 8006eec:	f7ff ff00 	bl	8006cf0 <_free_r>
 8006ef0:	e7c7      	b.n	8006e82 <__ssputs_r+0x46>
	...

08006ef4 <_svfiprintf_r>:
 8006ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef8:	4698      	mov	r8, r3
 8006efa:	898b      	ldrh	r3, [r1, #12]
 8006efc:	4607      	mov	r7, r0
 8006efe:	061b      	lsls	r3, r3, #24
 8006f00:	460d      	mov	r5, r1
 8006f02:	4614      	mov	r4, r2
 8006f04:	b09d      	sub	sp, #116	; 0x74
 8006f06:	d50e      	bpl.n	8006f26 <_svfiprintf_r+0x32>
 8006f08:	690b      	ldr	r3, [r1, #16]
 8006f0a:	b963      	cbnz	r3, 8006f26 <_svfiprintf_r+0x32>
 8006f0c:	2140      	movs	r1, #64	; 0x40
 8006f0e:	f7ff ff3b 	bl	8006d88 <_malloc_r>
 8006f12:	6028      	str	r0, [r5, #0]
 8006f14:	6128      	str	r0, [r5, #16]
 8006f16:	b920      	cbnz	r0, 8006f22 <_svfiprintf_r+0x2e>
 8006f18:	230c      	movs	r3, #12
 8006f1a:	603b      	str	r3, [r7, #0]
 8006f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f20:	e0d1      	b.n	80070c6 <_svfiprintf_r+0x1d2>
 8006f22:	2340      	movs	r3, #64	; 0x40
 8006f24:	616b      	str	r3, [r5, #20]
 8006f26:	2300      	movs	r3, #0
 8006f28:	9309      	str	r3, [sp, #36]	; 0x24
 8006f2a:	2320      	movs	r3, #32
 8006f2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f30:	2330      	movs	r3, #48	; 0x30
 8006f32:	f04f 0901 	mov.w	r9, #1
 8006f36:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80070e0 <_svfiprintf_r+0x1ec>
 8006f3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f42:	4623      	mov	r3, r4
 8006f44:	469a      	mov	sl, r3
 8006f46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f4a:	b10a      	cbz	r2, 8006f50 <_svfiprintf_r+0x5c>
 8006f4c:	2a25      	cmp	r2, #37	; 0x25
 8006f4e:	d1f9      	bne.n	8006f44 <_svfiprintf_r+0x50>
 8006f50:	ebba 0b04 	subs.w	fp, sl, r4
 8006f54:	d00b      	beq.n	8006f6e <_svfiprintf_r+0x7a>
 8006f56:	465b      	mov	r3, fp
 8006f58:	4622      	mov	r2, r4
 8006f5a:	4629      	mov	r1, r5
 8006f5c:	4638      	mov	r0, r7
 8006f5e:	f7ff ff6d 	bl	8006e3c <__ssputs_r>
 8006f62:	3001      	adds	r0, #1
 8006f64:	f000 80aa 	beq.w	80070bc <_svfiprintf_r+0x1c8>
 8006f68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f6a:	445a      	add	r2, fp
 8006f6c:	9209      	str	r2, [sp, #36]	; 0x24
 8006f6e:	f89a 3000 	ldrb.w	r3, [sl]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f000 80a2 	beq.w	80070bc <_svfiprintf_r+0x1c8>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f82:	f10a 0a01 	add.w	sl, sl, #1
 8006f86:	9304      	str	r3, [sp, #16]
 8006f88:	9307      	str	r3, [sp, #28]
 8006f8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f8e:	931a      	str	r3, [sp, #104]	; 0x68
 8006f90:	4654      	mov	r4, sl
 8006f92:	2205      	movs	r2, #5
 8006f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f98:	4851      	ldr	r0, [pc, #324]	; (80070e0 <_svfiprintf_r+0x1ec>)
 8006f9a:	f7ff fafd 	bl	8006598 <memchr>
 8006f9e:	9a04      	ldr	r2, [sp, #16]
 8006fa0:	b9d8      	cbnz	r0, 8006fda <_svfiprintf_r+0xe6>
 8006fa2:	06d0      	lsls	r0, r2, #27
 8006fa4:	bf44      	itt	mi
 8006fa6:	2320      	movmi	r3, #32
 8006fa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fac:	0711      	lsls	r1, r2, #28
 8006fae:	bf44      	itt	mi
 8006fb0:	232b      	movmi	r3, #43	; 0x2b
 8006fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fb6:	f89a 3000 	ldrb.w	r3, [sl]
 8006fba:	2b2a      	cmp	r3, #42	; 0x2a
 8006fbc:	d015      	beq.n	8006fea <_svfiprintf_r+0xf6>
 8006fbe:	4654      	mov	r4, sl
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	f04f 0c0a 	mov.w	ip, #10
 8006fc6:	9a07      	ldr	r2, [sp, #28]
 8006fc8:	4621      	mov	r1, r4
 8006fca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fce:	3b30      	subs	r3, #48	; 0x30
 8006fd0:	2b09      	cmp	r3, #9
 8006fd2:	d94e      	bls.n	8007072 <_svfiprintf_r+0x17e>
 8006fd4:	b1b0      	cbz	r0, 8007004 <_svfiprintf_r+0x110>
 8006fd6:	9207      	str	r2, [sp, #28]
 8006fd8:	e014      	b.n	8007004 <_svfiprintf_r+0x110>
 8006fda:	eba0 0308 	sub.w	r3, r0, r8
 8006fde:	fa09 f303 	lsl.w	r3, r9, r3
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	46a2      	mov	sl, r4
 8006fe6:	9304      	str	r3, [sp, #16]
 8006fe8:	e7d2      	b.n	8006f90 <_svfiprintf_r+0x9c>
 8006fea:	9b03      	ldr	r3, [sp, #12]
 8006fec:	1d19      	adds	r1, r3, #4
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	9103      	str	r1, [sp, #12]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	bfbb      	ittet	lt
 8006ff6:	425b      	neglt	r3, r3
 8006ff8:	f042 0202 	orrlt.w	r2, r2, #2
 8006ffc:	9307      	strge	r3, [sp, #28]
 8006ffe:	9307      	strlt	r3, [sp, #28]
 8007000:	bfb8      	it	lt
 8007002:	9204      	strlt	r2, [sp, #16]
 8007004:	7823      	ldrb	r3, [r4, #0]
 8007006:	2b2e      	cmp	r3, #46	; 0x2e
 8007008:	d10c      	bne.n	8007024 <_svfiprintf_r+0x130>
 800700a:	7863      	ldrb	r3, [r4, #1]
 800700c:	2b2a      	cmp	r3, #42	; 0x2a
 800700e:	d135      	bne.n	800707c <_svfiprintf_r+0x188>
 8007010:	9b03      	ldr	r3, [sp, #12]
 8007012:	3402      	adds	r4, #2
 8007014:	1d1a      	adds	r2, r3, #4
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	9203      	str	r2, [sp, #12]
 800701a:	2b00      	cmp	r3, #0
 800701c:	bfb8      	it	lt
 800701e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007022:	9305      	str	r3, [sp, #20]
 8007024:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80070f0 <_svfiprintf_r+0x1fc>
 8007028:	2203      	movs	r2, #3
 800702a:	4650      	mov	r0, sl
 800702c:	7821      	ldrb	r1, [r4, #0]
 800702e:	f7ff fab3 	bl	8006598 <memchr>
 8007032:	b140      	cbz	r0, 8007046 <_svfiprintf_r+0x152>
 8007034:	2340      	movs	r3, #64	; 0x40
 8007036:	eba0 000a 	sub.w	r0, r0, sl
 800703a:	fa03 f000 	lsl.w	r0, r3, r0
 800703e:	9b04      	ldr	r3, [sp, #16]
 8007040:	3401      	adds	r4, #1
 8007042:	4303      	orrs	r3, r0
 8007044:	9304      	str	r3, [sp, #16]
 8007046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800704a:	2206      	movs	r2, #6
 800704c:	4825      	ldr	r0, [pc, #148]	; (80070e4 <_svfiprintf_r+0x1f0>)
 800704e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007052:	f7ff faa1 	bl	8006598 <memchr>
 8007056:	2800      	cmp	r0, #0
 8007058:	d038      	beq.n	80070cc <_svfiprintf_r+0x1d8>
 800705a:	4b23      	ldr	r3, [pc, #140]	; (80070e8 <_svfiprintf_r+0x1f4>)
 800705c:	bb1b      	cbnz	r3, 80070a6 <_svfiprintf_r+0x1b2>
 800705e:	9b03      	ldr	r3, [sp, #12]
 8007060:	3307      	adds	r3, #7
 8007062:	f023 0307 	bic.w	r3, r3, #7
 8007066:	3308      	adds	r3, #8
 8007068:	9303      	str	r3, [sp, #12]
 800706a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800706c:	4433      	add	r3, r6
 800706e:	9309      	str	r3, [sp, #36]	; 0x24
 8007070:	e767      	b.n	8006f42 <_svfiprintf_r+0x4e>
 8007072:	460c      	mov	r4, r1
 8007074:	2001      	movs	r0, #1
 8007076:	fb0c 3202 	mla	r2, ip, r2, r3
 800707a:	e7a5      	b.n	8006fc8 <_svfiprintf_r+0xd4>
 800707c:	2300      	movs	r3, #0
 800707e:	f04f 0c0a 	mov.w	ip, #10
 8007082:	4619      	mov	r1, r3
 8007084:	3401      	adds	r4, #1
 8007086:	9305      	str	r3, [sp, #20]
 8007088:	4620      	mov	r0, r4
 800708a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800708e:	3a30      	subs	r2, #48	; 0x30
 8007090:	2a09      	cmp	r2, #9
 8007092:	d903      	bls.n	800709c <_svfiprintf_r+0x1a8>
 8007094:	2b00      	cmp	r3, #0
 8007096:	d0c5      	beq.n	8007024 <_svfiprintf_r+0x130>
 8007098:	9105      	str	r1, [sp, #20]
 800709a:	e7c3      	b.n	8007024 <_svfiprintf_r+0x130>
 800709c:	4604      	mov	r4, r0
 800709e:	2301      	movs	r3, #1
 80070a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80070a4:	e7f0      	b.n	8007088 <_svfiprintf_r+0x194>
 80070a6:	ab03      	add	r3, sp, #12
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	462a      	mov	r2, r5
 80070ac:	4638      	mov	r0, r7
 80070ae:	4b0f      	ldr	r3, [pc, #60]	; (80070ec <_svfiprintf_r+0x1f8>)
 80070b0:	a904      	add	r1, sp, #16
 80070b2:	f7fd fef5 	bl	8004ea0 <_printf_float>
 80070b6:	1c42      	adds	r2, r0, #1
 80070b8:	4606      	mov	r6, r0
 80070ba:	d1d6      	bne.n	800706a <_svfiprintf_r+0x176>
 80070bc:	89ab      	ldrh	r3, [r5, #12]
 80070be:	065b      	lsls	r3, r3, #25
 80070c0:	f53f af2c 	bmi.w	8006f1c <_svfiprintf_r+0x28>
 80070c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070c6:	b01d      	add	sp, #116	; 0x74
 80070c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070cc:	ab03      	add	r3, sp, #12
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	462a      	mov	r2, r5
 80070d2:	4638      	mov	r0, r7
 80070d4:	4b05      	ldr	r3, [pc, #20]	; (80070ec <_svfiprintf_r+0x1f8>)
 80070d6:	a904      	add	r1, sp, #16
 80070d8:	f7fe f97e 	bl	80053d8 <_printf_i>
 80070dc:	e7eb      	b.n	80070b6 <_svfiprintf_r+0x1c2>
 80070de:	bf00      	nop
 80070e0:	0800836c 	.word	0x0800836c
 80070e4:	08008376 	.word	0x08008376
 80070e8:	08004ea1 	.word	0x08004ea1
 80070ec:	08006e3d 	.word	0x08006e3d
 80070f0:	08008372 	.word	0x08008372

080070f4 <__sfputc_r>:
 80070f4:	6893      	ldr	r3, [r2, #8]
 80070f6:	b410      	push	{r4}
 80070f8:	3b01      	subs	r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	6093      	str	r3, [r2, #8]
 80070fe:	da07      	bge.n	8007110 <__sfputc_r+0x1c>
 8007100:	6994      	ldr	r4, [r2, #24]
 8007102:	42a3      	cmp	r3, r4
 8007104:	db01      	blt.n	800710a <__sfputc_r+0x16>
 8007106:	290a      	cmp	r1, #10
 8007108:	d102      	bne.n	8007110 <__sfputc_r+0x1c>
 800710a:	bc10      	pop	{r4}
 800710c:	f000 b99e 	b.w	800744c <__swbuf_r>
 8007110:	6813      	ldr	r3, [r2, #0]
 8007112:	1c58      	adds	r0, r3, #1
 8007114:	6010      	str	r0, [r2, #0]
 8007116:	7019      	strb	r1, [r3, #0]
 8007118:	4608      	mov	r0, r1
 800711a:	bc10      	pop	{r4}
 800711c:	4770      	bx	lr

0800711e <__sfputs_r>:
 800711e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007120:	4606      	mov	r6, r0
 8007122:	460f      	mov	r7, r1
 8007124:	4614      	mov	r4, r2
 8007126:	18d5      	adds	r5, r2, r3
 8007128:	42ac      	cmp	r4, r5
 800712a:	d101      	bne.n	8007130 <__sfputs_r+0x12>
 800712c:	2000      	movs	r0, #0
 800712e:	e007      	b.n	8007140 <__sfputs_r+0x22>
 8007130:	463a      	mov	r2, r7
 8007132:	4630      	mov	r0, r6
 8007134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007138:	f7ff ffdc 	bl	80070f4 <__sfputc_r>
 800713c:	1c43      	adds	r3, r0, #1
 800713e:	d1f3      	bne.n	8007128 <__sfputs_r+0xa>
 8007140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007144 <_vfiprintf_r>:
 8007144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007148:	460d      	mov	r5, r1
 800714a:	4614      	mov	r4, r2
 800714c:	4698      	mov	r8, r3
 800714e:	4606      	mov	r6, r0
 8007150:	b09d      	sub	sp, #116	; 0x74
 8007152:	b118      	cbz	r0, 800715c <_vfiprintf_r+0x18>
 8007154:	6983      	ldr	r3, [r0, #24]
 8007156:	b90b      	cbnz	r3, 800715c <_vfiprintf_r+0x18>
 8007158:	f7ff f970 	bl	800643c <__sinit>
 800715c:	4b89      	ldr	r3, [pc, #548]	; (8007384 <_vfiprintf_r+0x240>)
 800715e:	429d      	cmp	r5, r3
 8007160:	d11b      	bne.n	800719a <_vfiprintf_r+0x56>
 8007162:	6875      	ldr	r5, [r6, #4]
 8007164:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007166:	07d9      	lsls	r1, r3, #31
 8007168:	d405      	bmi.n	8007176 <_vfiprintf_r+0x32>
 800716a:	89ab      	ldrh	r3, [r5, #12]
 800716c:	059a      	lsls	r2, r3, #22
 800716e:	d402      	bmi.n	8007176 <_vfiprintf_r+0x32>
 8007170:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007172:	f7ff fa06 	bl	8006582 <__retarget_lock_acquire_recursive>
 8007176:	89ab      	ldrh	r3, [r5, #12]
 8007178:	071b      	lsls	r3, r3, #28
 800717a:	d501      	bpl.n	8007180 <_vfiprintf_r+0x3c>
 800717c:	692b      	ldr	r3, [r5, #16]
 800717e:	b9eb      	cbnz	r3, 80071bc <_vfiprintf_r+0x78>
 8007180:	4629      	mov	r1, r5
 8007182:	4630      	mov	r0, r6
 8007184:	f000 f9c6 	bl	8007514 <__swsetup_r>
 8007188:	b1c0      	cbz	r0, 80071bc <_vfiprintf_r+0x78>
 800718a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800718c:	07dc      	lsls	r4, r3, #31
 800718e:	d50e      	bpl.n	80071ae <_vfiprintf_r+0x6a>
 8007190:	f04f 30ff 	mov.w	r0, #4294967295
 8007194:	b01d      	add	sp, #116	; 0x74
 8007196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800719a:	4b7b      	ldr	r3, [pc, #492]	; (8007388 <_vfiprintf_r+0x244>)
 800719c:	429d      	cmp	r5, r3
 800719e:	d101      	bne.n	80071a4 <_vfiprintf_r+0x60>
 80071a0:	68b5      	ldr	r5, [r6, #8]
 80071a2:	e7df      	b.n	8007164 <_vfiprintf_r+0x20>
 80071a4:	4b79      	ldr	r3, [pc, #484]	; (800738c <_vfiprintf_r+0x248>)
 80071a6:	429d      	cmp	r5, r3
 80071a8:	bf08      	it	eq
 80071aa:	68f5      	ldreq	r5, [r6, #12]
 80071ac:	e7da      	b.n	8007164 <_vfiprintf_r+0x20>
 80071ae:	89ab      	ldrh	r3, [r5, #12]
 80071b0:	0598      	lsls	r0, r3, #22
 80071b2:	d4ed      	bmi.n	8007190 <_vfiprintf_r+0x4c>
 80071b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071b6:	f7ff f9e5 	bl	8006584 <__retarget_lock_release_recursive>
 80071ba:	e7e9      	b.n	8007190 <_vfiprintf_r+0x4c>
 80071bc:	2300      	movs	r3, #0
 80071be:	9309      	str	r3, [sp, #36]	; 0x24
 80071c0:	2320      	movs	r3, #32
 80071c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071c6:	2330      	movs	r3, #48	; 0x30
 80071c8:	f04f 0901 	mov.w	r9, #1
 80071cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80071d0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007390 <_vfiprintf_r+0x24c>
 80071d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071d8:	4623      	mov	r3, r4
 80071da:	469a      	mov	sl, r3
 80071dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071e0:	b10a      	cbz	r2, 80071e6 <_vfiprintf_r+0xa2>
 80071e2:	2a25      	cmp	r2, #37	; 0x25
 80071e4:	d1f9      	bne.n	80071da <_vfiprintf_r+0x96>
 80071e6:	ebba 0b04 	subs.w	fp, sl, r4
 80071ea:	d00b      	beq.n	8007204 <_vfiprintf_r+0xc0>
 80071ec:	465b      	mov	r3, fp
 80071ee:	4622      	mov	r2, r4
 80071f0:	4629      	mov	r1, r5
 80071f2:	4630      	mov	r0, r6
 80071f4:	f7ff ff93 	bl	800711e <__sfputs_r>
 80071f8:	3001      	adds	r0, #1
 80071fa:	f000 80aa 	beq.w	8007352 <_vfiprintf_r+0x20e>
 80071fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007200:	445a      	add	r2, fp
 8007202:	9209      	str	r2, [sp, #36]	; 0x24
 8007204:	f89a 3000 	ldrb.w	r3, [sl]
 8007208:	2b00      	cmp	r3, #0
 800720a:	f000 80a2 	beq.w	8007352 <_vfiprintf_r+0x20e>
 800720e:	2300      	movs	r3, #0
 8007210:	f04f 32ff 	mov.w	r2, #4294967295
 8007214:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007218:	f10a 0a01 	add.w	sl, sl, #1
 800721c:	9304      	str	r3, [sp, #16]
 800721e:	9307      	str	r3, [sp, #28]
 8007220:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007224:	931a      	str	r3, [sp, #104]	; 0x68
 8007226:	4654      	mov	r4, sl
 8007228:	2205      	movs	r2, #5
 800722a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800722e:	4858      	ldr	r0, [pc, #352]	; (8007390 <_vfiprintf_r+0x24c>)
 8007230:	f7ff f9b2 	bl	8006598 <memchr>
 8007234:	9a04      	ldr	r2, [sp, #16]
 8007236:	b9d8      	cbnz	r0, 8007270 <_vfiprintf_r+0x12c>
 8007238:	06d1      	lsls	r1, r2, #27
 800723a:	bf44      	itt	mi
 800723c:	2320      	movmi	r3, #32
 800723e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007242:	0713      	lsls	r3, r2, #28
 8007244:	bf44      	itt	mi
 8007246:	232b      	movmi	r3, #43	; 0x2b
 8007248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800724c:	f89a 3000 	ldrb.w	r3, [sl]
 8007250:	2b2a      	cmp	r3, #42	; 0x2a
 8007252:	d015      	beq.n	8007280 <_vfiprintf_r+0x13c>
 8007254:	4654      	mov	r4, sl
 8007256:	2000      	movs	r0, #0
 8007258:	f04f 0c0a 	mov.w	ip, #10
 800725c:	9a07      	ldr	r2, [sp, #28]
 800725e:	4621      	mov	r1, r4
 8007260:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007264:	3b30      	subs	r3, #48	; 0x30
 8007266:	2b09      	cmp	r3, #9
 8007268:	d94e      	bls.n	8007308 <_vfiprintf_r+0x1c4>
 800726a:	b1b0      	cbz	r0, 800729a <_vfiprintf_r+0x156>
 800726c:	9207      	str	r2, [sp, #28]
 800726e:	e014      	b.n	800729a <_vfiprintf_r+0x156>
 8007270:	eba0 0308 	sub.w	r3, r0, r8
 8007274:	fa09 f303 	lsl.w	r3, r9, r3
 8007278:	4313      	orrs	r3, r2
 800727a:	46a2      	mov	sl, r4
 800727c:	9304      	str	r3, [sp, #16]
 800727e:	e7d2      	b.n	8007226 <_vfiprintf_r+0xe2>
 8007280:	9b03      	ldr	r3, [sp, #12]
 8007282:	1d19      	adds	r1, r3, #4
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	9103      	str	r1, [sp, #12]
 8007288:	2b00      	cmp	r3, #0
 800728a:	bfbb      	ittet	lt
 800728c:	425b      	neglt	r3, r3
 800728e:	f042 0202 	orrlt.w	r2, r2, #2
 8007292:	9307      	strge	r3, [sp, #28]
 8007294:	9307      	strlt	r3, [sp, #28]
 8007296:	bfb8      	it	lt
 8007298:	9204      	strlt	r2, [sp, #16]
 800729a:	7823      	ldrb	r3, [r4, #0]
 800729c:	2b2e      	cmp	r3, #46	; 0x2e
 800729e:	d10c      	bne.n	80072ba <_vfiprintf_r+0x176>
 80072a0:	7863      	ldrb	r3, [r4, #1]
 80072a2:	2b2a      	cmp	r3, #42	; 0x2a
 80072a4:	d135      	bne.n	8007312 <_vfiprintf_r+0x1ce>
 80072a6:	9b03      	ldr	r3, [sp, #12]
 80072a8:	3402      	adds	r4, #2
 80072aa:	1d1a      	adds	r2, r3, #4
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	9203      	str	r2, [sp, #12]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	bfb8      	it	lt
 80072b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80072b8:	9305      	str	r3, [sp, #20]
 80072ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80073a0 <_vfiprintf_r+0x25c>
 80072be:	2203      	movs	r2, #3
 80072c0:	4650      	mov	r0, sl
 80072c2:	7821      	ldrb	r1, [r4, #0]
 80072c4:	f7ff f968 	bl	8006598 <memchr>
 80072c8:	b140      	cbz	r0, 80072dc <_vfiprintf_r+0x198>
 80072ca:	2340      	movs	r3, #64	; 0x40
 80072cc:	eba0 000a 	sub.w	r0, r0, sl
 80072d0:	fa03 f000 	lsl.w	r0, r3, r0
 80072d4:	9b04      	ldr	r3, [sp, #16]
 80072d6:	3401      	adds	r4, #1
 80072d8:	4303      	orrs	r3, r0
 80072da:	9304      	str	r3, [sp, #16]
 80072dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072e0:	2206      	movs	r2, #6
 80072e2:	482c      	ldr	r0, [pc, #176]	; (8007394 <_vfiprintf_r+0x250>)
 80072e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072e8:	f7ff f956 	bl	8006598 <memchr>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d03f      	beq.n	8007370 <_vfiprintf_r+0x22c>
 80072f0:	4b29      	ldr	r3, [pc, #164]	; (8007398 <_vfiprintf_r+0x254>)
 80072f2:	bb1b      	cbnz	r3, 800733c <_vfiprintf_r+0x1f8>
 80072f4:	9b03      	ldr	r3, [sp, #12]
 80072f6:	3307      	adds	r3, #7
 80072f8:	f023 0307 	bic.w	r3, r3, #7
 80072fc:	3308      	adds	r3, #8
 80072fe:	9303      	str	r3, [sp, #12]
 8007300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007302:	443b      	add	r3, r7
 8007304:	9309      	str	r3, [sp, #36]	; 0x24
 8007306:	e767      	b.n	80071d8 <_vfiprintf_r+0x94>
 8007308:	460c      	mov	r4, r1
 800730a:	2001      	movs	r0, #1
 800730c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007310:	e7a5      	b.n	800725e <_vfiprintf_r+0x11a>
 8007312:	2300      	movs	r3, #0
 8007314:	f04f 0c0a 	mov.w	ip, #10
 8007318:	4619      	mov	r1, r3
 800731a:	3401      	adds	r4, #1
 800731c:	9305      	str	r3, [sp, #20]
 800731e:	4620      	mov	r0, r4
 8007320:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007324:	3a30      	subs	r2, #48	; 0x30
 8007326:	2a09      	cmp	r2, #9
 8007328:	d903      	bls.n	8007332 <_vfiprintf_r+0x1ee>
 800732a:	2b00      	cmp	r3, #0
 800732c:	d0c5      	beq.n	80072ba <_vfiprintf_r+0x176>
 800732e:	9105      	str	r1, [sp, #20]
 8007330:	e7c3      	b.n	80072ba <_vfiprintf_r+0x176>
 8007332:	4604      	mov	r4, r0
 8007334:	2301      	movs	r3, #1
 8007336:	fb0c 2101 	mla	r1, ip, r1, r2
 800733a:	e7f0      	b.n	800731e <_vfiprintf_r+0x1da>
 800733c:	ab03      	add	r3, sp, #12
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	462a      	mov	r2, r5
 8007342:	4630      	mov	r0, r6
 8007344:	4b15      	ldr	r3, [pc, #84]	; (800739c <_vfiprintf_r+0x258>)
 8007346:	a904      	add	r1, sp, #16
 8007348:	f7fd fdaa 	bl	8004ea0 <_printf_float>
 800734c:	4607      	mov	r7, r0
 800734e:	1c78      	adds	r0, r7, #1
 8007350:	d1d6      	bne.n	8007300 <_vfiprintf_r+0x1bc>
 8007352:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007354:	07d9      	lsls	r1, r3, #31
 8007356:	d405      	bmi.n	8007364 <_vfiprintf_r+0x220>
 8007358:	89ab      	ldrh	r3, [r5, #12]
 800735a:	059a      	lsls	r2, r3, #22
 800735c:	d402      	bmi.n	8007364 <_vfiprintf_r+0x220>
 800735e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007360:	f7ff f910 	bl	8006584 <__retarget_lock_release_recursive>
 8007364:	89ab      	ldrh	r3, [r5, #12]
 8007366:	065b      	lsls	r3, r3, #25
 8007368:	f53f af12 	bmi.w	8007190 <_vfiprintf_r+0x4c>
 800736c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800736e:	e711      	b.n	8007194 <_vfiprintf_r+0x50>
 8007370:	ab03      	add	r3, sp, #12
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	462a      	mov	r2, r5
 8007376:	4630      	mov	r0, r6
 8007378:	4b08      	ldr	r3, [pc, #32]	; (800739c <_vfiprintf_r+0x258>)
 800737a:	a904      	add	r1, sp, #16
 800737c:	f7fe f82c 	bl	80053d8 <_printf_i>
 8007380:	e7e4      	b.n	800734c <_vfiprintf_r+0x208>
 8007382:	bf00      	nop
 8007384:	080081d0 	.word	0x080081d0
 8007388:	080081f0 	.word	0x080081f0
 800738c:	080081b0 	.word	0x080081b0
 8007390:	0800836c 	.word	0x0800836c
 8007394:	08008376 	.word	0x08008376
 8007398:	08004ea1 	.word	0x08004ea1
 800739c:	0800711f 	.word	0x0800711f
 80073a0:	08008372 	.word	0x08008372

080073a4 <_sbrk_r>:
 80073a4:	b538      	push	{r3, r4, r5, lr}
 80073a6:	2300      	movs	r3, #0
 80073a8:	4d05      	ldr	r5, [pc, #20]	; (80073c0 <_sbrk_r+0x1c>)
 80073aa:	4604      	mov	r4, r0
 80073ac:	4608      	mov	r0, r1
 80073ae:	602b      	str	r3, [r5, #0]
 80073b0:	f7fa fe56 	bl	8002060 <_sbrk>
 80073b4:	1c43      	adds	r3, r0, #1
 80073b6:	d102      	bne.n	80073be <_sbrk_r+0x1a>
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	b103      	cbz	r3, 80073be <_sbrk_r+0x1a>
 80073bc:	6023      	str	r3, [r4, #0]
 80073be:	bd38      	pop	{r3, r4, r5, pc}
 80073c0:	200006c0 	.word	0x200006c0

080073c4 <__sread>:
 80073c4:	b510      	push	{r4, lr}
 80073c6:	460c      	mov	r4, r1
 80073c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073cc:	f000 fae6 	bl	800799c <_read_r>
 80073d0:	2800      	cmp	r0, #0
 80073d2:	bfab      	itete	ge
 80073d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073d6:	89a3      	ldrhlt	r3, [r4, #12]
 80073d8:	181b      	addge	r3, r3, r0
 80073da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073de:	bfac      	ite	ge
 80073e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80073e2:	81a3      	strhlt	r3, [r4, #12]
 80073e4:	bd10      	pop	{r4, pc}

080073e6 <__swrite>:
 80073e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ea:	461f      	mov	r7, r3
 80073ec:	898b      	ldrh	r3, [r1, #12]
 80073ee:	4605      	mov	r5, r0
 80073f0:	05db      	lsls	r3, r3, #23
 80073f2:	460c      	mov	r4, r1
 80073f4:	4616      	mov	r6, r2
 80073f6:	d505      	bpl.n	8007404 <__swrite+0x1e>
 80073f8:	2302      	movs	r3, #2
 80073fa:	2200      	movs	r2, #0
 80073fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007400:	f000 f9f8 	bl	80077f4 <_lseek_r>
 8007404:	89a3      	ldrh	r3, [r4, #12]
 8007406:	4632      	mov	r2, r6
 8007408:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800740c:	81a3      	strh	r3, [r4, #12]
 800740e:	4628      	mov	r0, r5
 8007410:	463b      	mov	r3, r7
 8007412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800741a:	f000 b869 	b.w	80074f0 <_write_r>

0800741e <__sseek>:
 800741e:	b510      	push	{r4, lr}
 8007420:	460c      	mov	r4, r1
 8007422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007426:	f000 f9e5 	bl	80077f4 <_lseek_r>
 800742a:	1c43      	adds	r3, r0, #1
 800742c:	89a3      	ldrh	r3, [r4, #12]
 800742e:	bf15      	itete	ne
 8007430:	6560      	strne	r0, [r4, #84]	; 0x54
 8007432:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007436:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800743a:	81a3      	strheq	r3, [r4, #12]
 800743c:	bf18      	it	ne
 800743e:	81a3      	strhne	r3, [r4, #12]
 8007440:	bd10      	pop	{r4, pc}

08007442 <__sclose>:
 8007442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007446:	f000 b8f1 	b.w	800762c <_close_r>
	...

0800744c <__swbuf_r>:
 800744c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744e:	460e      	mov	r6, r1
 8007450:	4614      	mov	r4, r2
 8007452:	4605      	mov	r5, r0
 8007454:	b118      	cbz	r0, 800745e <__swbuf_r+0x12>
 8007456:	6983      	ldr	r3, [r0, #24]
 8007458:	b90b      	cbnz	r3, 800745e <__swbuf_r+0x12>
 800745a:	f7fe ffef 	bl	800643c <__sinit>
 800745e:	4b21      	ldr	r3, [pc, #132]	; (80074e4 <__swbuf_r+0x98>)
 8007460:	429c      	cmp	r4, r3
 8007462:	d12b      	bne.n	80074bc <__swbuf_r+0x70>
 8007464:	686c      	ldr	r4, [r5, #4]
 8007466:	69a3      	ldr	r3, [r4, #24]
 8007468:	60a3      	str	r3, [r4, #8]
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	071a      	lsls	r2, r3, #28
 800746e:	d52f      	bpl.n	80074d0 <__swbuf_r+0x84>
 8007470:	6923      	ldr	r3, [r4, #16]
 8007472:	b36b      	cbz	r3, 80074d0 <__swbuf_r+0x84>
 8007474:	6923      	ldr	r3, [r4, #16]
 8007476:	6820      	ldr	r0, [r4, #0]
 8007478:	b2f6      	uxtb	r6, r6
 800747a:	1ac0      	subs	r0, r0, r3
 800747c:	6963      	ldr	r3, [r4, #20]
 800747e:	4637      	mov	r7, r6
 8007480:	4283      	cmp	r3, r0
 8007482:	dc04      	bgt.n	800748e <__swbuf_r+0x42>
 8007484:	4621      	mov	r1, r4
 8007486:	4628      	mov	r0, r5
 8007488:	f000 f966 	bl	8007758 <_fflush_r>
 800748c:	bb30      	cbnz	r0, 80074dc <__swbuf_r+0x90>
 800748e:	68a3      	ldr	r3, [r4, #8]
 8007490:	3001      	adds	r0, #1
 8007492:	3b01      	subs	r3, #1
 8007494:	60a3      	str	r3, [r4, #8]
 8007496:	6823      	ldr	r3, [r4, #0]
 8007498:	1c5a      	adds	r2, r3, #1
 800749a:	6022      	str	r2, [r4, #0]
 800749c:	701e      	strb	r6, [r3, #0]
 800749e:	6963      	ldr	r3, [r4, #20]
 80074a0:	4283      	cmp	r3, r0
 80074a2:	d004      	beq.n	80074ae <__swbuf_r+0x62>
 80074a4:	89a3      	ldrh	r3, [r4, #12]
 80074a6:	07db      	lsls	r3, r3, #31
 80074a8:	d506      	bpl.n	80074b8 <__swbuf_r+0x6c>
 80074aa:	2e0a      	cmp	r6, #10
 80074ac:	d104      	bne.n	80074b8 <__swbuf_r+0x6c>
 80074ae:	4621      	mov	r1, r4
 80074b0:	4628      	mov	r0, r5
 80074b2:	f000 f951 	bl	8007758 <_fflush_r>
 80074b6:	b988      	cbnz	r0, 80074dc <__swbuf_r+0x90>
 80074b8:	4638      	mov	r0, r7
 80074ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074bc:	4b0a      	ldr	r3, [pc, #40]	; (80074e8 <__swbuf_r+0x9c>)
 80074be:	429c      	cmp	r4, r3
 80074c0:	d101      	bne.n	80074c6 <__swbuf_r+0x7a>
 80074c2:	68ac      	ldr	r4, [r5, #8]
 80074c4:	e7cf      	b.n	8007466 <__swbuf_r+0x1a>
 80074c6:	4b09      	ldr	r3, [pc, #36]	; (80074ec <__swbuf_r+0xa0>)
 80074c8:	429c      	cmp	r4, r3
 80074ca:	bf08      	it	eq
 80074cc:	68ec      	ldreq	r4, [r5, #12]
 80074ce:	e7ca      	b.n	8007466 <__swbuf_r+0x1a>
 80074d0:	4621      	mov	r1, r4
 80074d2:	4628      	mov	r0, r5
 80074d4:	f000 f81e 	bl	8007514 <__swsetup_r>
 80074d8:	2800      	cmp	r0, #0
 80074da:	d0cb      	beq.n	8007474 <__swbuf_r+0x28>
 80074dc:	f04f 37ff 	mov.w	r7, #4294967295
 80074e0:	e7ea      	b.n	80074b8 <__swbuf_r+0x6c>
 80074e2:	bf00      	nop
 80074e4:	080081d0 	.word	0x080081d0
 80074e8:	080081f0 	.word	0x080081f0
 80074ec:	080081b0 	.word	0x080081b0

080074f0 <_write_r>:
 80074f0:	b538      	push	{r3, r4, r5, lr}
 80074f2:	4604      	mov	r4, r0
 80074f4:	4608      	mov	r0, r1
 80074f6:	4611      	mov	r1, r2
 80074f8:	2200      	movs	r2, #0
 80074fa:	4d05      	ldr	r5, [pc, #20]	; (8007510 <_write_r+0x20>)
 80074fc:	602a      	str	r2, [r5, #0]
 80074fe:	461a      	mov	r2, r3
 8007500:	f7fa fd62 	bl	8001fc8 <_write>
 8007504:	1c43      	adds	r3, r0, #1
 8007506:	d102      	bne.n	800750e <_write_r+0x1e>
 8007508:	682b      	ldr	r3, [r5, #0]
 800750a:	b103      	cbz	r3, 800750e <_write_r+0x1e>
 800750c:	6023      	str	r3, [r4, #0]
 800750e:	bd38      	pop	{r3, r4, r5, pc}
 8007510:	200006c0 	.word	0x200006c0

08007514 <__swsetup_r>:
 8007514:	4b32      	ldr	r3, [pc, #200]	; (80075e0 <__swsetup_r+0xcc>)
 8007516:	b570      	push	{r4, r5, r6, lr}
 8007518:	681d      	ldr	r5, [r3, #0]
 800751a:	4606      	mov	r6, r0
 800751c:	460c      	mov	r4, r1
 800751e:	b125      	cbz	r5, 800752a <__swsetup_r+0x16>
 8007520:	69ab      	ldr	r3, [r5, #24]
 8007522:	b913      	cbnz	r3, 800752a <__swsetup_r+0x16>
 8007524:	4628      	mov	r0, r5
 8007526:	f7fe ff89 	bl	800643c <__sinit>
 800752a:	4b2e      	ldr	r3, [pc, #184]	; (80075e4 <__swsetup_r+0xd0>)
 800752c:	429c      	cmp	r4, r3
 800752e:	d10f      	bne.n	8007550 <__swsetup_r+0x3c>
 8007530:	686c      	ldr	r4, [r5, #4]
 8007532:	89a3      	ldrh	r3, [r4, #12]
 8007534:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007538:	0719      	lsls	r1, r3, #28
 800753a:	d42c      	bmi.n	8007596 <__swsetup_r+0x82>
 800753c:	06dd      	lsls	r5, r3, #27
 800753e:	d411      	bmi.n	8007564 <__swsetup_r+0x50>
 8007540:	2309      	movs	r3, #9
 8007542:	6033      	str	r3, [r6, #0]
 8007544:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007548:	f04f 30ff 	mov.w	r0, #4294967295
 800754c:	81a3      	strh	r3, [r4, #12]
 800754e:	e03e      	b.n	80075ce <__swsetup_r+0xba>
 8007550:	4b25      	ldr	r3, [pc, #148]	; (80075e8 <__swsetup_r+0xd4>)
 8007552:	429c      	cmp	r4, r3
 8007554:	d101      	bne.n	800755a <__swsetup_r+0x46>
 8007556:	68ac      	ldr	r4, [r5, #8]
 8007558:	e7eb      	b.n	8007532 <__swsetup_r+0x1e>
 800755a:	4b24      	ldr	r3, [pc, #144]	; (80075ec <__swsetup_r+0xd8>)
 800755c:	429c      	cmp	r4, r3
 800755e:	bf08      	it	eq
 8007560:	68ec      	ldreq	r4, [r5, #12]
 8007562:	e7e6      	b.n	8007532 <__swsetup_r+0x1e>
 8007564:	0758      	lsls	r0, r3, #29
 8007566:	d512      	bpl.n	800758e <__swsetup_r+0x7a>
 8007568:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800756a:	b141      	cbz	r1, 800757e <__swsetup_r+0x6a>
 800756c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007570:	4299      	cmp	r1, r3
 8007572:	d002      	beq.n	800757a <__swsetup_r+0x66>
 8007574:	4630      	mov	r0, r6
 8007576:	f7ff fbbb 	bl	8006cf0 <_free_r>
 800757a:	2300      	movs	r3, #0
 800757c:	6363      	str	r3, [r4, #52]	; 0x34
 800757e:	89a3      	ldrh	r3, [r4, #12]
 8007580:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007584:	81a3      	strh	r3, [r4, #12]
 8007586:	2300      	movs	r3, #0
 8007588:	6063      	str	r3, [r4, #4]
 800758a:	6923      	ldr	r3, [r4, #16]
 800758c:	6023      	str	r3, [r4, #0]
 800758e:	89a3      	ldrh	r3, [r4, #12]
 8007590:	f043 0308 	orr.w	r3, r3, #8
 8007594:	81a3      	strh	r3, [r4, #12]
 8007596:	6923      	ldr	r3, [r4, #16]
 8007598:	b94b      	cbnz	r3, 80075ae <__swsetup_r+0x9a>
 800759a:	89a3      	ldrh	r3, [r4, #12]
 800759c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80075a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075a4:	d003      	beq.n	80075ae <__swsetup_r+0x9a>
 80075a6:	4621      	mov	r1, r4
 80075a8:	4630      	mov	r0, r6
 80075aa:	f000 f959 	bl	8007860 <__smakebuf_r>
 80075ae:	89a0      	ldrh	r0, [r4, #12]
 80075b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075b4:	f010 0301 	ands.w	r3, r0, #1
 80075b8:	d00a      	beq.n	80075d0 <__swsetup_r+0xbc>
 80075ba:	2300      	movs	r3, #0
 80075bc:	60a3      	str	r3, [r4, #8]
 80075be:	6963      	ldr	r3, [r4, #20]
 80075c0:	425b      	negs	r3, r3
 80075c2:	61a3      	str	r3, [r4, #24]
 80075c4:	6923      	ldr	r3, [r4, #16]
 80075c6:	b943      	cbnz	r3, 80075da <__swsetup_r+0xc6>
 80075c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80075cc:	d1ba      	bne.n	8007544 <__swsetup_r+0x30>
 80075ce:	bd70      	pop	{r4, r5, r6, pc}
 80075d0:	0781      	lsls	r1, r0, #30
 80075d2:	bf58      	it	pl
 80075d4:	6963      	ldrpl	r3, [r4, #20]
 80075d6:	60a3      	str	r3, [r4, #8]
 80075d8:	e7f4      	b.n	80075c4 <__swsetup_r+0xb0>
 80075da:	2000      	movs	r0, #0
 80075dc:	e7f7      	b.n	80075ce <__swsetup_r+0xba>
 80075de:	bf00      	nop
 80075e0:	2000008c 	.word	0x2000008c
 80075e4:	080081d0 	.word	0x080081d0
 80075e8:	080081f0 	.word	0x080081f0
 80075ec:	080081b0 	.word	0x080081b0

080075f0 <__assert_func>:
 80075f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075f2:	4614      	mov	r4, r2
 80075f4:	461a      	mov	r2, r3
 80075f6:	4b09      	ldr	r3, [pc, #36]	; (800761c <__assert_func+0x2c>)
 80075f8:	4605      	mov	r5, r0
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68d8      	ldr	r0, [r3, #12]
 80075fe:	b14c      	cbz	r4, 8007614 <__assert_func+0x24>
 8007600:	4b07      	ldr	r3, [pc, #28]	; (8007620 <__assert_func+0x30>)
 8007602:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007606:	9100      	str	r1, [sp, #0]
 8007608:	462b      	mov	r3, r5
 800760a:	4906      	ldr	r1, [pc, #24]	; (8007624 <__assert_func+0x34>)
 800760c:	f000 f8e0 	bl	80077d0 <fiprintf>
 8007610:	f000 f9e3 	bl	80079da <abort>
 8007614:	4b04      	ldr	r3, [pc, #16]	; (8007628 <__assert_func+0x38>)
 8007616:	461c      	mov	r4, r3
 8007618:	e7f3      	b.n	8007602 <__assert_func+0x12>
 800761a:	bf00      	nop
 800761c:	2000008c 	.word	0x2000008c
 8007620:	0800837d 	.word	0x0800837d
 8007624:	0800838a 	.word	0x0800838a
 8007628:	080083b8 	.word	0x080083b8

0800762c <_close_r>:
 800762c:	b538      	push	{r3, r4, r5, lr}
 800762e:	2300      	movs	r3, #0
 8007630:	4d05      	ldr	r5, [pc, #20]	; (8007648 <_close_r+0x1c>)
 8007632:	4604      	mov	r4, r0
 8007634:	4608      	mov	r0, r1
 8007636:	602b      	str	r3, [r5, #0]
 8007638:	f7fa fce2 	bl	8002000 <_close>
 800763c:	1c43      	adds	r3, r0, #1
 800763e:	d102      	bne.n	8007646 <_close_r+0x1a>
 8007640:	682b      	ldr	r3, [r5, #0]
 8007642:	b103      	cbz	r3, 8007646 <_close_r+0x1a>
 8007644:	6023      	str	r3, [r4, #0]
 8007646:	bd38      	pop	{r3, r4, r5, pc}
 8007648:	200006c0 	.word	0x200006c0

0800764c <__sflush_r>:
 800764c:	898a      	ldrh	r2, [r1, #12]
 800764e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007652:	4605      	mov	r5, r0
 8007654:	0710      	lsls	r0, r2, #28
 8007656:	460c      	mov	r4, r1
 8007658:	d458      	bmi.n	800770c <__sflush_r+0xc0>
 800765a:	684b      	ldr	r3, [r1, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	dc05      	bgt.n	800766c <__sflush_r+0x20>
 8007660:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007662:	2b00      	cmp	r3, #0
 8007664:	dc02      	bgt.n	800766c <__sflush_r+0x20>
 8007666:	2000      	movs	r0, #0
 8007668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800766c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800766e:	2e00      	cmp	r6, #0
 8007670:	d0f9      	beq.n	8007666 <__sflush_r+0x1a>
 8007672:	2300      	movs	r3, #0
 8007674:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007678:	682f      	ldr	r7, [r5, #0]
 800767a:	602b      	str	r3, [r5, #0]
 800767c:	d032      	beq.n	80076e4 <__sflush_r+0x98>
 800767e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007680:	89a3      	ldrh	r3, [r4, #12]
 8007682:	075a      	lsls	r2, r3, #29
 8007684:	d505      	bpl.n	8007692 <__sflush_r+0x46>
 8007686:	6863      	ldr	r3, [r4, #4]
 8007688:	1ac0      	subs	r0, r0, r3
 800768a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800768c:	b10b      	cbz	r3, 8007692 <__sflush_r+0x46>
 800768e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007690:	1ac0      	subs	r0, r0, r3
 8007692:	2300      	movs	r3, #0
 8007694:	4602      	mov	r2, r0
 8007696:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007698:	4628      	mov	r0, r5
 800769a:	6a21      	ldr	r1, [r4, #32]
 800769c:	47b0      	blx	r6
 800769e:	1c43      	adds	r3, r0, #1
 80076a0:	89a3      	ldrh	r3, [r4, #12]
 80076a2:	d106      	bne.n	80076b2 <__sflush_r+0x66>
 80076a4:	6829      	ldr	r1, [r5, #0]
 80076a6:	291d      	cmp	r1, #29
 80076a8:	d82c      	bhi.n	8007704 <__sflush_r+0xb8>
 80076aa:	4a2a      	ldr	r2, [pc, #168]	; (8007754 <__sflush_r+0x108>)
 80076ac:	40ca      	lsrs	r2, r1
 80076ae:	07d6      	lsls	r6, r2, #31
 80076b0:	d528      	bpl.n	8007704 <__sflush_r+0xb8>
 80076b2:	2200      	movs	r2, #0
 80076b4:	6062      	str	r2, [r4, #4]
 80076b6:	6922      	ldr	r2, [r4, #16]
 80076b8:	04d9      	lsls	r1, r3, #19
 80076ba:	6022      	str	r2, [r4, #0]
 80076bc:	d504      	bpl.n	80076c8 <__sflush_r+0x7c>
 80076be:	1c42      	adds	r2, r0, #1
 80076c0:	d101      	bne.n	80076c6 <__sflush_r+0x7a>
 80076c2:	682b      	ldr	r3, [r5, #0]
 80076c4:	b903      	cbnz	r3, 80076c8 <__sflush_r+0x7c>
 80076c6:	6560      	str	r0, [r4, #84]	; 0x54
 80076c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076ca:	602f      	str	r7, [r5, #0]
 80076cc:	2900      	cmp	r1, #0
 80076ce:	d0ca      	beq.n	8007666 <__sflush_r+0x1a>
 80076d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076d4:	4299      	cmp	r1, r3
 80076d6:	d002      	beq.n	80076de <__sflush_r+0x92>
 80076d8:	4628      	mov	r0, r5
 80076da:	f7ff fb09 	bl	8006cf0 <_free_r>
 80076de:	2000      	movs	r0, #0
 80076e0:	6360      	str	r0, [r4, #52]	; 0x34
 80076e2:	e7c1      	b.n	8007668 <__sflush_r+0x1c>
 80076e4:	6a21      	ldr	r1, [r4, #32]
 80076e6:	2301      	movs	r3, #1
 80076e8:	4628      	mov	r0, r5
 80076ea:	47b0      	blx	r6
 80076ec:	1c41      	adds	r1, r0, #1
 80076ee:	d1c7      	bne.n	8007680 <__sflush_r+0x34>
 80076f0:	682b      	ldr	r3, [r5, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d0c4      	beq.n	8007680 <__sflush_r+0x34>
 80076f6:	2b1d      	cmp	r3, #29
 80076f8:	d001      	beq.n	80076fe <__sflush_r+0xb2>
 80076fa:	2b16      	cmp	r3, #22
 80076fc:	d101      	bne.n	8007702 <__sflush_r+0xb6>
 80076fe:	602f      	str	r7, [r5, #0]
 8007700:	e7b1      	b.n	8007666 <__sflush_r+0x1a>
 8007702:	89a3      	ldrh	r3, [r4, #12]
 8007704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007708:	81a3      	strh	r3, [r4, #12]
 800770a:	e7ad      	b.n	8007668 <__sflush_r+0x1c>
 800770c:	690f      	ldr	r7, [r1, #16]
 800770e:	2f00      	cmp	r7, #0
 8007710:	d0a9      	beq.n	8007666 <__sflush_r+0x1a>
 8007712:	0793      	lsls	r3, r2, #30
 8007714:	bf18      	it	ne
 8007716:	2300      	movne	r3, #0
 8007718:	680e      	ldr	r6, [r1, #0]
 800771a:	bf08      	it	eq
 800771c:	694b      	ldreq	r3, [r1, #20]
 800771e:	eba6 0807 	sub.w	r8, r6, r7
 8007722:	600f      	str	r7, [r1, #0]
 8007724:	608b      	str	r3, [r1, #8]
 8007726:	f1b8 0f00 	cmp.w	r8, #0
 800772a:	dd9c      	ble.n	8007666 <__sflush_r+0x1a>
 800772c:	4643      	mov	r3, r8
 800772e:	463a      	mov	r2, r7
 8007730:	4628      	mov	r0, r5
 8007732:	6a21      	ldr	r1, [r4, #32]
 8007734:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007736:	47b0      	blx	r6
 8007738:	2800      	cmp	r0, #0
 800773a:	dc06      	bgt.n	800774a <__sflush_r+0xfe>
 800773c:	89a3      	ldrh	r3, [r4, #12]
 800773e:	f04f 30ff 	mov.w	r0, #4294967295
 8007742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007746:	81a3      	strh	r3, [r4, #12]
 8007748:	e78e      	b.n	8007668 <__sflush_r+0x1c>
 800774a:	4407      	add	r7, r0
 800774c:	eba8 0800 	sub.w	r8, r8, r0
 8007750:	e7e9      	b.n	8007726 <__sflush_r+0xda>
 8007752:	bf00      	nop
 8007754:	20400001 	.word	0x20400001

08007758 <_fflush_r>:
 8007758:	b538      	push	{r3, r4, r5, lr}
 800775a:	690b      	ldr	r3, [r1, #16]
 800775c:	4605      	mov	r5, r0
 800775e:	460c      	mov	r4, r1
 8007760:	b913      	cbnz	r3, 8007768 <_fflush_r+0x10>
 8007762:	2500      	movs	r5, #0
 8007764:	4628      	mov	r0, r5
 8007766:	bd38      	pop	{r3, r4, r5, pc}
 8007768:	b118      	cbz	r0, 8007772 <_fflush_r+0x1a>
 800776a:	6983      	ldr	r3, [r0, #24]
 800776c:	b90b      	cbnz	r3, 8007772 <_fflush_r+0x1a>
 800776e:	f7fe fe65 	bl	800643c <__sinit>
 8007772:	4b14      	ldr	r3, [pc, #80]	; (80077c4 <_fflush_r+0x6c>)
 8007774:	429c      	cmp	r4, r3
 8007776:	d11b      	bne.n	80077b0 <_fflush_r+0x58>
 8007778:	686c      	ldr	r4, [r5, #4]
 800777a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d0ef      	beq.n	8007762 <_fflush_r+0xa>
 8007782:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007784:	07d0      	lsls	r0, r2, #31
 8007786:	d404      	bmi.n	8007792 <_fflush_r+0x3a>
 8007788:	0599      	lsls	r1, r3, #22
 800778a:	d402      	bmi.n	8007792 <_fflush_r+0x3a>
 800778c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800778e:	f7fe fef8 	bl	8006582 <__retarget_lock_acquire_recursive>
 8007792:	4628      	mov	r0, r5
 8007794:	4621      	mov	r1, r4
 8007796:	f7ff ff59 	bl	800764c <__sflush_r>
 800779a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800779c:	4605      	mov	r5, r0
 800779e:	07da      	lsls	r2, r3, #31
 80077a0:	d4e0      	bmi.n	8007764 <_fflush_r+0xc>
 80077a2:	89a3      	ldrh	r3, [r4, #12]
 80077a4:	059b      	lsls	r3, r3, #22
 80077a6:	d4dd      	bmi.n	8007764 <_fflush_r+0xc>
 80077a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077aa:	f7fe feeb 	bl	8006584 <__retarget_lock_release_recursive>
 80077ae:	e7d9      	b.n	8007764 <_fflush_r+0xc>
 80077b0:	4b05      	ldr	r3, [pc, #20]	; (80077c8 <_fflush_r+0x70>)
 80077b2:	429c      	cmp	r4, r3
 80077b4:	d101      	bne.n	80077ba <_fflush_r+0x62>
 80077b6:	68ac      	ldr	r4, [r5, #8]
 80077b8:	e7df      	b.n	800777a <_fflush_r+0x22>
 80077ba:	4b04      	ldr	r3, [pc, #16]	; (80077cc <_fflush_r+0x74>)
 80077bc:	429c      	cmp	r4, r3
 80077be:	bf08      	it	eq
 80077c0:	68ec      	ldreq	r4, [r5, #12]
 80077c2:	e7da      	b.n	800777a <_fflush_r+0x22>
 80077c4:	080081d0 	.word	0x080081d0
 80077c8:	080081f0 	.word	0x080081f0
 80077cc:	080081b0 	.word	0x080081b0

080077d0 <fiprintf>:
 80077d0:	b40e      	push	{r1, r2, r3}
 80077d2:	b503      	push	{r0, r1, lr}
 80077d4:	4601      	mov	r1, r0
 80077d6:	ab03      	add	r3, sp, #12
 80077d8:	4805      	ldr	r0, [pc, #20]	; (80077f0 <fiprintf+0x20>)
 80077da:	f853 2b04 	ldr.w	r2, [r3], #4
 80077de:	6800      	ldr	r0, [r0, #0]
 80077e0:	9301      	str	r3, [sp, #4]
 80077e2:	f7ff fcaf 	bl	8007144 <_vfiprintf_r>
 80077e6:	b002      	add	sp, #8
 80077e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80077ec:	b003      	add	sp, #12
 80077ee:	4770      	bx	lr
 80077f0:	2000008c 	.word	0x2000008c

080077f4 <_lseek_r>:
 80077f4:	b538      	push	{r3, r4, r5, lr}
 80077f6:	4604      	mov	r4, r0
 80077f8:	4608      	mov	r0, r1
 80077fa:	4611      	mov	r1, r2
 80077fc:	2200      	movs	r2, #0
 80077fe:	4d05      	ldr	r5, [pc, #20]	; (8007814 <_lseek_r+0x20>)
 8007800:	602a      	str	r2, [r5, #0]
 8007802:	461a      	mov	r2, r3
 8007804:	f7fa fc20 	bl	8002048 <_lseek>
 8007808:	1c43      	adds	r3, r0, #1
 800780a:	d102      	bne.n	8007812 <_lseek_r+0x1e>
 800780c:	682b      	ldr	r3, [r5, #0]
 800780e:	b103      	cbz	r3, 8007812 <_lseek_r+0x1e>
 8007810:	6023      	str	r3, [r4, #0]
 8007812:	bd38      	pop	{r3, r4, r5, pc}
 8007814:	200006c0 	.word	0x200006c0

08007818 <__swhatbuf_r>:
 8007818:	b570      	push	{r4, r5, r6, lr}
 800781a:	460e      	mov	r6, r1
 800781c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007820:	4614      	mov	r4, r2
 8007822:	2900      	cmp	r1, #0
 8007824:	461d      	mov	r5, r3
 8007826:	b096      	sub	sp, #88	; 0x58
 8007828:	da07      	bge.n	800783a <__swhatbuf_r+0x22>
 800782a:	2300      	movs	r3, #0
 800782c:	602b      	str	r3, [r5, #0]
 800782e:	89b3      	ldrh	r3, [r6, #12]
 8007830:	061a      	lsls	r2, r3, #24
 8007832:	d410      	bmi.n	8007856 <__swhatbuf_r+0x3e>
 8007834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007838:	e00e      	b.n	8007858 <__swhatbuf_r+0x40>
 800783a:	466a      	mov	r2, sp
 800783c:	f000 f8d4 	bl	80079e8 <_fstat_r>
 8007840:	2800      	cmp	r0, #0
 8007842:	dbf2      	blt.n	800782a <__swhatbuf_r+0x12>
 8007844:	9a01      	ldr	r2, [sp, #4]
 8007846:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800784a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800784e:	425a      	negs	r2, r3
 8007850:	415a      	adcs	r2, r3
 8007852:	602a      	str	r2, [r5, #0]
 8007854:	e7ee      	b.n	8007834 <__swhatbuf_r+0x1c>
 8007856:	2340      	movs	r3, #64	; 0x40
 8007858:	2000      	movs	r0, #0
 800785a:	6023      	str	r3, [r4, #0]
 800785c:	b016      	add	sp, #88	; 0x58
 800785e:	bd70      	pop	{r4, r5, r6, pc}

08007860 <__smakebuf_r>:
 8007860:	898b      	ldrh	r3, [r1, #12]
 8007862:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007864:	079d      	lsls	r5, r3, #30
 8007866:	4606      	mov	r6, r0
 8007868:	460c      	mov	r4, r1
 800786a:	d507      	bpl.n	800787c <__smakebuf_r+0x1c>
 800786c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	6123      	str	r3, [r4, #16]
 8007874:	2301      	movs	r3, #1
 8007876:	6163      	str	r3, [r4, #20]
 8007878:	b002      	add	sp, #8
 800787a:	bd70      	pop	{r4, r5, r6, pc}
 800787c:	466a      	mov	r2, sp
 800787e:	ab01      	add	r3, sp, #4
 8007880:	f7ff ffca 	bl	8007818 <__swhatbuf_r>
 8007884:	9900      	ldr	r1, [sp, #0]
 8007886:	4605      	mov	r5, r0
 8007888:	4630      	mov	r0, r6
 800788a:	f7ff fa7d 	bl	8006d88 <_malloc_r>
 800788e:	b948      	cbnz	r0, 80078a4 <__smakebuf_r+0x44>
 8007890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007894:	059a      	lsls	r2, r3, #22
 8007896:	d4ef      	bmi.n	8007878 <__smakebuf_r+0x18>
 8007898:	f023 0303 	bic.w	r3, r3, #3
 800789c:	f043 0302 	orr.w	r3, r3, #2
 80078a0:	81a3      	strh	r3, [r4, #12]
 80078a2:	e7e3      	b.n	800786c <__smakebuf_r+0xc>
 80078a4:	4b0d      	ldr	r3, [pc, #52]	; (80078dc <__smakebuf_r+0x7c>)
 80078a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80078a8:	89a3      	ldrh	r3, [r4, #12]
 80078aa:	6020      	str	r0, [r4, #0]
 80078ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078b0:	81a3      	strh	r3, [r4, #12]
 80078b2:	9b00      	ldr	r3, [sp, #0]
 80078b4:	6120      	str	r0, [r4, #16]
 80078b6:	6163      	str	r3, [r4, #20]
 80078b8:	9b01      	ldr	r3, [sp, #4]
 80078ba:	b15b      	cbz	r3, 80078d4 <__smakebuf_r+0x74>
 80078bc:	4630      	mov	r0, r6
 80078be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078c2:	f000 f8a3 	bl	8007a0c <_isatty_r>
 80078c6:	b128      	cbz	r0, 80078d4 <__smakebuf_r+0x74>
 80078c8:	89a3      	ldrh	r3, [r4, #12]
 80078ca:	f023 0303 	bic.w	r3, r3, #3
 80078ce:	f043 0301 	orr.w	r3, r3, #1
 80078d2:	81a3      	strh	r3, [r4, #12]
 80078d4:	89a0      	ldrh	r0, [r4, #12]
 80078d6:	4305      	orrs	r5, r0
 80078d8:	81a5      	strh	r5, [r4, #12]
 80078da:	e7cd      	b.n	8007878 <__smakebuf_r+0x18>
 80078dc:	080063d5 	.word	0x080063d5

080078e0 <__ascii_mbtowc>:
 80078e0:	b082      	sub	sp, #8
 80078e2:	b901      	cbnz	r1, 80078e6 <__ascii_mbtowc+0x6>
 80078e4:	a901      	add	r1, sp, #4
 80078e6:	b142      	cbz	r2, 80078fa <__ascii_mbtowc+0x1a>
 80078e8:	b14b      	cbz	r3, 80078fe <__ascii_mbtowc+0x1e>
 80078ea:	7813      	ldrb	r3, [r2, #0]
 80078ec:	600b      	str	r3, [r1, #0]
 80078ee:	7812      	ldrb	r2, [r2, #0]
 80078f0:	1e10      	subs	r0, r2, #0
 80078f2:	bf18      	it	ne
 80078f4:	2001      	movne	r0, #1
 80078f6:	b002      	add	sp, #8
 80078f8:	4770      	bx	lr
 80078fa:	4610      	mov	r0, r2
 80078fc:	e7fb      	b.n	80078f6 <__ascii_mbtowc+0x16>
 80078fe:	f06f 0001 	mvn.w	r0, #1
 8007902:	e7f8      	b.n	80078f6 <__ascii_mbtowc+0x16>

08007904 <memmove>:
 8007904:	4288      	cmp	r0, r1
 8007906:	b510      	push	{r4, lr}
 8007908:	eb01 0402 	add.w	r4, r1, r2
 800790c:	d902      	bls.n	8007914 <memmove+0x10>
 800790e:	4284      	cmp	r4, r0
 8007910:	4623      	mov	r3, r4
 8007912:	d807      	bhi.n	8007924 <memmove+0x20>
 8007914:	1e43      	subs	r3, r0, #1
 8007916:	42a1      	cmp	r1, r4
 8007918:	d008      	beq.n	800792c <memmove+0x28>
 800791a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800791e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007922:	e7f8      	b.n	8007916 <memmove+0x12>
 8007924:	4601      	mov	r1, r0
 8007926:	4402      	add	r2, r0
 8007928:	428a      	cmp	r2, r1
 800792a:	d100      	bne.n	800792e <memmove+0x2a>
 800792c:	bd10      	pop	{r4, pc}
 800792e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007932:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007936:	e7f7      	b.n	8007928 <memmove+0x24>

08007938 <__malloc_lock>:
 8007938:	4801      	ldr	r0, [pc, #4]	; (8007940 <__malloc_lock+0x8>)
 800793a:	f7fe be22 	b.w	8006582 <__retarget_lock_acquire_recursive>
 800793e:	bf00      	nop
 8007940:	200006b8 	.word	0x200006b8

08007944 <__malloc_unlock>:
 8007944:	4801      	ldr	r0, [pc, #4]	; (800794c <__malloc_unlock+0x8>)
 8007946:	f7fe be1d 	b.w	8006584 <__retarget_lock_release_recursive>
 800794a:	bf00      	nop
 800794c:	200006b8 	.word	0x200006b8

08007950 <_realloc_r>:
 8007950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007952:	4607      	mov	r7, r0
 8007954:	4614      	mov	r4, r2
 8007956:	460e      	mov	r6, r1
 8007958:	b921      	cbnz	r1, 8007964 <_realloc_r+0x14>
 800795a:	4611      	mov	r1, r2
 800795c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007960:	f7ff ba12 	b.w	8006d88 <_malloc_r>
 8007964:	b922      	cbnz	r2, 8007970 <_realloc_r+0x20>
 8007966:	f7ff f9c3 	bl	8006cf0 <_free_r>
 800796a:	4625      	mov	r5, r4
 800796c:	4628      	mov	r0, r5
 800796e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007970:	f000 f85c 	bl	8007a2c <_malloc_usable_size_r>
 8007974:	42a0      	cmp	r0, r4
 8007976:	d20f      	bcs.n	8007998 <_realloc_r+0x48>
 8007978:	4621      	mov	r1, r4
 800797a:	4638      	mov	r0, r7
 800797c:	f7ff fa04 	bl	8006d88 <_malloc_r>
 8007980:	4605      	mov	r5, r0
 8007982:	2800      	cmp	r0, #0
 8007984:	d0f2      	beq.n	800796c <_realloc_r+0x1c>
 8007986:	4631      	mov	r1, r6
 8007988:	4622      	mov	r2, r4
 800798a:	f7fe fe13 	bl	80065b4 <memcpy>
 800798e:	4631      	mov	r1, r6
 8007990:	4638      	mov	r0, r7
 8007992:	f7ff f9ad 	bl	8006cf0 <_free_r>
 8007996:	e7e9      	b.n	800796c <_realloc_r+0x1c>
 8007998:	4635      	mov	r5, r6
 800799a:	e7e7      	b.n	800796c <_realloc_r+0x1c>

0800799c <_read_r>:
 800799c:	b538      	push	{r3, r4, r5, lr}
 800799e:	4604      	mov	r4, r0
 80079a0:	4608      	mov	r0, r1
 80079a2:	4611      	mov	r1, r2
 80079a4:	2200      	movs	r2, #0
 80079a6:	4d05      	ldr	r5, [pc, #20]	; (80079bc <_read_r+0x20>)
 80079a8:	602a      	str	r2, [r5, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	f7fa faef 	bl	8001f8e <_read>
 80079b0:	1c43      	adds	r3, r0, #1
 80079b2:	d102      	bne.n	80079ba <_read_r+0x1e>
 80079b4:	682b      	ldr	r3, [r5, #0]
 80079b6:	b103      	cbz	r3, 80079ba <_read_r+0x1e>
 80079b8:	6023      	str	r3, [r4, #0]
 80079ba:	bd38      	pop	{r3, r4, r5, pc}
 80079bc:	200006c0 	.word	0x200006c0

080079c0 <__ascii_wctomb>:
 80079c0:	4603      	mov	r3, r0
 80079c2:	4608      	mov	r0, r1
 80079c4:	b141      	cbz	r1, 80079d8 <__ascii_wctomb+0x18>
 80079c6:	2aff      	cmp	r2, #255	; 0xff
 80079c8:	d904      	bls.n	80079d4 <__ascii_wctomb+0x14>
 80079ca:	228a      	movs	r2, #138	; 0x8a
 80079cc:	f04f 30ff 	mov.w	r0, #4294967295
 80079d0:	601a      	str	r2, [r3, #0]
 80079d2:	4770      	bx	lr
 80079d4:	2001      	movs	r0, #1
 80079d6:	700a      	strb	r2, [r1, #0]
 80079d8:	4770      	bx	lr

080079da <abort>:
 80079da:	2006      	movs	r0, #6
 80079dc:	b508      	push	{r3, lr}
 80079de:	f000 f855 	bl	8007a8c <raise>
 80079e2:	2001      	movs	r0, #1
 80079e4:	f7fa fac9 	bl	8001f7a <_exit>

080079e8 <_fstat_r>:
 80079e8:	b538      	push	{r3, r4, r5, lr}
 80079ea:	2300      	movs	r3, #0
 80079ec:	4d06      	ldr	r5, [pc, #24]	; (8007a08 <_fstat_r+0x20>)
 80079ee:	4604      	mov	r4, r0
 80079f0:	4608      	mov	r0, r1
 80079f2:	4611      	mov	r1, r2
 80079f4:	602b      	str	r3, [r5, #0]
 80079f6:	f7fa fb0e 	bl	8002016 <_fstat>
 80079fa:	1c43      	adds	r3, r0, #1
 80079fc:	d102      	bne.n	8007a04 <_fstat_r+0x1c>
 80079fe:	682b      	ldr	r3, [r5, #0]
 8007a00:	b103      	cbz	r3, 8007a04 <_fstat_r+0x1c>
 8007a02:	6023      	str	r3, [r4, #0]
 8007a04:	bd38      	pop	{r3, r4, r5, pc}
 8007a06:	bf00      	nop
 8007a08:	200006c0 	.word	0x200006c0

08007a0c <_isatty_r>:
 8007a0c:	b538      	push	{r3, r4, r5, lr}
 8007a0e:	2300      	movs	r3, #0
 8007a10:	4d05      	ldr	r5, [pc, #20]	; (8007a28 <_isatty_r+0x1c>)
 8007a12:	4604      	mov	r4, r0
 8007a14:	4608      	mov	r0, r1
 8007a16:	602b      	str	r3, [r5, #0]
 8007a18:	f7fa fb0c 	bl	8002034 <_isatty>
 8007a1c:	1c43      	adds	r3, r0, #1
 8007a1e:	d102      	bne.n	8007a26 <_isatty_r+0x1a>
 8007a20:	682b      	ldr	r3, [r5, #0]
 8007a22:	b103      	cbz	r3, 8007a26 <_isatty_r+0x1a>
 8007a24:	6023      	str	r3, [r4, #0]
 8007a26:	bd38      	pop	{r3, r4, r5, pc}
 8007a28:	200006c0 	.word	0x200006c0

08007a2c <_malloc_usable_size_r>:
 8007a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a30:	1f18      	subs	r0, r3, #4
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	bfbc      	itt	lt
 8007a36:	580b      	ldrlt	r3, [r1, r0]
 8007a38:	18c0      	addlt	r0, r0, r3
 8007a3a:	4770      	bx	lr

08007a3c <_raise_r>:
 8007a3c:	291f      	cmp	r1, #31
 8007a3e:	b538      	push	{r3, r4, r5, lr}
 8007a40:	4604      	mov	r4, r0
 8007a42:	460d      	mov	r5, r1
 8007a44:	d904      	bls.n	8007a50 <_raise_r+0x14>
 8007a46:	2316      	movs	r3, #22
 8007a48:	6003      	str	r3, [r0, #0]
 8007a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a4e:	bd38      	pop	{r3, r4, r5, pc}
 8007a50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a52:	b112      	cbz	r2, 8007a5a <_raise_r+0x1e>
 8007a54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a58:	b94b      	cbnz	r3, 8007a6e <_raise_r+0x32>
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f000 f830 	bl	8007ac0 <_getpid_r>
 8007a60:	462a      	mov	r2, r5
 8007a62:	4601      	mov	r1, r0
 8007a64:	4620      	mov	r0, r4
 8007a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a6a:	f000 b817 	b.w	8007a9c <_kill_r>
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d00a      	beq.n	8007a88 <_raise_r+0x4c>
 8007a72:	1c59      	adds	r1, r3, #1
 8007a74:	d103      	bne.n	8007a7e <_raise_r+0x42>
 8007a76:	2316      	movs	r3, #22
 8007a78:	6003      	str	r3, [r0, #0]
 8007a7a:	2001      	movs	r0, #1
 8007a7c:	e7e7      	b.n	8007a4e <_raise_r+0x12>
 8007a7e:	2400      	movs	r4, #0
 8007a80:	4628      	mov	r0, r5
 8007a82:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a86:	4798      	blx	r3
 8007a88:	2000      	movs	r0, #0
 8007a8a:	e7e0      	b.n	8007a4e <_raise_r+0x12>

08007a8c <raise>:
 8007a8c:	4b02      	ldr	r3, [pc, #8]	; (8007a98 <raise+0xc>)
 8007a8e:	4601      	mov	r1, r0
 8007a90:	6818      	ldr	r0, [r3, #0]
 8007a92:	f7ff bfd3 	b.w	8007a3c <_raise_r>
 8007a96:	bf00      	nop
 8007a98:	2000008c 	.word	0x2000008c

08007a9c <_kill_r>:
 8007a9c:	b538      	push	{r3, r4, r5, lr}
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	4d06      	ldr	r5, [pc, #24]	; (8007abc <_kill_r+0x20>)
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	4608      	mov	r0, r1
 8007aa6:	4611      	mov	r1, r2
 8007aa8:	602b      	str	r3, [r5, #0]
 8007aaa:	f7fa fa56 	bl	8001f5a <_kill>
 8007aae:	1c43      	adds	r3, r0, #1
 8007ab0:	d102      	bne.n	8007ab8 <_kill_r+0x1c>
 8007ab2:	682b      	ldr	r3, [r5, #0]
 8007ab4:	b103      	cbz	r3, 8007ab8 <_kill_r+0x1c>
 8007ab6:	6023      	str	r3, [r4, #0]
 8007ab8:	bd38      	pop	{r3, r4, r5, pc}
 8007aba:	bf00      	nop
 8007abc:	200006c0 	.word	0x200006c0

08007ac0 <_getpid_r>:
 8007ac0:	f7fa ba44 	b.w	8001f4c <_getpid>

08007ac4 <asin>:
 8007ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	460d      	mov	r5, r1
 8007aca:	f000 f829 	bl	8007b20 <__ieee754_asin>
 8007ace:	4b11      	ldr	r3, [pc, #68]	; (8007b14 <asin+0x50>)
 8007ad0:	4606      	mov	r6, r0
 8007ad2:	f993 3000 	ldrsb.w	r3, [r3]
 8007ad6:	460f      	mov	r7, r1
 8007ad8:	3301      	adds	r3, #1
 8007ada:	d018      	beq.n	8007b0e <asin+0x4a>
 8007adc:	4622      	mov	r2, r4
 8007ade:	462b      	mov	r3, r5
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	4629      	mov	r1, r5
 8007ae4:	f7f8 ffce 	bl	8000a84 <__aeabi_dcmpun>
 8007ae8:	b988      	cbnz	r0, 8007b0e <asin+0x4a>
 8007aea:	4620      	mov	r0, r4
 8007aec:	4629      	mov	r1, r5
 8007aee:	f000 fabf 	bl	8008070 <fabs>
 8007af2:	2200      	movs	r2, #0
 8007af4:	4b08      	ldr	r3, [pc, #32]	; (8007b18 <asin+0x54>)
 8007af6:	f7f8 ffbb 	bl	8000a70 <__aeabi_dcmpgt>
 8007afa:	b140      	cbz	r0, 8007b0e <asin+0x4a>
 8007afc:	f7fd f900 	bl	8004d00 <__errno>
 8007b00:	2321      	movs	r3, #33	; 0x21
 8007b02:	6003      	str	r3, [r0, #0]
 8007b04:	4805      	ldr	r0, [pc, #20]	; (8007b1c <asin+0x58>)
 8007b06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007b0a:	f000 bab5 	b.w	8008078 <nan>
 8007b0e:	4630      	mov	r0, r6
 8007b10:	4639      	mov	r1, r7
 8007b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b14:	2000025c 	.word	0x2000025c
 8007b18:	3ff00000 	.word	0x3ff00000
 8007b1c:	080083b8 	.word	0x080083b8

08007b20 <__ieee754_asin>:
 8007b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b24:	4bc4      	ldr	r3, [pc, #784]	; (8007e38 <__ieee754_asin+0x318>)
 8007b26:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007b2a:	b087      	sub	sp, #28
 8007b2c:	429e      	cmp	r6, r3
 8007b2e:	4602      	mov	r2, r0
 8007b30:	4604      	mov	r4, r0
 8007b32:	460d      	mov	r5, r1
 8007b34:	9105      	str	r1, [sp, #20]
 8007b36:	dd29      	ble.n	8007b8c <__ieee754_asin+0x6c>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 8007b3e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8007b42:	4333      	orrs	r3, r6
 8007b44:	d114      	bne.n	8007b70 <__ieee754_asin+0x50>
 8007b46:	a3a2      	add	r3, pc, #648	; (adr r3, 8007dd0 <__ieee754_asin+0x2b0>)
 8007b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4c:	f7f8 fd00 	bl	8000550 <__aeabi_dmul>
 8007b50:	a3a1      	add	r3, pc, #644	; (adr r3, 8007dd8 <__ieee754_asin+0x2b8>)
 8007b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b56:	4606      	mov	r6, r0
 8007b58:	460f      	mov	r7, r1
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	4629      	mov	r1, r5
 8007b5e:	f7f8 fcf7 	bl	8000550 <__aeabi_dmul>
 8007b62:	4602      	mov	r2, r0
 8007b64:	460b      	mov	r3, r1
 8007b66:	4630      	mov	r0, r6
 8007b68:	4639      	mov	r1, r7
 8007b6a:	f7f8 fb3b 	bl	80001e4 <__adddf3>
 8007b6e:	e006      	b.n	8007b7e <__ieee754_asin+0x5e>
 8007b70:	460b      	mov	r3, r1
 8007b72:	f7f8 fb35 	bl	80001e0 <__aeabi_dsub>
 8007b76:	4602      	mov	r2, r0
 8007b78:	460b      	mov	r3, r1
 8007b7a:	f7f8 fe13 	bl	80007a4 <__aeabi_ddiv>
 8007b7e:	4604      	mov	r4, r0
 8007b80:	460d      	mov	r5, r1
 8007b82:	4620      	mov	r0, r4
 8007b84:	4629      	mov	r1, r5
 8007b86:	b007      	add	sp, #28
 8007b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b8c:	4bab      	ldr	r3, [pc, #684]	; (8007e3c <__ieee754_asin+0x31c>)
 8007b8e:	429e      	cmp	r6, r3
 8007b90:	dc0e      	bgt.n	8007bb0 <__ieee754_asin+0x90>
 8007b92:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8007b96:	f280 80ab 	bge.w	8007cf0 <__ieee754_asin+0x1d0>
 8007b9a:	a391      	add	r3, pc, #580	; (adr r3, 8007de0 <__ieee754_asin+0x2c0>)
 8007b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba0:	f7f8 fb20 	bl	80001e4 <__adddf3>
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	4ba6      	ldr	r3, [pc, #664]	; (8007e40 <__ieee754_asin+0x320>)
 8007ba8:	f7f8 ff62 	bl	8000a70 <__aeabi_dcmpgt>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	d1e8      	bne.n	8007b82 <__ieee754_asin+0x62>
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	4629      	mov	r1, r5
 8007bb4:	f000 fa5c 	bl	8008070 <fabs>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	460b      	mov	r3, r1
 8007bbc:	2000      	movs	r0, #0
 8007bbe:	49a0      	ldr	r1, [pc, #640]	; (8007e40 <__ieee754_asin+0x320>)
 8007bc0:	f7f8 fb0e 	bl	80001e0 <__aeabi_dsub>
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	4b9f      	ldr	r3, [pc, #636]	; (8007e44 <__ieee754_asin+0x324>)
 8007bc8:	f7f8 fcc2 	bl	8000550 <__aeabi_dmul>
 8007bcc:	a386      	add	r3, pc, #536	; (adr r3, 8007de8 <__ieee754_asin+0x2c8>)
 8007bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	460d      	mov	r5, r1
 8007bd6:	f7f8 fcbb 	bl	8000550 <__aeabi_dmul>
 8007bda:	a385      	add	r3, pc, #532	; (adr r3, 8007df0 <__ieee754_asin+0x2d0>)
 8007bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be0:	f7f8 fb00 	bl	80001e4 <__adddf3>
 8007be4:	4622      	mov	r2, r4
 8007be6:	462b      	mov	r3, r5
 8007be8:	f7f8 fcb2 	bl	8000550 <__aeabi_dmul>
 8007bec:	a382      	add	r3, pc, #520	; (adr r3, 8007df8 <__ieee754_asin+0x2d8>)
 8007bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf2:	f7f8 faf5 	bl	80001e0 <__aeabi_dsub>
 8007bf6:	4622      	mov	r2, r4
 8007bf8:	462b      	mov	r3, r5
 8007bfa:	f7f8 fca9 	bl	8000550 <__aeabi_dmul>
 8007bfe:	a380      	add	r3, pc, #512	; (adr r3, 8007e00 <__ieee754_asin+0x2e0>)
 8007c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c04:	f7f8 faee 	bl	80001e4 <__adddf3>
 8007c08:	4622      	mov	r2, r4
 8007c0a:	462b      	mov	r3, r5
 8007c0c:	f7f8 fca0 	bl	8000550 <__aeabi_dmul>
 8007c10:	a37d      	add	r3, pc, #500	; (adr r3, 8007e08 <__ieee754_asin+0x2e8>)
 8007c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c16:	f7f8 fae3 	bl	80001e0 <__aeabi_dsub>
 8007c1a:	4622      	mov	r2, r4
 8007c1c:	462b      	mov	r3, r5
 8007c1e:	f7f8 fc97 	bl	8000550 <__aeabi_dmul>
 8007c22:	a37b      	add	r3, pc, #492	; (adr r3, 8007e10 <__ieee754_asin+0x2f0>)
 8007c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c28:	f7f8 fadc 	bl	80001e4 <__adddf3>
 8007c2c:	4622      	mov	r2, r4
 8007c2e:	462b      	mov	r3, r5
 8007c30:	f7f8 fc8e 	bl	8000550 <__aeabi_dmul>
 8007c34:	a378      	add	r3, pc, #480	; (adr r3, 8007e18 <__ieee754_asin+0x2f8>)
 8007c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3a:	e9cd 0100 	strd	r0, r1, [sp]
 8007c3e:	4620      	mov	r0, r4
 8007c40:	4629      	mov	r1, r5
 8007c42:	f7f8 fc85 	bl	8000550 <__aeabi_dmul>
 8007c46:	a376      	add	r3, pc, #472	; (adr r3, 8007e20 <__ieee754_asin+0x300>)
 8007c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4c:	f7f8 fac8 	bl	80001e0 <__aeabi_dsub>
 8007c50:	4622      	mov	r2, r4
 8007c52:	462b      	mov	r3, r5
 8007c54:	f7f8 fc7c 	bl	8000550 <__aeabi_dmul>
 8007c58:	a373      	add	r3, pc, #460	; (adr r3, 8007e28 <__ieee754_asin+0x308>)
 8007c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5e:	f7f8 fac1 	bl	80001e4 <__adddf3>
 8007c62:	4622      	mov	r2, r4
 8007c64:	462b      	mov	r3, r5
 8007c66:	f7f8 fc73 	bl	8000550 <__aeabi_dmul>
 8007c6a:	a371      	add	r3, pc, #452	; (adr r3, 8007e30 <__ieee754_asin+0x310>)
 8007c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c70:	f7f8 fab6 	bl	80001e0 <__aeabi_dsub>
 8007c74:	4622      	mov	r2, r4
 8007c76:	462b      	mov	r3, r5
 8007c78:	f7f8 fc6a 	bl	8000550 <__aeabi_dmul>
 8007c7c:	4b70      	ldr	r3, [pc, #448]	; (8007e40 <__ieee754_asin+0x320>)
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f7f8 fab0 	bl	80001e4 <__adddf3>
 8007c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c88:	4620      	mov	r0, r4
 8007c8a:	4629      	mov	r1, r5
 8007c8c:	f000 f944 	bl	8007f18 <__ieee754_sqrt>
 8007c90:	4b6d      	ldr	r3, [pc, #436]	; (8007e48 <__ieee754_asin+0x328>)
 8007c92:	4682      	mov	sl, r0
 8007c94:	429e      	cmp	r6, r3
 8007c96:	468b      	mov	fp, r1
 8007c98:	f340 80d8 	ble.w	8007e4c <__ieee754_asin+0x32c>
 8007c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ca0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ca4:	f7f8 fd7e 	bl	80007a4 <__aeabi_ddiv>
 8007ca8:	4652      	mov	r2, sl
 8007caa:	465b      	mov	r3, fp
 8007cac:	f7f8 fc50 	bl	8000550 <__aeabi_dmul>
 8007cb0:	4652      	mov	r2, sl
 8007cb2:	465b      	mov	r3, fp
 8007cb4:	f7f8 fa96 	bl	80001e4 <__adddf3>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	f7f8 fa92 	bl	80001e4 <__adddf3>
 8007cc0:	a345      	add	r3, pc, #276	; (adr r3, 8007dd8 <__ieee754_asin+0x2b8>)
 8007cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc6:	f7f8 fa8b 	bl	80001e0 <__aeabi_dsub>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	460b      	mov	r3, r1
 8007cce:	a140      	add	r1, pc, #256	; (adr r1, 8007dd0 <__ieee754_asin+0x2b0>)
 8007cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cd4:	f7f8 fa84 	bl	80001e0 <__aeabi_dsub>
 8007cd8:	9b05      	ldr	r3, [sp, #20]
 8007cda:	4604      	mov	r4, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	bfdc      	itt	le
 8007ce0:	4602      	movle	r2, r0
 8007ce2:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8007ce6:	460d      	mov	r5, r1
 8007ce8:	bfdc      	itt	le
 8007cea:	4614      	movle	r4, r2
 8007cec:	461d      	movle	r5, r3
 8007cee:	e748      	b.n	8007b82 <__ieee754_asin+0x62>
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	f7f8 fc2d 	bl	8000550 <__aeabi_dmul>
 8007cf6:	a33c      	add	r3, pc, #240	; (adr r3, 8007de8 <__ieee754_asin+0x2c8>)
 8007cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfc:	4606      	mov	r6, r0
 8007cfe:	460f      	mov	r7, r1
 8007d00:	f7f8 fc26 	bl	8000550 <__aeabi_dmul>
 8007d04:	a33a      	add	r3, pc, #232	; (adr r3, 8007df0 <__ieee754_asin+0x2d0>)
 8007d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0a:	f7f8 fa6b 	bl	80001e4 <__adddf3>
 8007d0e:	4632      	mov	r2, r6
 8007d10:	463b      	mov	r3, r7
 8007d12:	f7f8 fc1d 	bl	8000550 <__aeabi_dmul>
 8007d16:	a338      	add	r3, pc, #224	; (adr r3, 8007df8 <__ieee754_asin+0x2d8>)
 8007d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1c:	f7f8 fa60 	bl	80001e0 <__aeabi_dsub>
 8007d20:	4632      	mov	r2, r6
 8007d22:	463b      	mov	r3, r7
 8007d24:	f7f8 fc14 	bl	8000550 <__aeabi_dmul>
 8007d28:	a335      	add	r3, pc, #212	; (adr r3, 8007e00 <__ieee754_asin+0x2e0>)
 8007d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2e:	f7f8 fa59 	bl	80001e4 <__adddf3>
 8007d32:	4632      	mov	r2, r6
 8007d34:	463b      	mov	r3, r7
 8007d36:	f7f8 fc0b 	bl	8000550 <__aeabi_dmul>
 8007d3a:	a333      	add	r3, pc, #204	; (adr r3, 8007e08 <__ieee754_asin+0x2e8>)
 8007d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d40:	f7f8 fa4e 	bl	80001e0 <__aeabi_dsub>
 8007d44:	4632      	mov	r2, r6
 8007d46:	463b      	mov	r3, r7
 8007d48:	f7f8 fc02 	bl	8000550 <__aeabi_dmul>
 8007d4c:	a330      	add	r3, pc, #192	; (adr r3, 8007e10 <__ieee754_asin+0x2f0>)
 8007d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d52:	f7f8 fa47 	bl	80001e4 <__adddf3>
 8007d56:	4632      	mov	r2, r6
 8007d58:	463b      	mov	r3, r7
 8007d5a:	f7f8 fbf9 	bl	8000550 <__aeabi_dmul>
 8007d5e:	a32e      	add	r3, pc, #184	; (adr r3, 8007e18 <__ieee754_asin+0x2f8>)
 8007d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d64:	4680      	mov	r8, r0
 8007d66:	4689      	mov	r9, r1
 8007d68:	4630      	mov	r0, r6
 8007d6a:	4639      	mov	r1, r7
 8007d6c:	f7f8 fbf0 	bl	8000550 <__aeabi_dmul>
 8007d70:	a32b      	add	r3, pc, #172	; (adr r3, 8007e20 <__ieee754_asin+0x300>)
 8007d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d76:	f7f8 fa33 	bl	80001e0 <__aeabi_dsub>
 8007d7a:	4632      	mov	r2, r6
 8007d7c:	463b      	mov	r3, r7
 8007d7e:	f7f8 fbe7 	bl	8000550 <__aeabi_dmul>
 8007d82:	a329      	add	r3, pc, #164	; (adr r3, 8007e28 <__ieee754_asin+0x308>)
 8007d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d88:	f7f8 fa2c 	bl	80001e4 <__adddf3>
 8007d8c:	4632      	mov	r2, r6
 8007d8e:	463b      	mov	r3, r7
 8007d90:	f7f8 fbde 	bl	8000550 <__aeabi_dmul>
 8007d94:	a326      	add	r3, pc, #152	; (adr r3, 8007e30 <__ieee754_asin+0x310>)
 8007d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9a:	f7f8 fa21 	bl	80001e0 <__aeabi_dsub>
 8007d9e:	4632      	mov	r2, r6
 8007da0:	463b      	mov	r3, r7
 8007da2:	f7f8 fbd5 	bl	8000550 <__aeabi_dmul>
 8007da6:	2200      	movs	r2, #0
 8007da8:	4b25      	ldr	r3, [pc, #148]	; (8007e40 <__ieee754_asin+0x320>)
 8007daa:	f7f8 fa1b 	bl	80001e4 <__adddf3>
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	4640      	mov	r0, r8
 8007db4:	4649      	mov	r1, r9
 8007db6:	f7f8 fcf5 	bl	80007a4 <__aeabi_ddiv>
 8007dba:	4622      	mov	r2, r4
 8007dbc:	462b      	mov	r3, r5
 8007dbe:	f7f8 fbc7 	bl	8000550 <__aeabi_dmul>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	4629      	mov	r1, r5
 8007dca:	e6ce      	b.n	8007b6a <__ieee754_asin+0x4a>
 8007dcc:	f3af 8000 	nop.w
 8007dd0:	54442d18 	.word	0x54442d18
 8007dd4:	3ff921fb 	.word	0x3ff921fb
 8007dd8:	33145c07 	.word	0x33145c07
 8007ddc:	3c91a626 	.word	0x3c91a626
 8007de0:	8800759c 	.word	0x8800759c
 8007de4:	7e37e43c 	.word	0x7e37e43c
 8007de8:	0dfdf709 	.word	0x0dfdf709
 8007dec:	3f023de1 	.word	0x3f023de1
 8007df0:	7501b288 	.word	0x7501b288
 8007df4:	3f49efe0 	.word	0x3f49efe0
 8007df8:	b5688f3b 	.word	0xb5688f3b
 8007dfc:	3fa48228 	.word	0x3fa48228
 8007e00:	0e884455 	.word	0x0e884455
 8007e04:	3fc9c155 	.word	0x3fc9c155
 8007e08:	03eb6f7d 	.word	0x03eb6f7d
 8007e0c:	3fd4d612 	.word	0x3fd4d612
 8007e10:	55555555 	.word	0x55555555
 8007e14:	3fc55555 	.word	0x3fc55555
 8007e18:	b12e9282 	.word	0xb12e9282
 8007e1c:	3fb3b8c5 	.word	0x3fb3b8c5
 8007e20:	1b8d0159 	.word	0x1b8d0159
 8007e24:	3fe6066c 	.word	0x3fe6066c
 8007e28:	9c598ac8 	.word	0x9c598ac8
 8007e2c:	40002ae5 	.word	0x40002ae5
 8007e30:	1c8a2d4b 	.word	0x1c8a2d4b
 8007e34:	40033a27 	.word	0x40033a27
 8007e38:	3fefffff 	.word	0x3fefffff
 8007e3c:	3fdfffff 	.word	0x3fdfffff
 8007e40:	3ff00000 	.word	0x3ff00000
 8007e44:	3fe00000 	.word	0x3fe00000
 8007e48:	3fef3332 	.word	0x3fef3332
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	f7f8 f9c8 	bl	80001e4 <__adddf3>
 8007e54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e58:	4606      	mov	r6, r0
 8007e5a:	460f      	mov	r7, r1
 8007e5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e60:	f7f8 fca0 	bl	80007a4 <__aeabi_ddiv>
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	4630      	mov	r0, r6
 8007e6a:	4639      	mov	r1, r7
 8007e6c:	f7f8 fb70 	bl	8000550 <__aeabi_dmul>
 8007e70:	f04f 0800 	mov.w	r8, #0
 8007e74:	4606      	mov	r6, r0
 8007e76:	460f      	mov	r7, r1
 8007e78:	4642      	mov	r2, r8
 8007e7a:	465b      	mov	r3, fp
 8007e7c:	4640      	mov	r0, r8
 8007e7e:	4659      	mov	r1, fp
 8007e80:	f7f8 fb66 	bl	8000550 <__aeabi_dmul>
 8007e84:	4602      	mov	r2, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	4620      	mov	r0, r4
 8007e8a:	4629      	mov	r1, r5
 8007e8c:	f7f8 f9a8 	bl	80001e0 <__aeabi_dsub>
 8007e90:	4642      	mov	r2, r8
 8007e92:	4604      	mov	r4, r0
 8007e94:	460d      	mov	r5, r1
 8007e96:	465b      	mov	r3, fp
 8007e98:	4650      	mov	r0, sl
 8007e9a:	4659      	mov	r1, fp
 8007e9c:	f7f8 f9a2 	bl	80001e4 <__adddf3>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	f7f8 fc7c 	bl	80007a4 <__aeabi_ddiv>
 8007eac:	4602      	mov	r2, r0
 8007eae:	460b      	mov	r3, r1
 8007eb0:	f7f8 f998 	bl	80001e4 <__adddf3>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	a113      	add	r1, pc, #76	; (adr r1, 8007f08 <__ieee754_asin+0x3e8>)
 8007eba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ebe:	f7f8 f98f 	bl	80001e0 <__aeabi_dsub>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	4639      	mov	r1, r7
 8007eca:	f7f8 f989 	bl	80001e0 <__aeabi_dsub>
 8007ece:	4642      	mov	r2, r8
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	460d      	mov	r5, r1
 8007ed4:	465b      	mov	r3, fp
 8007ed6:	4640      	mov	r0, r8
 8007ed8:	4659      	mov	r1, fp
 8007eda:	f7f8 f983 	bl	80001e4 <__adddf3>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	a10b      	add	r1, pc, #44	; (adr r1, 8007f10 <__ieee754_asin+0x3f0>)
 8007ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ee8:	f7f8 f97a 	bl	80001e0 <__aeabi_dsub>
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	4629      	mov	r1, r5
 8007ef4:	f7f8 f974 	bl	80001e0 <__aeabi_dsub>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	a104      	add	r1, pc, #16	; (adr r1, 8007f10 <__ieee754_asin+0x3f0>)
 8007efe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f02:	e6e7      	b.n	8007cd4 <__ieee754_asin+0x1b4>
 8007f04:	f3af 8000 	nop.w
 8007f08:	33145c07 	.word	0x33145c07
 8007f0c:	3c91a626 	.word	0x3c91a626
 8007f10:	54442d18 	.word	0x54442d18
 8007f14:	3fe921fb 	.word	0x3fe921fb

08007f18 <__ieee754_sqrt>:
 8007f18:	f8df c150 	ldr.w	ip, [pc, #336]	; 800806c <__ieee754_sqrt+0x154>
 8007f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f20:	ea3c 0c01 	bics.w	ip, ip, r1
 8007f24:	460b      	mov	r3, r1
 8007f26:	4606      	mov	r6, r0
 8007f28:	460d      	mov	r5, r1
 8007f2a:	460a      	mov	r2, r1
 8007f2c:	4607      	mov	r7, r0
 8007f2e:	4604      	mov	r4, r0
 8007f30:	d10e      	bne.n	8007f50 <__ieee754_sqrt+0x38>
 8007f32:	4602      	mov	r2, r0
 8007f34:	f7f8 fb0c 	bl	8000550 <__aeabi_dmul>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	4629      	mov	r1, r5
 8007f40:	f7f8 f950 	bl	80001e4 <__adddf3>
 8007f44:	4606      	mov	r6, r0
 8007f46:	460d      	mov	r5, r1
 8007f48:	4630      	mov	r0, r6
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f50:	2900      	cmp	r1, #0
 8007f52:	dc0d      	bgt.n	8007f70 <__ieee754_sqrt+0x58>
 8007f54:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007f58:	ea5c 0707 	orrs.w	r7, ip, r7
 8007f5c:	d0f4      	beq.n	8007f48 <__ieee754_sqrt+0x30>
 8007f5e:	b139      	cbz	r1, 8007f70 <__ieee754_sqrt+0x58>
 8007f60:	4602      	mov	r2, r0
 8007f62:	f7f8 f93d 	bl	80001e0 <__aeabi_dsub>
 8007f66:	4602      	mov	r2, r0
 8007f68:	460b      	mov	r3, r1
 8007f6a:	f7f8 fc1b 	bl	80007a4 <__aeabi_ddiv>
 8007f6e:	e7e9      	b.n	8007f44 <__ieee754_sqrt+0x2c>
 8007f70:	1512      	asrs	r2, r2, #20
 8007f72:	d074      	beq.n	800805e <__ieee754_sqrt+0x146>
 8007f74:	2000      	movs	r0, #0
 8007f76:	07d5      	lsls	r5, r2, #31
 8007f78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f7c:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8007f80:	bf5e      	ittt	pl
 8007f82:	0fe3      	lsrpl	r3, r4, #31
 8007f84:	0064      	lslpl	r4, r4, #1
 8007f86:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8007f8a:	0fe3      	lsrs	r3, r4, #31
 8007f8c:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007f90:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8007f94:	2516      	movs	r5, #22
 8007f96:	4601      	mov	r1, r0
 8007f98:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007f9c:	1076      	asrs	r6, r6, #1
 8007f9e:	0064      	lsls	r4, r4, #1
 8007fa0:	188f      	adds	r7, r1, r2
 8007fa2:	429f      	cmp	r7, r3
 8007fa4:	bfde      	ittt	le
 8007fa6:	1bdb      	suble	r3, r3, r7
 8007fa8:	18b9      	addle	r1, r7, r2
 8007faa:	1880      	addle	r0, r0, r2
 8007fac:	005b      	lsls	r3, r3, #1
 8007fae:	3d01      	subs	r5, #1
 8007fb0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007fb4:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007fb8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007fbc:	d1f0      	bne.n	8007fa0 <__ieee754_sqrt+0x88>
 8007fbe:	462a      	mov	r2, r5
 8007fc0:	f04f 0e20 	mov.w	lr, #32
 8007fc4:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8007fc8:	428b      	cmp	r3, r1
 8007fca:	eb07 0c05 	add.w	ip, r7, r5
 8007fce:	dc02      	bgt.n	8007fd6 <__ieee754_sqrt+0xbe>
 8007fd0:	d113      	bne.n	8007ffa <__ieee754_sqrt+0xe2>
 8007fd2:	45a4      	cmp	ip, r4
 8007fd4:	d811      	bhi.n	8007ffa <__ieee754_sqrt+0xe2>
 8007fd6:	f1bc 0f00 	cmp.w	ip, #0
 8007fda:	eb0c 0507 	add.w	r5, ip, r7
 8007fde:	da43      	bge.n	8008068 <__ieee754_sqrt+0x150>
 8007fe0:	2d00      	cmp	r5, #0
 8007fe2:	db41      	blt.n	8008068 <__ieee754_sqrt+0x150>
 8007fe4:	f101 0801 	add.w	r8, r1, #1
 8007fe8:	1a5b      	subs	r3, r3, r1
 8007fea:	4641      	mov	r1, r8
 8007fec:	45a4      	cmp	ip, r4
 8007fee:	bf88      	it	hi
 8007ff0:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007ff4:	eba4 040c 	sub.w	r4, r4, ip
 8007ff8:	443a      	add	r2, r7
 8007ffa:	005b      	lsls	r3, r3, #1
 8007ffc:	f1be 0e01 	subs.w	lr, lr, #1
 8008000:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008004:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8008008:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800800c:	d1dc      	bne.n	8007fc8 <__ieee754_sqrt+0xb0>
 800800e:	4323      	orrs	r3, r4
 8008010:	d006      	beq.n	8008020 <__ieee754_sqrt+0x108>
 8008012:	1c54      	adds	r4, r2, #1
 8008014:	bf0b      	itete	eq
 8008016:	4672      	moveq	r2, lr
 8008018:	3201      	addne	r2, #1
 800801a:	3001      	addeq	r0, #1
 800801c:	f022 0201 	bicne.w	r2, r2, #1
 8008020:	1043      	asrs	r3, r0, #1
 8008022:	07c1      	lsls	r1, r0, #31
 8008024:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008028:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800802c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008030:	bf48      	it	mi
 8008032:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008036:	4610      	mov	r0, r2
 8008038:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800803c:	e782      	b.n	8007f44 <__ieee754_sqrt+0x2c>
 800803e:	0ae3      	lsrs	r3, r4, #11
 8008040:	3915      	subs	r1, #21
 8008042:	0564      	lsls	r4, r4, #21
 8008044:	2b00      	cmp	r3, #0
 8008046:	d0fa      	beq.n	800803e <__ieee754_sqrt+0x126>
 8008048:	02de      	lsls	r6, r3, #11
 800804a:	d50a      	bpl.n	8008062 <__ieee754_sqrt+0x14a>
 800804c:	f1c2 0020 	rsb	r0, r2, #32
 8008050:	fa24 f000 	lsr.w	r0, r4, r0
 8008054:	1e55      	subs	r5, r2, #1
 8008056:	4094      	lsls	r4, r2
 8008058:	4303      	orrs	r3, r0
 800805a:	1b4a      	subs	r2, r1, r5
 800805c:	e78a      	b.n	8007f74 <__ieee754_sqrt+0x5c>
 800805e:	4611      	mov	r1, r2
 8008060:	e7f0      	b.n	8008044 <__ieee754_sqrt+0x12c>
 8008062:	005b      	lsls	r3, r3, #1
 8008064:	3201      	adds	r2, #1
 8008066:	e7ef      	b.n	8008048 <__ieee754_sqrt+0x130>
 8008068:	4688      	mov	r8, r1
 800806a:	e7bd      	b.n	8007fe8 <__ieee754_sqrt+0xd0>
 800806c:	7ff00000 	.word	0x7ff00000

08008070 <fabs>:
 8008070:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008074:	4770      	bx	lr
	...

08008078 <nan>:
 8008078:	2000      	movs	r0, #0
 800807a:	4901      	ldr	r1, [pc, #4]	; (8008080 <nan+0x8>)
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	7ff80000 	.word	0x7ff80000

08008084 <_init>:
 8008084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008086:	bf00      	nop
 8008088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800808a:	bc08      	pop	{r3}
 800808c:	469e      	mov	lr, r3
 800808e:	4770      	bx	lr

08008090 <_fini>:
 8008090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008092:	bf00      	nop
 8008094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008096:	bc08      	pop	{r3}
 8008098:	469e      	mov	lr, r3
 800809a:	4770      	bx	lr
